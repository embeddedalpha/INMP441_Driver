
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003778  08003778  00004778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c4  080037c4  00005054  2**0
                  CONTENTS
  4 .ARM          00000008  080037c4  080037c4  000047c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037cc  080037cc  00005054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080037d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005054  2**0
                  CONTENTS
 10 .bss          000001a8  20000054  20000054  00005054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  00005054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076d0  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d6f  00000000  00000000  0000c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  0000d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c1  00000000  00000000  0000d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a431  00000000  00000000  0000d8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005208  00000000  00000000  00027d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2f0  00000000  00000000  0002cf32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bc222  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000103c  00000000  00000000  000bc268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000bd2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003760 	.word	0x08003760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08003760 	.word	0x08003760

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <Console_Init+0x44>)
 8000c34:	f001 fab1 	bl	800219a <USART_Config_Reset>
	 serial.Port = USART1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <Console_Init+0x44>)
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <Console_Init+0x48>)
 8000c3c:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <Console_Init+0x44>)
 8000c42:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 8000c44:	2201      	movs	r2, #1
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <Console_Init+0x44>)
 8000c48:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Console_Init+0x44>)
 8000c50:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8000c52:	2206      	movs	r2, #6
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <Console_Init+0x44>)
 8000c56:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8000c58:	2207      	movs	r2, #7
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <Console_Init+0x44>)
 8000c5c:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8000c5e:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <Console_Init+0x44>)
 8000c60:	f001 ffba 	bl	8002bd8 <USART_Init>


}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000070 	.word	0x20000070
 8000c70:	40011000 	.word	0x40011000

08000c74 <printConsole>:

 void printConsole(char *msg, ...)
{
 8000c74:	b40f      	push	{r0, r1, r2, r3}
 8000c76:	b580      	push	{r7, lr}
 8000c78:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 8000c80:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000c84:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000c88:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000c8c:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 8000c90:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 8000c92:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000c96:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	3b14      	subs	r3, #20
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 8000ca6:	f101 0120 	add.w	r1, r1, #32
 8000caa:	6809      	ldr	r1, [r1, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f002 f859 	bl	8002d64 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000cb8:	f102 0214 	add.w	r2, r2, #20
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e020      	b.n	8000d02 <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 8000cc0:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000cc4:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 8000cc8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000ccc:	f103 0314 	add.w	r3, r3, #20
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <printConsole+0xc0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 8000cdc:	bf00      	nop
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <printConsole+0xc0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f8      	beq.n	8000cde <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 8000cec:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000cf0:	f103 0314 	add.w	r3, r3, #20
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000cfc:	f102 0214 	add.w	r2, r2, #20
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	3b14      	subs	r3, #20
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa61 	bl	80001d0 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000d16:	f103 0314 	add.w	r3, r3, #20
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d2cf      	bcs.n	8000cc0 <printConsole+0x4c>
	}
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d30:	b004      	add	sp, #16
 8000d32:	4770      	bx	lr
 8000d34:	20000070 	.word	0x20000070

08000d38 <GPIO_Pin_Low>:
	Port -> ODR = 1 << pin;
}


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	2101      	movs	r1, #1
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4e:	43d2      	mvns	r2, r2
 8000d50:	401a      	ands	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	615a      	str	r2, [r3, #20]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a25      	ldr	r2, [pc, #148]	@ (8000e04 <GPIO_Clock_Enable+0xa0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d106      	bne.n	8000d82 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000d74:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d78:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d80:	e039      	b.n	8000df6 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a21      	ldr	r2, [pc, #132]	@ (8000e0c <GPIO_Clock_Enable+0xa8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d106      	bne.n	8000d98 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	e02e      	b.n	8000df6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000e10 <GPIO_Clock_Enable+0xac>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d106      	bne.n	8000dae <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dac:	e023      	b.n	8000df6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <GPIO_Clock_Enable+0xb0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d106      	bne.n	8000dc4 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	e018      	b.n	8000df6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <GPIO_Clock_Enable+0xb4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d106      	bne.n	8000dda <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd8:	e00d      	b.n	8000df6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <GPIO_Clock_Enable+0xb8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d106      	bne.n	8000df0 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <GPIO_Clock_Enable+0xa4>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	e002      	b.n	8000df6 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	e000      	b.n	8000df8 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40021c00 	.word	0x40021c00

08000e20 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	70fb      	strb	r3, [r7, #3]
 8000e32:	460b      	mov	r3, r1
 8000e34:	70bb      	strb	r3, [r7, #2]
 8000e36:	4613      	mov	r3, r2
 8000e38:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff92 	bl	8000d64 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	78b9      	ldrb	r1, [r7, #2]
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	0052      	lsls	r2, r2, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	7879      	ldrb	r1, [r7, #1]
 8000e5a:	78fa      	ldrb	r2, [r7, #3]
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	7c39      	ldrb	r1, [r7, #16]
 8000e6c:	78fa      	ldrb	r2, [r7, #3]
 8000e6e:	0052      	lsls	r2, r2, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	7d39      	ldrb	r1, [r7, #20]
 8000e80:	78fa      	ldrb	r2, [r7, #3]
 8000e82:	0052      	lsls	r2, r2, #1
 8000e84:	fa01 f202 	lsl.w	r2, r1, r2
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	2b07      	cmp	r3, #7
 8000e92:	d80a      	bhi.n	8000eaa <GPIO_Pin_Init+0x8a>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	7e39      	ldrb	r1, [r7, #24]
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8000ea8:	e00a      	b.n	8000ec0 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	7e39      	ldrb	r1, [r7, #24]
 8000eb0:	78fa      	ldrb	r2, [r7, #3]
 8000eb2:	3a08      	subs	r2, #8
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <SCK_PIN_INIT2>:




static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10) || (config->Half_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10)){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2315      	movs	r3, #21
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d006      	beq.n	8000eec <SCK_PIN_INIT2+0x24>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	2315      	movs	r3, #21
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d10e      	bne.n	8000f0a <SCK_PIN_INIT2+0x42>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000eec:	2002      	movs	r0, #2
 8000eee:	2400      	movs	r4, #0
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	9102      	str	r1, [sp, #8]
 8000ef8:	9201      	str	r2, [sp, #4]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4623      	mov	r3, r4
 8000efe:	4602      	mov	r2, r0
 8000f00:	210a      	movs	r1, #10
 8000f02:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <SCK_PIN_INIT2+0x94>)
 8000f04:	f7ff ff8c 	bl	8000e20 <GPIO_Pin_Init>
 8000f08:	e022      	b.n	8000f50 <SCK_PIN_INIT2+0x88>
	}
	else if((config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13) || (config->Half_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13)){
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000f10:	461a      	mov	r2, r3
 8000f12:	2318      	movs	r3, #24
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d006      	beq.n	8000f26 <SCK_PIN_INIT2+0x5e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2318      	movs	r3, #24
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d10e      	bne.n	8000f44 <SCK_PIN_INIT2+0x7c>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000f26:	2002      	movs	r0, #2
 8000f28:	2400      	movs	r4, #0
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2105      	movs	r1, #5
 8000f30:	9102      	str	r1, [sp, #8]
 8000f32:	9201      	str	r2, [sp, #4]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4623      	mov	r3, r4
 8000f38:	4602      	mov	r2, r0
 8000f3a:	210d      	movs	r1, #13
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <SCK_PIN_INIT2+0x94>)
 8000f3e:	f7ff ff6f 	bl	8000e20 <GPIO_Pin_Init>
 8000f42:	e005      	b.n	8000f50 <SCK_PIN_INIT2+0x88>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	77da      	strb	r2, [r3, #31]
		return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e000      	b.n	8000f52 <SCK_PIN_INIT2+0x8a>
	}
	return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020400 	.word	0x40020400

08000f60 <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09) || (config->Half_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09)){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	231d      	movs	r3, #29
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d006      	beq.n	8000f84 <WS_PIN_INIT2+0x24>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	231d      	movs	r3, #29
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d10e      	bne.n	8000fa2 <WS_PIN_INIT2+0x42>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000f84:	2002      	movs	r0, #2
 8000f86:	2400      	movs	r4, #0
 8000f88:	2303      	movs	r3, #3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	9102      	str	r1, [sp, #8]
 8000f90:	9201      	str	r2, [sp, #4]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	4623      	mov	r3, r4
 8000f96:	4602      	mov	r2, r0
 8000f98:	2109      	movs	r1, #9
 8000f9a:	4816      	ldr	r0, [pc, #88]	@ (8000ff4 <WS_PIN_INIT2+0x94>)
 8000f9c:	f7ff ff40 	bl	8000e20 <GPIO_Pin_Init>
 8000fa0:	e022      	b.n	8000fe8 <WS_PIN_INIT2+0x88>
	}
	else if((config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12) || (config->Half_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12)){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2317      	movs	r3, #23
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d006      	beq.n	8000fbe <WS_PIN_INIT2+0x5e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2317      	movs	r3, #23
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d10e      	bne.n	8000fdc <WS_PIN_INIT2+0x7c>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	2400      	movs	r4, #0
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2105      	movs	r1, #5
 8000fc8:	9102      	str	r1, [sp, #8]
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4623      	mov	r3, r4
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	210c      	movs	r1, #12
 8000fd4:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <WS_PIN_INIT2+0x94>)
 8000fd6:	f7ff ff23 	bl	8000e20 <GPIO_Pin_Init>
 8000fda:	e005      	b.n	8000fe8 <WS_PIN_INIT2+0x88>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	779a      	strb	r2, [r3, #30]
		return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e000      	b.n	8000fea <WS_PIN_INIT2+0x8a>
	}
	return 1;
 8000fe8:	2301      	movs	r3, #1
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15) || (config->Half_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15)){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001006:	461a      	mov	r2, r3
 8001008:	2316      	movs	r3, #22
 800100a:	429a      	cmp	r2, r3
 800100c:	d006      	beq.n	800101c <SD_PIN_Init2+0x24>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001014:	461a      	mov	r2, r3
 8001016:	2316      	movs	r3, #22
 8001018:	429a      	cmp	r2, r3
 800101a:	d10e      	bne.n	800103a <SD_PIN_Init2+0x42>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2);
 800101c:	2002      	movs	r0, #2
 800101e:	2400      	movs	r4, #0
 8001020:	2303      	movs	r3, #3
 8001022:	2202      	movs	r2, #2
 8001024:	2105      	movs	r1, #5
 8001026:	9102      	str	r1, [sp, #8]
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4623      	mov	r3, r4
 800102e:	4602      	mov	r2, r0
 8001030:	210f      	movs	r1, #15
 8001032:	4816      	ldr	r0, [pc, #88]	@ (800108c <SD_PIN_Init2+0x94>)
 8001034:	f7ff fef4 	bl	8000e20 <GPIO_Pin_Init>
 8001038:	e022      	b.n	8001080 <SD_PIN_Init2+0x88>
	}
	else if((config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03) || (config->Half_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03)){
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001040:	461a      	mov	r2, r3
 8001042:	2319      	movs	r3, #25
 8001044:	429a      	cmp	r2, r3
 8001046:	d006      	beq.n	8001056 <SD_PIN_Init2+0x5e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800104e:	461a      	mov	r2, r3
 8001050:	2319      	movs	r3, #25
 8001052:	429a      	cmp	r2, r3
 8001054:	d10e      	bne.n	8001074 <SD_PIN_Init2+0x7c>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2);
 8001056:	2002      	movs	r0, #2
 8001058:	2400      	movs	r4, #0
 800105a:	2303      	movs	r3, #3
 800105c:	2202      	movs	r2, #2
 800105e:	2105      	movs	r1, #5
 8001060:	9102      	str	r1, [sp, #8]
 8001062:	9201      	str	r2, [sp, #4]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	4602      	mov	r2, r0
 800106a:	2103      	movs	r1, #3
 800106c:	4808      	ldr	r0, [pc, #32]	@ (8001090 <SD_PIN_Init2+0x98>)
 800106e:	f7ff fed7 	bl	8000e20 <GPIO_Pin_Init>
 8001072:	e005      	b.n	8001080 <SD_PIN_Init2+0x88>
	}
	else{
		config->Error.SD_Pin_Error = true;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	775a      	strb	r2, [r3, #29]
		return -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e000      	b.n	8001082 <SD_PIN_Init2+0x8a>
	}
	return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800

08001094 <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b087      	sub	sp, #28
 8001098:	af04      	add	r7, sp, #16
 800109a:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable) || (config->Half_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80010a2:	461a      	mov	r2, r3
 80010a4:	23ff      	movs	r3, #255	@ 0xff
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d106      	bne.n	80010b8 <MCK_PIN_Init2+0x24>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80010b0:	461a      	mov	r2, r3
 80010b2:	23ff      	movs	r3, #255	@ 0xff
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d023      	beq.n	8001100 <MCK_PIN_Init2+0x6c>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7) || (config->Half_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80010be:	461a      	mov	r2, r3
 80010c0:	2325      	movs	r3, #37	@ 0x25
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d006      	beq.n	80010d4 <MCK_PIN_Init2+0x40>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2325      	movs	r3, #37	@ 0x25
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d10e      	bne.n	80010f2 <MCK_PIN_Init2+0x5e>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 80010d4:	2002      	movs	r0, #2
 80010d6:	2400      	movs	r4, #0
 80010d8:	2303      	movs	r3, #3
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	9102      	str	r1, [sp, #8]
 80010e0:	9201      	str	r2, [sp, #4]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4623      	mov	r3, r4
 80010e6:	4602      	mov	r2, r0
 80010e8:	2107      	movs	r1, #7
 80010ea:	4808      	ldr	r0, [pc, #32]	@ (800110c <MCK_PIN_Init2+0x78>)
 80010ec:	f7ff fe98 	bl	8000e20 <GPIO_Pin_Init>
 80010f0:	e006      	b.n	8001100 <MCK_PIN_Init2+0x6c>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e000      	b.n	8001102 <MCK_PIN_Init2+0x6e>
		}
	}
	return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	bf00      	nop
 800110c:	40020800 	.word	0x40020800

08001110 <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b087      	sub	sp, #28
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14)){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f993 3013 	ldrsb.w	r3, [r3, #19]
 800111e:	461a      	mov	r2, r3
 8001120:	231d      	movs	r3, #29
 8001122:	429a      	cmp	r2, r3
 8001124:	d10e      	bne.n	8001144 <EXT_SD_PIN_Init2+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8001126:	2002      	movs	r0, #2
 8001128:	2400      	movs	r4, #0
 800112a:	2303      	movs	r3, #3
 800112c:	2200      	movs	r2, #0
 800112e:	2105      	movs	r1, #5
 8001130:	9102      	str	r1, [sp, #8]
 8001132:	9201      	str	r2, [sp, #4]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4623      	mov	r3, r4
 8001138:	4602      	mov	r2, r0
 800113a:	210e      	movs	r1, #14
 800113c:	4812      	ldr	r0, [pc, #72]	@ (8001188 <EXT_SD_PIN_Init2+0x78>)
 800113e:	f7ff fe6f 	bl	8000e20 <GPIO_Pin_Init>
 8001142:	e01b      	b.n	800117c <EXT_SD_PIN_Init2+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f993 3013 	ldrsb.w	r3, [r3, #19]
 800114a:	461a      	mov	r2, r3
 800114c:	231b      	movs	r3, #27
 800114e:	429a      	cmp	r2, r3
 8001150:	d10e      	bne.n	8001170 <EXT_SD_PIN_Init2+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8001152:	2002      	movs	r0, #2
 8001154:	2400      	movs	r4, #0
 8001156:	2303      	movs	r3, #3
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	9102      	str	r1, [sp, #8]
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4623      	mov	r3, r4
 8001164:	4602      	mov	r2, r0
 8001166:	2102      	movs	r1, #2
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <EXT_SD_PIN_Init2+0x7c>)
 800116a:	f7ff fe59 	bl	8000e20 <GPIO_Pin_Init>
 800116e:	e005      	b.n	800117c <EXT_SD_PIN_Init2+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	771a      	strb	r2, [r3, #28]
		return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e000      	b.n	800117e <EXT_SD_PIN_Init2+0x6e>
	}
	return 1;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800

08001190 <SCK_PIN_INIT3>:


static int8_t SCK_PIN_INIT3(I2S_Config *config)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b087      	sub	sp, #28
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800119e:	461a      	mov	r2, r3
 80011a0:	2315      	movs	r3, #21
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d10e      	bne.n	80011c4 <SCK_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80011a6:	2002      	movs	r0, #2
 80011a8:	2400      	movs	r4, #0
 80011aa:	2303      	movs	r3, #3
 80011ac:	2200      	movs	r2, #0
 80011ae:	2105      	movs	r1, #5
 80011b0:	9102      	str	r1, [sp, #8]
 80011b2:	9201      	str	r2, [sp, #4]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4623      	mov	r3, r4
 80011b8:	4602      	mov	r2, r0
 80011ba:	210a      	movs	r1, #10
 80011bc:	4812      	ldr	r0, [pc, #72]	@ (8001208 <SCK_PIN_INIT3+0x78>)
 80011be:	f7ff fe2f 	bl	8000e20 <GPIO_Pin_Init>
 80011c2:	e01b      	b.n	80011fc <SCK_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80011ca:	461a      	mov	r2, r3
 80011cc:	2318      	movs	r3, #24
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d10e      	bne.n	80011f0 <SCK_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80011d2:	2002      	movs	r0, #2
 80011d4:	2400      	movs	r4, #0
 80011d6:	2303      	movs	r3, #3
 80011d8:	2200      	movs	r2, #0
 80011da:	2105      	movs	r1, #5
 80011dc:	9102      	str	r1, [sp, #8]
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4623      	mov	r3, r4
 80011e4:	4602      	mov	r2, r0
 80011e6:	210d      	movs	r1, #13
 80011e8:	4807      	ldr	r0, [pc, #28]	@ (8001208 <SCK_PIN_INIT3+0x78>)
 80011ea:	f7ff fe19 	bl	8000e20 <GPIO_Pin_Init>
 80011ee:	e005      	b.n	80011fc <SCK_PIN_INIT3+0x6c>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	77da      	strb	r2, [r3, #31]
		return -1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e000      	b.n	80011fe <SCK_PIN_INIT3+0x6e>
	}
	return 1;
 80011fc:	2301      	movs	r3, #1
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	40020400 	.word	0x40020400

0800120c <WS_PIN_INIT3>:
static int8_t WS_PIN_INIT3(I2S_Config *config)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b087      	sub	sp, #28
 8001210:	af04      	add	r7, sp, #16
 8001212:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800121a:	461a      	mov	r2, r3
 800121c:	231d      	movs	r3, #29
 800121e:	429a      	cmp	r2, r3
 8001220:	d10e      	bne.n	8001240 <WS_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8001222:	2002      	movs	r0, #2
 8001224:	2400      	movs	r4, #0
 8001226:	2303      	movs	r3, #3
 8001228:	2200      	movs	r2, #0
 800122a:	2105      	movs	r1, #5
 800122c:	9102      	str	r1, [sp, #8]
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	4623      	mov	r3, r4
 8001234:	4602      	mov	r2, r0
 8001236:	2109      	movs	r1, #9
 8001238:	4812      	ldr	r0, [pc, #72]	@ (8001284 <WS_PIN_INIT3+0x78>)
 800123a:	f7ff fdf1 	bl	8000e20 <GPIO_Pin_Init>
 800123e:	e01b      	b.n	8001278 <WS_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001246:	461a      	mov	r2, r3
 8001248:	2317      	movs	r3, #23
 800124a:	429a      	cmp	r2, r3
 800124c:	d10e      	bne.n	800126c <WS_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800124e:	2002      	movs	r0, #2
 8001250:	2400      	movs	r4, #0
 8001252:	2303      	movs	r3, #3
 8001254:	2200      	movs	r2, #0
 8001256:	2105      	movs	r1, #5
 8001258:	9102      	str	r1, [sp, #8]
 800125a:	9201      	str	r2, [sp, #4]
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4623      	mov	r3, r4
 8001260:	4602      	mov	r2, r0
 8001262:	210c      	movs	r1, #12
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <WS_PIN_INIT3+0x78>)
 8001266:	f7ff fddb 	bl	8000e20 <GPIO_Pin_Init>
 800126a:	e005      	b.n	8001278 <WS_PIN_INIT3+0x6c>
	}
	else{
		config->Error.WS_Pin_Error = true;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	779a      	strb	r2, [r3, #30]
		return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e000      	b.n	800127a <WS_PIN_INIT3+0x6e>
	}
	return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	bf00      	nop
 8001284:	40020400 	.word	0x40020400

08001288 <SD_PIN_Init3>:
static int8_t SD_PIN_Init3(I2S_Config *config)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b087      	sub	sp, #28
 800128c:	af04      	add	r7, sp, #16
 800128e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001296:	461a      	mov	r2, r3
 8001298:	2316      	movs	r3, #22
 800129a:	429a      	cmp	r2, r3
 800129c:	d10e      	bne.n	80012bc <SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800129e:	2002      	movs	r0, #2
 80012a0:	2400      	movs	r4, #0
 80012a2:	2303      	movs	r3, #3
 80012a4:	2200      	movs	r2, #0
 80012a6:	2105      	movs	r1, #5
 80012a8:	9102      	str	r1, [sp, #8]
 80012aa:	9201      	str	r2, [sp, #4]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4623      	mov	r3, r4
 80012b0:	4602      	mov	r2, r0
 80012b2:	210f      	movs	r1, #15
 80012b4:	4812      	ldr	r0, [pc, #72]	@ (8001300 <SD_PIN_Init3+0x78>)
 80012b6:	f7ff fdb3 	bl	8000e20 <GPIO_Pin_Init>
 80012ba:	e01b      	b.n	80012f4 <SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80012c2:	461a      	mov	r2, r3
 80012c4:	2319      	movs	r3, #25
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d10e      	bne.n	80012e8 <SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80012ca:	2002      	movs	r0, #2
 80012cc:	2400      	movs	r4, #0
 80012ce:	2303      	movs	r3, #3
 80012d0:	2200      	movs	r2, #0
 80012d2:	2105      	movs	r1, #5
 80012d4:	9102      	str	r1, [sp, #8]
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4623      	mov	r3, r4
 80012dc:	4602      	mov	r2, r0
 80012de:	2103      	movs	r1, #3
 80012e0:	4808      	ldr	r0, [pc, #32]	@ (8001304 <SD_PIN_Init3+0x7c>)
 80012e2:	f7ff fd9d 	bl	8000e20 <GPIO_Pin_Init>
 80012e6:	e005      	b.n	80012f4 <SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.SD_Pin_Error = true;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	775a      	strb	r2, [r3, #29]
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e000      	b.n	80012f6 <SD_PIN_Init3+0x6e>
	}
	return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800

08001308 <MCK_PIN_Init3>:
static int8_t MCK_PIN_Init3(I2S_Config *config)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af04      	add	r7, sp, #16
 800130e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8001316:	461a      	mov	r2, r3
 8001318:	23ff      	movs	r3, #255	@ 0xff
 800131a:	429a      	cmp	r2, r3
 800131c:	d01c      	beq.n	8001358 <MCK_PIN_Init3+0x50>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8001324:	461a      	mov	r2, r3
 8001326:	2325      	movs	r3, #37	@ 0x25
 8001328:	429a      	cmp	r2, r3
 800132a:	d10e      	bne.n	800134a <MCK_PIN_Init3+0x42>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 800132c:	2002      	movs	r0, #2
 800132e:	2400      	movs	r4, #0
 8001330:	2303      	movs	r3, #3
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	9102      	str	r1, [sp, #8]
 8001338:	9201      	str	r2, [sp, #4]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4623      	mov	r3, r4
 800133e:	4602      	mov	r2, r0
 8001340:	2107      	movs	r1, #7
 8001342:	4808      	ldr	r0, [pc, #32]	@ (8001364 <MCK_PIN_Init3+0x5c>)
 8001344:	f7ff fd6c 	bl	8000e20 <GPIO_Pin_Init>
 8001348:	e006      	b.n	8001358 <MCK_PIN_Init3+0x50>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e000      	b.n	800135a <MCK_PIN_Init3+0x52>
		}
	}
	return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	bf00      	nop
 8001364:	40020800 	.word	0x40020800

08001368 <EXT_SD_PIN_Init3>:
static int8_t EXT_SD_PIN_Init3(I2S_Config *config)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b087      	sub	sp, #28
 800136c:	af04      	add	r7, sp, #16
 800136e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8001376:	461a      	mov	r2, r3
 8001378:	231d      	movs	r3, #29
 800137a:	429a      	cmp	r2, r3
 800137c:	d10e      	bne.n	800139c <EXT_SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800137e:	2002      	movs	r0, #2
 8001380:	2400      	movs	r4, #0
 8001382:	2303      	movs	r3, #3
 8001384:	2200      	movs	r2, #0
 8001386:	2105      	movs	r1, #5
 8001388:	9102      	str	r1, [sp, #8]
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4623      	mov	r3, r4
 8001390:	4602      	mov	r2, r0
 8001392:	210e      	movs	r1, #14
 8001394:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <EXT_SD_PIN_Init3+0x78>)
 8001396:	f7ff fd43 	bl	8000e20 <GPIO_Pin_Init>
 800139a:	e01b      	b.n	80013d4 <EXT_SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f993 3013 	ldrsb.w	r3, [r3, #19]
 80013a2:	461a      	mov	r2, r3
 80013a4:	231b      	movs	r3, #27
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d10e      	bne.n	80013c8 <EXT_SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80013aa:	2002      	movs	r0, #2
 80013ac:	2400      	movs	r4, #0
 80013ae:	2303      	movs	r3, #3
 80013b0:	2200      	movs	r2, #0
 80013b2:	2105      	movs	r1, #5
 80013b4:	9102      	str	r1, [sp, #8]
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	4623      	mov	r3, r4
 80013bc:	4602      	mov	r2, r0
 80013be:	2102      	movs	r1, #2
 80013c0:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <EXT_SD_PIN_Init3+0x7c>)
 80013c2:	f7ff fd2d 	bl	8000e20 <GPIO_Pin_Init>
 80013c6:	e005      	b.n	80013d4 <EXT_SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	771a      	strb	r2, [r3, #28]
		return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e000      	b.n	80013d6 <EXT_SD_PIN_Init3+0x6e>
	}
	return 1;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800

080013e8 <I2S_DeInit>:


/********************************************************************************************************/
void I2S_DeInit(I2S_Config *config)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(config->Port != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <I2S_DeInit+0x1c>
	{
		RCC->APB1ENR &= ~(RCC_APB1ENR_SPI2EN | RCC_APB1ENR_SPI3EN);
 80013f8:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <I2S_DeInit+0xc4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	4a2b      	ldr	r2, [pc, #172]	@ (80014ac <I2S_DeInit+0xc4>)
 80013fe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001402:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	config->Port->I2SCFGR &= ~0xFFFF;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	0c1b      	lsrs	r3, r3, #16
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	61d3      	str	r3, [r2, #28]
	config->Port->I2SPR &= ~0xFFFF;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	0c1b      	lsrs	r3, r3, #16
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	6213      	str	r3, [r2, #32]
	config->Audio_Frequency = -1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	22ff      	movs	r2, #255	@ 0xff
 8001428:	731a      	strb	r2, [r3, #12]
	config->Channel_Length = -1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	22ff      	movs	r2, #255	@ 0xff
 800142e:	72da      	strb	r2, [r3, #11]
	config->Data_Length = -1;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	22ff      	movs	r2, #255	@ 0xff
 8001434:	729a      	strb	r2, [r3, #10]
	config->LR_Pin_Number = -1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	22ff      	movs	r2, #255	@ 0xff
 800143a:	721a      	strb	r2, [r3, #8]

	config->Standard = -1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	22ff      	movs	r2, #255	@ 0xff
 8001440:	725a      	strb	r2, [r3, #9]
	config->Full_Duplex.EXT_SD = -1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	22ff      	movs	r2, #255	@ 0xff
 8001446:	74da      	strb	r2, [r3, #19]
	config->Full_Duplex.MCK_Pin = -1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	22ff      	movs	r2, #255	@ 0xff
 800144c:	73da      	strb	r2, [r3, #15]
	config->Full_Duplex.SCK_Pin = -1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	22ff      	movs	r2, #255	@ 0xff
 8001452:	741a      	strb	r2, [r3, #16]
	config->Full_Duplex.SD_Pin = -1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	22ff      	movs	r2, #255	@ 0xff
 8001458:	745a      	strb	r2, [r3, #17]
	config->Full_Duplex.WS_Pin = -1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	22ff      	movs	r2, #255	@ 0xff
 800145e:	749a      	strb	r2, [r3, #18]
	config->Full_Duplex.mode = -1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	739a      	strb	r2, [r3, #14]
	config->Full_Duplex.Enable = 0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	735a      	strb	r2, [r3, #13]
	config->Half_Duplex.MCK_Pin = -1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	22ff      	movs	r2, #255	@ 0xff
 8001470:	759a      	strb	r2, [r3, #22]
	config->Half_Duplex.SCK_Pin = -1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	22ff      	movs	r2, #255	@ 0xff
 8001476:	75da      	strb	r2, [r3, #23]
	config->Half_Duplex.SD_Pin = -1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	22ff      	movs	r2, #255	@ 0xff
 800147c:	761a      	strb	r2, [r3, #24]
	config->Half_Duplex.WS_Pin = -1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	22ff      	movs	r2, #255	@ 0xff
 8001482:	765a      	strb	r2, [r3, #25]
	config->Half_Duplex.mode = -1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	22ff      	movs	r2, #255	@ 0xff
 8001488:	755a      	strb	r2, [r3, #21]
	config->Half_Duplex.Enable = 0;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	751a      	strb	r2, [r3, #20]
	config->LR_Pin_Port = NULL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
	I2S_Start(config);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fb5e 	bl	8001b58 <I2S_Start>
	config->Port = NULL;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <I2S_Init>:

/********************************************************************************************************/
int8_t I2S_Init(I2S_Config *config)
{
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	b08b      	sub	sp, #44	@ 0x2c
 80014b4:	af04      	add	r7, sp, #16
 80014b6:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a9b      	ldr	r2, [pc, #620]	@ (800172c <I2S_Init+0x27c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d122      	bne.n	8001508 <I2S_Init+0x58>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80014c2:	4b9b      	ldr	r3, [pc, #620]	@ (8001730 <I2S_Init+0x280>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a9a      	ldr	r2, [pc, #616]	@ (8001730 <I2S_Init+0x280>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7d1b      	ldrb	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <I2S_Init+0x2e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00c      	beq.n	80014f8 <I2S_Init+0x48>
		{
			SD_PIN_Init2(config);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fd8a 	bl	8000ff8 <SD_PIN_Init2>
			WS_PIN_INIT2(config);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fd3b 	bl	8000f60 <WS_PIN_INIT2>
			SCK_PIN_INIT2(config);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fcec 	bl	8000ec8 <SCK_PIN_INIT2>
			MCK_PIN_Init2(config);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fdcf 	bl	8001094 <MCK_PIN_Init2>
 80014f6:	e032      	b.n	800155e <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b5b      	ldrb	r3, [r3, #13]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d02e      	beq.n	800155e <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init2(config);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fe05 	bl	8001110 <EXT_SD_PIN_Init2>
 8001506:	e02a      	b.n	800155e <I2S_Init+0xae>
		}
	}
	else if(config->Port == I2S_Port.I2S3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a89      	ldr	r2, [pc, #548]	@ (8001734 <I2S_Init+0x284>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d122      	bne.n	8001558 <I2S_Init+0xa8>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001512:	4b87      	ldr	r3, [pc, #540]	@ (8001730 <I2S_Init+0x280>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	4a86      	ldr	r2, [pc, #536]	@ (8001730 <I2S_Init+0x280>)
 8001518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151c:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7d1b      	ldrb	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <I2S_Init+0x7e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7b5b      	ldrb	r3, [r3, #13]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <I2S_Init+0x98>
		{
			SD_PIN_Init3(config);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff feaa 	bl	8001288 <SD_PIN_Init3>
			WS_PIN_INIT3(config);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fe69 	bl	800120c <WS_PIN_INIT3>
			SCK_PIN_INIT3(config);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fe28 	bl	8001190 <SCK_PIN_INIT3>
			MCK_PIN_Init3(config);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fee1 	bl	8001308 <MCK_PIN_Init3>
 8001546:	e00a      	b.n	800155e <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7b5b      	ldrb	r3, [r3, #13]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init3(config);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff09 	bl	8001368 <EXT_SD_PIN_Init3>
 8001556:	e002      	b.n	800155e <I2S_Init+0xae>
		}
	}
	else
	{

		config->Error.Port_Error = true;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	769a      	strb	r2, [r3, #26]
	}

	GPIO_Pin_Init(config->LR_Pin_Port, config->LR_Pin_Number, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6858      	ldr	r0, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001568:	b2d9      	uxtb	r1, r3
 800156a:	2501      	movs	r5, #1
 800156c:	2600      	movs	r6, #0
 800156e:	2303      	movs	r3, #3
 8001570:	2200      	movs	r2, #0
 8001572:	2400      	movs	r4, #0
 8001574:	9402      	str	r4, [sp, #8]
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4633      	mov	r3, r6
 800157c:	462a      	mov	r2, r5
 800157e:	f7ff fc4f 	bl	8000e20 <GPIO_Pin_Init>


	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001590:	61da      	str	r2, [r3, #28]
	config->Port->I2SCFGR |= SPI_I2SCFGR_I2SMOD;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015a0:	61da      	str	r2, [r3, #28]

	I2S_Stop(config);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 faea 	bl	8001b7c <I2S_Stop>


	// I2S Mode
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	69da      	ldr	r2, [r3, #28]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80015b6:	61da      	str	r2, [r3, #28]

	if((config->Full_Duplex.mode == I2S_Mode.Master.Transmit) || (config->Half_Duplex.mode == I2S_Mode.Master.Transmit)){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80015be:	461a      	mov	r2, r3
 80015c0:	2301      	movs	r3, #1
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d006      	beq.n	80015d4 <I2S_Init+0x124>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80015cc:	461a      	mov	r2, r3
 80015ce:	2301      	movs	r3, #1
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d108      	bne.n	80015e6 <I2S_Init+0x136>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015e2:	61da      	str	r2, [r3, #28]
 80015e4:	e043      	b.n	800166e <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Master.Receive) || (config->Half_Duplex.mode == I2S_Mode.Master.Receive)){
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80015ec:	461a      	mov	r2, r3
 80015ee:	2302      	movs	r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d006      	beq.n	8001602 <I2S_Init+0x152>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80015fa:	461a      	mov	r2, r3
 80015fc:	2302      	movs	r3, #2
 80015fe:	429a      	cmp	r2, r3
 8001600:	d108      	bne.n	8001614 <I2S_Init+0x164>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69da      	ldr	r2, [r3, #28]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001610:	61da      	str	r2, [r3, #28]
 8001612:	e02c      	b.n	800166e <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Slave.Transmit) || (config->Half_Duplex.mode == I2S_Mode.Slave.Transmit)){
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800161a:	461a      	mov	r2, r3
 800161c:	2303      	movs	r3, #3
 800161e:	429a      	cmp	r2, r3
 8001620:	d006      	beq.n	8001630 <I2S_Init+0x180>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001628:	461a      	mov	r2, r3
 800162a:	2303      	movs	r3, #3
 800162c:	429a      	cmp	r2, r3
 800162e:	d108      	bne.n	8001642 <I2S_Init+0x192>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800163e:	61da      	str	r2, [r3, #28]
 8001640:	e015      	b.n	800166e <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Slave.Receive) || (config->Half_Duplex.mode == I2S_Mode.Slave.Receive)){
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001648:	461a      	mov	r2, r3
 800164a:	2304      	movs	r3, #4
 800164c:	429a      	cmp	r2, r3
 800164e:	d006      	beq.n	800165e <I2S_Init+0x1ae>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001656:	461a      	mov	r2, r3
 8001658:	2304      	movs	r3, #4
 800165a:	429a      	cmp	r2, r3
 800165c:	d107      	bne.n	800166e <I2S_Init+0x1be>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69da      	ldr	r2, [r3, #28]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800166c:	61da      	str	r2, [r3, #28]
	}

	// Standard
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SSTD;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800167c:	61da      	str	r2, [r3, #28]
	if(config->Standard == I2S_Standard.Standard_Philips){
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001684:	2201      	movs	r2, #1
 8001686:	4293      	cmp	r3, r2
 8001688:	d108      	bne.n	800169c <I2S_Init+0x1ec>
		config->Port->I2SCFGR &= ~(SPI_I2SCFGR_I2SSTD);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8001698:	61da      	str	r2, [r3, #28]
 800169a:	e030      	b.n	80016fe <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016a2:	2202      	movs	r2, #2
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d108      	bne.n	80016ba <I2S_Init+0x20a>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0210 	orr.w	r2, r2, #16
 80016b6:	61da      	str	r2, [r3, #28]
 80016b8:	e021      	b.n	80016fe <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016c0:	2203      	movs	r2, #3
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d108      	bne.n	80016d8 <I2S_Init+0x228>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0220 	orr.w	r2, r2, #32
 80016d4:	61da      	str	r2, [r3, #28]
 80016d6:	e012      	b.n	80016fe <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.PCM){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016de:	2204      	movs	r2, #4
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d108      	bne.n	80016f6 <I2S_Init+0x246>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80016f2:	61da      	str	r2, [r3, #28]
 80016f4:	e003      	b.n	80016fe <I2S_Init+0x24e>
	}else{
		config->Error.Standard_Error  = true;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}




	config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	61da      	str	r2, [r3, #28]
	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001714:	2201      	movs	r2, #1
 8001716:	4293      	cmp	r3, r2
 8001718:	d10e      	bne.n	8001738 <I2S_Init+0x288>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	61da      	str	r2, [r3, #28]
 800172a:	e018      	b.n	800175e <I2S_Init+0x2ae>
 800172c:	40003800 	.word	0x40003800
 8001730:	40023800 	.word	0x40023800
 8001734:	40003c00 	.word	0x40003c00
	}else if(config->Channel_Length == I2S_Channel_Length._32_bit){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800173e:	2203      	movs	r2, #3
 8001740:	4293      	cmp	r3, r2
 8001742:	d108      	bne.n	8001756 <I2S_Init+0x2a6>
		config->Port->I2SCFGR |=  SPI_I2SCFGR_CHLEN;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	61da      	str	r2, [r3, #28]
 8001754:	e003      	b.n	800175e <I2S_Init+0x2ae>
	}else{
		config->Error.Channel_Length_Error = true;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}

	// Data Length
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69da      	ldr	r2, [r3, #28]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0206 	bic.w	r2, r2, #6
 800176c:	61da      	str	r2, [r3, #28]
	if(config->Data_Length == I2S_Data_Length._16_bit){
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001774:	2201      	movs	r2, #1
 8001776:	4293      	cmp	r3, r2
 8001778:	d108      	bne.n	800178c <I2S_Init+0x2dc>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0206 	bic.w	r2, r2, #6
 8001788:	61da      	str	r2, [r3, #28]
 800178a:	e021      	b.n	80017d0 <I2S_Init+0x320>
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001792:	2202      	movs	r2, #2
 8001794:	4293      	cmp	r3, r2
 8001796:	d108      	bne.n	80017aa <I2S_Init+0x2fa>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0202 	orr.w	r2, r2, #2
 80017a6:	61da      	str	r2, [r3, #28]
 80017a8:	e012      	b.n	80017d0 <I2S_Init+0x320>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d108      	bne.n	80017c8 <I2S_Init+0x318>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	61da      	str	r2, [r3, #28]
 80017c6:	e003      	b.n	80017d0 <I2S_Init+0x320>
	}else{
		config->Error.Data_Len_Error = true;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	int plli2s_n = 128;
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	617b      	str	r3, [r7, #20]
	int plli2s_r = 5;
 80017d4:	2305      	movs	r3, #5
 80017d6:	613b      	str	r3, [r7, #16]
	if(config->Audio_Frequency == I2S_Audio_Frequency._8000Hz)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80017de:	461a      	mov	r2, r3
 80017e0:	2301      	movs	r3, #1
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d121      	bne.n	800182a <I2S_Init+0x37a>
	{
		//
		  plli2s_n = 64;
 80017e6:	2340      	movs	r3, #64	@ 0x40
 80017e8:	617b      	str	r3, [r7, #20]
		  plli2s_r = 5;
 80017ea:	2305      	movs	r3, #5
 80017ec:	613b      	str	r3, [r7, #16]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	019a      	lsls	r2, r3, #6
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	071b      	lsls	r3, r3, #28
 80017f6:	431a      	orrs	r2, r3
 80017f8:	4b95      	ldr	r3, [pc, #596]	@ (8001a50 <I2S_Init+0x5a0>)
 80017fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80017fe:	4b94      	ldr	r3, [pc, #592]	@ (8001a50 <I2S_Init+0x5a0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a93      	ldr	r2, [pc, #588]	@ (8001a50 <I2S_Init+0x5a0>)
 8001804:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001808:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 800180a:	bf00      	nop
 800180c:	4b90      	ldr	r3, [pc, #576]	@ (8001a50 <I2S_Init+0x5a0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f9      	beq.n	800180c <I2S_Init+0x35c>
		config->Port->I2SPR |= 50;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6a1a      	ldr	r2, [r3, #32]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	e182      	b.n	8001b30 <I2S_Init+0x680>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._16000Hz)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001830:	461a      	mov	r2, r3
 8001832:	2302      	movs	r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d121      	bne.n	800187c <I2S_Init+0x3cc>
	{
		//
		  plli2s_n = 128;
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	617b      	str	r3, [r7, #20]
		  plli2s_r = 5;
 800183c:	2305      	movs	r3, #5
 800183e:	613b      	str	r3, [r7, #16]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	019a      	lsls	r2, r3, #6
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	071b      	lsls	r3, r3, #28
 8001848:	431a      	orrs	r2, r3
 800184a:	4b81      	ldr	r3, [pc, #516]	@ (8001a50 <I2S_Init+0x5a0>)
 800184c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001850:	4b7f      	ldr	r3, [pc, #508]	@ (8001a50 <I2S_Init+0x5a0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a7e      	ldr	r2, [pc, #504]	@ (8001a50 <I2S_Init+0x5a0>)
 8001856:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800185a:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 800185c:	bf00      	nop
 800185e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a50 <I2S_Init+0x5a0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f9      	beq.n	800185e <I2S_Init+0x3ae>
		config->Port->I2SPR |= 50;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8001878:	621a      	str	r2, [r3, #32]
 800187a:	e159      	b.n	8001b30 <I2S_Init+0x680>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._22050Hz)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001882:	461a      	mov	r2, r3
 8001884:	2303      	movs	r3, #3
 8001886:	429a      	cmp	r2, r3
 8001888:	d121      	bne.n	80018ce <I2S_Init+0x41e>
	{
		//
		 plli2s_n = 141;
 800188a:	238d      	movs	r3, #141	@ 0x8d
 800188c:	617b      	str	r3, [r7, #20]
		 plli2s_r = 5;
 800188e:	2305      	movs	r3, #5
 8001890:	613b      	str	r3, [r7, #16]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	019a      	lsls	r2, r3, #6
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	071b      	lsls	r3, r3, #28
 800189a:	431a      	orrs	r2, r3
 800189c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a50 <I2S_Init+0x5a0>)
 800189e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80018a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a50 <I2S_Init+0x5a0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6a      	ldr	r2, [pc, #424]	@ (8001a50 <I2S_Init+0x5a0>)
 80018a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018ac:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80018ae:	bf00      	nop
 80018b0:	4b67      	ldr	r3, [pc, #412]	@ (8001a50 <I2S_Init+0x5a0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f9      	beq.n	80018b0 <I2S_Init+0x400>
		config->Port->I2SPR |= 40 | SPI_I2SPR_ODD;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 7294 	orr.w	r2, r2, #296	@ 0x128
 80018ca:	621a      	str	r2, [r3, #32]
 80018cc:	e130      	b.n	8001b30 <I2S_Init+0x680>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._32000Hz)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80018d4:	461a      	mov	r2, r3
 80018d6:	2304      	movs	r3, #4
 80018d8:	429a      	cmp	r2, r3
 80018da:	d121      	bne.n	8001920 <I2S_Init+0x470>
	{
		//
		  plli2s_n = 64;
 80018dc:	2340      	movs	r3, #64	@ 0x40
 80018de:	617b      	str	r3, [r7, #20]
		  plli2s_r = 5;
 80018e0:	2305      	movs	r3, #5
 80018e2:	613b      	str	r3, [r7, #16]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	019a      	lsls	r2, r3, #6
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	071b      	lsls	r3, r3, #28
 80018ec:	431a      	orrs	r2, r3
 80018ee:	4b58      	ldr	r3, [pc, #352]	@ (8001a50 <I2S_Init+0x5a0>)
 80018f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80018f4:	4b56      	ldr	r3, [pc, #344]	@ (8001a50 <I2S_Init+0x5a0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a55      	ldr	r2, [pc, #340]	@ (8001a50 <I2S_Init+0x5a0>)
 80018fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018fe:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001900:	bf00      	nop
 8001902:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <I2S_Init+0x5a0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f9      	beq.n	8001902 <I2S_Init+0x452>
		config->Port->I2SPR |= 12;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 020c 	orr.w	r2, r2, #12
 800191c:	621a      	str	r2, [r3, #32]
 800191e:	e107      	b.n	8001b30 <I2S_Init+0x680>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._44100Hz)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001926:	461a      	mov	r2, r3
 8001928:	2305      	movs	r3, #5
 800192a:	429a      	cmp	r2, r3
 800192c:	d121      	bne.n	8001972 <I2S_Init+0x4c2>
	{
		//
		  plli2s_n = 50;
 800192e:	2332      	movs	r3, #50	@ 0x32
 8001930:	617b      	str	r3, [r7, #20]
		  plli2s_r = 6;
 8001932:	2306      	movs	r3, #6
 8001934:	613b      	str	r3, [r7, #16]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	019a      	lsls	r2, r3, #6
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	071b      	lsls	r3, r3, #28
 800193e:	431a      	orrs	r2, r3
 8001940:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <I2S_Init+0x5a0>)
 8001942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001946:	4b42      	ldr	r3, [pc, #264]	@ (8001a50 <I2S_Init+0x5a0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a41      	ldr	r2, [pc, #260]	@ (8001a50 <I2S_Init+0x5a0>)
 800194c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001950:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001952:	bf00      	nop
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <I2S_Init+0x5a0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f9      	beq.n	8001954 <I2S_Init+0x4a4>
		config->Port->I2SPR |= 10 | SPI_I2SPR_ODD;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a1a      	ldr	r2, [r3, #32]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 7285 	orr.w	r2, r2, #266	@ 0x10a
 800196e:	621a      	str	r2, [r3, #32]
 8001970:	e0de      	b.n	8001b30 <I2S_Init+0x680>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._48000Hz)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001978:	461a      	mov	r2, r3
 800197a:	2306      	movs	r3, #6
 800197c:	429a      	cmp	r2, r3
 800197e:	d137      	bne.n	80019f0 <I2S_Init+0x540>
	{
		//

		if(config->Channel_Length == I2S_Channel_Length._16_bit)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001986:	2201      	movs	r2, #1
 8001988:	4293      	cmp	r3, r2
 800198a:	d11d      	bne.n	80019c8 <I2S_Init+0x518>
		{
			plli2s_n = 80;
 800198c:	2350      	movs	r3, #80	@ 0x50
 800198e:	617b      	str	r3, [r7, #20]
			plli2s_r = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	613b      	str	r3, [r7, #16]
			RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	019a      	lsls	r2, r3, #6
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	071b      	lsls	r3, r3, #28
 800199c:	431a      	orrs	r2, r3
 800199e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <I2S_Init+0x5a0>)
 80019a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			RCC -> CR |= RCC_CR_PLLI2SON;
 80019a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <I2S_Init+0x5a0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a29      	ldr	r2, [pc, #164]	@ (8001a50 <I2S_Init+0x5a0>)
 80019aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019ae:	6013      	str	r3, [r2, #0]
			while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80019b0:	bf00      	nop
 80019b2:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <I2S_Init+0x5a0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f9      	beq.n	80019b2 <I2S_Init+0x502>
			config->Port->I2SPR = (13);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	220d      	movs	r2, #13
 80019c4:	621a      	str	r2, [r3, #32]
 80019c6:	e0b3      	b.n	8001b30 <I2S_Init+0x680>
//			config->Port->I2SPR |= SPI_I2SPR_ODD;
		}
		else if(config->Channel_Length == I2S_Channel_Length._32_bit)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80019ce:	2203      	movs	r2, #3
 80019d0:	4293      	cmp	r3, r2
 80019d2:	f040 80ad 	bne.w	8001b30 <I2S_Init+0x680>
		{

			config->Port->I2SPR = (12);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	220c      	movs	r2, #12
 80019dc:	621a      	str	r2, [r3, #32]
			config->Port->I2SPR |= SPI_I2SPR_ODD;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a1a      	ldr	r2, [r3, #32]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ec:	621a      	str	r2, [r3, #32]
 80019ee:	e09f      	b.n	8001b30 <I2S_Init+0x680>
		}
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._64000Hz)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80019f6:	461a      	mov	r2, r3
 80019f8:	2307      	movs	r3, #7
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d15d      	bne.n	8001aba <I2S_Init+0x60a>
	{
		if(config->Channel_Length == I2S_Channel_Length._16_bit)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d124      	bne.n	8001a54 <I2S_Init+0x5a4>
		{
			plli2s_n = 128;
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	617b      	str	r3, [r7, #20]
			plli2s_r = 5;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	613b      	str	r3, [r7, #16]
			RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	019a      	lsls	r2, r3, #6
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	071b      	lsls	r3, r3, #28
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <I2S_Init+0x5a0>)
 8001a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			RCC -> CR |= RCC_CR_PLLI2SON;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <I2S_Init+0x5a0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <I2S_Init+0x5a0>)
 8001a28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a2c:	6013      	str	r3, [r2, #0]
			while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001a2e:	bf00      	nop
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <I2S_Init+0x5a0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f9      	beq.n	8001a30 <I2S_Init+0x580>
			config->Port->I2SPR |= 12;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 020c 	orr.w	r2, r2, #12
 8001a4a:	621a      	str	r2, [r3, #32]
 8001a4c:	e070      	b.n	8001b30 <I2S_Init+0x680>
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
		}
		else if(config->Channel_Length == I2S_Channel_Length._32_bit)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d167      	bne.n	8001b30 <I2S_Init+0x680>
		{
			uint32_t RCC_PLLI2SCFGR = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
			plli2s_n = 128;
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	617b      	str	r3, [r7, #20]
			plli2s_r = 5;
 8001a68:	2305      	movs	r3, #5
 8001a6a:	613b      	str	r3, [r7, #16]
			RCC_PLLI2SCFGR = plli2s_n << 6;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	019b      	lsls	r3, r3, #6
 8001a70:	60fb      	str	r3, [r7, #12]
			RCC_PLLI2SCFGR |= plli2s_r << 28;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	071b      	lsls	r3, r3, #28
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
			RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	019a      	lsls	r2, r3, #6
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	071b      	lsls	r3, r3, #28
 8001a86:	431a      	orrs	r2, r3
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <I2S_Init+0x690>)
 8001a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			RCC -> CR |= RCC_CR_PLLI2SON;
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <I2S_Init+0x690>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a2b      	ldr	r2, [pc, #172]	@ (8001b40 <I2S_Init+0x690>)
 8001a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a98:	6013      	str	r3, [r2, #0]
			while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001a9a:	bf00      	nop
 8001a9c:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <I2S_Init+0x690>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f9      	beq.n	8001a9c <I2S_Init+0x5ec>
			config->Port->I2SPR |= 12;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 020c 	orr.w	r2, r2, #12
 8001ab6:	621a      	str	r2, [r3, #32]
 8001ab8:	e03a      	b.n	8001b30 <I2S_Init+0x680>
		}

		//

		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._96000Hz)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d121      	bne.n	8001b0c <I2S_Init+0x65c>
	{
		//

		  plli2s_n = 192;
 8001ac8:	23c0      	movs	r3, #192	@ 0xc0
 8001aca:	617b      	str	r3, [r7, #20]
		  plli2s_r = 5;
 8001acc:	2305      	movs	r3, #5
 8001ace:	613b      	str	r3, [r7, #16]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	019a      	lsls	r2, r3, #6
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	071b      	lsls	r3, r3, #28
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <I2S_Init+0x690>)
 8001adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <I2S_Init+0x690>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a16      	ldr	r2, [pc, #88]	@ (8001b40 <I2S_Init+0x690>)
 8001ae6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aea:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001aec:	bf00      	nop
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <I2S_Init+0x690>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f9      	beq.n	8001aee <I2S_Init+0x63e>
		config->Port->I2SPR |= 12 ;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 020c 	orr.w	r2, r2, #12
 8001b08:	621a      	str	r2, [r3, #32]
 8001b0a:	e011      	b.n	8001b30 <I2S_Init+0x680>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._192000Hz)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001b12:	461a      	mov	r2, r3
 8001b14:	2309      	movs	r3, #9
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d00a      	beq.n	8001b30 <I2S_Init+0x680>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._384000Hz)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	230a      	movs	r3, #10
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d003      	beq.n	8001b30 <I2S_Init+0x680>
	{
		//
	}else
	{
		config->Error.Audio_Frequency_Error = true;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	//  I2S Enable


	I2S_Start(config);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f811 	bl	8001b58 <I2S_Start>

//	I2S_Mode_Set(config);

	return 1;
 8001b36:	2301      	movs	r3, #1

}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b40:	40023800 	.word	0x40023800

08001b44 <I2S_Print_Errors>:
/********************************************************************************************************/
/********************************************************************************************************/
void I2S_Print_Errors(I2S_Config *config)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	if(config->Error.SCK_Pin_Error) printConsole("SCK_Pin_Error \r\n");
	if(config->Error.SD_Pin_Error) printConsole("SD_Pin_Error \r\n");
	if(config->Error.Standard_Error) printConsole("Standard_Error \r\n");
	if(config->Error.WS_Pin_Error) printConsole("WS_Pin_Error \r\n");
#endif
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <I2S_Start>:
/********************************************************************************************************/
void I2S_Start(I2S_Config *config)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b6e:	61da      	str	r2, [r3, #28]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <I2S_Stop>:
/********************************************************************************************************/
void I2S_Stop(I2S_Config *config)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR &= ~SPI_I2SCFGR_I2SE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b92:	61da      	str	r2, [r3, #28]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <I2S_Read_Data>:
	return retval;
}


int16_t I2S_Read_Data(I2S_Config *config)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if(config->Data_Length == I2S_Data_Length._16_bit)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d10c      	bne.n	8001bce <I2S_Read_Data+0x2e>
	{
		while((config -> Port -> SR & SPI_SR_CHSIDE) != SPI_SR_CHSIDE){}
 8001bb4:	bf00      	nop
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d1f8      	bne.n	8001bb6 <I2S_Read_Data+0x16>
		return(int16_t)(config -> Port -> DR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	e7ff      	b.n	8001bce <I2S_Read_Data+0x2e>
////		while((config -> Port -> SR & SPI_SR_CHSIDE) == SPI_SR_CHSIDE){}
////		retval[1] =   config -> Port -> DR;
////		*data =  ((retval[0] << 16) | retval[1]);
//		*data = retval[0] << 16 | retval[1];
//	}
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <I2S_Select_Left_Channel>:

void I2S_Select_Left_Channel(I2S_Config *config)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->LR_Pin_Port, config->LR_Pin_Number);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7ff f8a2 	bl	8000d38 <GPIO_Pin_Low>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	@ (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	@ (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ffc2 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	uint8_t pll_m = 8;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8001c9e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ca2:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8001ca8:	2307      	movs	r3, #7
 8001caa:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8001cac:	4b3c      	ldr	r3, [pc, #240]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001cbe:	bf00      	nop
 8001cc0:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f9      	beq.n	8001cc0 <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001ccc:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	4a33      	ldr	r2, [pc, #204]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <MCU_Clock_Setup+0x110>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <MCU_Clock_Setup+0x110>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce2:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001ce4:	4b30      	ldr	r3, [pc, #192]	@ (8001da8 <MCU_Clock_Setup+0x114>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8001da8 <MCU_Clock_Setup+0x114>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cee:	f043 0305 	orr.w	r3, r3, #5
 8001cf2:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	78ba      	ldrb	r2, [r7, #2]
 8001cfa:	0611      	lsls	r1, r2, #24
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	0412      	lsls	r2, r2, #16
 8001d00:	4311      	orrs	r1, r2
 8001d02:	88ba      	ldrh	r2, [r7, #4]
 8001d04:	0192      	lsls	r2, r2, #6
 8001d06:	4311      	orrs	r1, r2
 8001d08:	79fa      	ldrb	r2, [r7, #7]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4a24      	ldr	r2, [pc, #144]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001d14:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a21      	ldr	r2, [pc, #132]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d1e:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d22:	4a1f      	ldr	r2, [pc, #124]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d2e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001d32:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a19      	ldr	r2, [pc, #100]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3e:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001d4c:	bf00      	nop
 8001d4e:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f9      	beq.n	8001d4e <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4a10      	ldr	r2, [pc, #64]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001d66:	bf00      	nop
 8001d68:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d1f9      	bne.n	8001d68 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 8001d74:	f000 f942 	bl	8001ffc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <MCU_Clock_Setup+0x118>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001db0 <MCU_Clock_Setup+0x11c>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff62 	bl	8001c50 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	4a03      	ldr	r2, [pc, #12]	@ (8001da0 <MCU_Clock_Setup+0x10c>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d96:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000
 8001da8:	40023c00 	.word	0x40023c00
 8001dac:	20000000 	.word	0x20000000
 8001db0:	18618619 	.word	0x18618619

08001db4 <I2S_Clock_Init>:


__STATIC_INLINE int I2S_Clock_Init()
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
//	int plli2s_r = 2; //2 5 2
//	RCC -> PLLI2SCFGR = (plli2s_m << 0) | (plli2s_n << 6) | (plli2s_r << 28);
//	RCC -> CR |= RCC_CR_PLLI2SON;
//	while(!(RCC -> CR & RCC_CR_PLLI2SRDY));

	uint32_t RCC_PLLI2SCFGR = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
	uint32_t plli2s_n = 384;
 8001dbe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001dc2:	60bb      	str	r3, [r7, #8]
	uint32_t plli2s_r = 5;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	607b      	str	r3, [r7, #4]
	RCC_PLLI2SCFGR = plli2s_n << 6;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	019b      	lsls	r3, r3, #6
 8001dcc:	60fb      	str	r3, [r7, #12]
	RCC_PLLI2SCFGR |= plli2s_r << 28;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	071b      	lsls	r3, r3, #28
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
	RCC -> PLLI2SCFGR = RCC_PLLI2SCFGR;
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <I2S_Clock_Init+0x54>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
	RCC -> CR |= RCC_CR_PLLI2SON;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <I2S_Clock_Init+0x54>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <I2S_Clock_Init+0x54>)
 8001de6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001dea:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001dec:	bf00      	nop
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <I2S_Clock_Init+0x54>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f9      	beq.n	8001dee <I2S_Clock_Init+0x3a>
	return (0UL);
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40023800 	.word	0x40023800

08001e0c <Delay_Config>:



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <Delay_Config+0x2c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <Delay_Config+0x2c>)
 8001e18:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001e1c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <Delay_Config+0x2c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <Delay_Config+0x2c>)
 8001e26:	2205      	movs	r2, #5
 8001e28:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8001e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e4a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001e90 <Delay_ms+0x54>
 8001e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e56:	ee17 3a90 	vmov	r3, s15
 8001e5a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <Delay_ms+0x58>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <Delay_ms+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <Delay_ms+0x58>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a09      	ldr	r2, [pc, #36]	@ (8001e94 <Delay_ms+0x58>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8001e74:	bf00      	nop
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <Delay_ms+0x58>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f9      	beq.n	8001e76 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	48241000 	.word	0x48241000
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8001e9e:	f7ff fef9 	bl	8001c94 <MCU_Clock_Setup>
	I2S_Clock_Init();
 8001ea2:	f7ff ff87 	bl	8001db4 <I2S_Clock_Init>
	Delay_Config();
 8001ea6:	f7ff ffb1 	bl	8001e0c <Delay_Config>
	Console_Init(USART1, 115200);
 8001eaa:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001eae:	4829      	ldr	r0, [pc, #164]	@ (8001f54 <main+0xbc>)
 8001eb0:	f7fe feba 	bl	8000c28 <Console_Init>


	I2S_DeInit(&INMP441_I2S);
 8001eb4:	4828      	ldr	r0, [pc, #160]	@ (8001f58 <main+0xc0>)
 8001eb6:	f7ff fa97 	bl	80013e8 <I2S_DeInit>


	INMP441_I2S.Port = I2S_Port.I2S2;
 8001eba:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <main+0xc4>)
 8001ebc:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <main+0xc0>)
 8001ebe:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 8001ec0:	2306      	movs	r3, #6
 8001ec2:	b25a      	sxtb	r2, r3
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <main+0xc0>)
 8001ec6:	731a      	strb	r2, [r3, #12]
	INMP441_I2S.Channel_Length = I2S_Channel_Length._32_bit;
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <main+0xc0>)
 8001ecc:	72da      	strb	r2, [r3, #11]
	INMP441_I2S.Data_Length = I2S_Data_Length._16_bit;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <main+0xc0>)
 8001ed2:	729a      	strb	r2, [r3, #10]
	INMP441_I2S.LR_Pin_Port = GPIOB;
 8001ed4:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <main+0xc0>)
 8001ed6:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <main+0xc8>)
 8001ed8:	605a      	str	r2, [r3, #4]
	INMP441_I2S.LR_Pin_Number = 11;
 8001eda:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <main+0xc0>)
 8001edc:	220b      	movs	r2, #11
 8001ede:	721a      	strb	r2, [r3, #8]
	INMP441_I2S.Standard = I2S_Standard.Standard_Philips;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <main+0xc0>)
 8001ee4:	725a      	strb	r2, [r3, #9]
	INMP441_I2S.Half_Duplex.Enable = true;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <main+0xc0>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	751a      	strb	r2, [r3, #20]
	INMP441_I2S.Half_Duplex.mode = I2S_Mode.Master.Receive;
 8001eec:	2302      	movs	r3, #2
 8001eee:	b25a      	sxtb	r2, r3
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <main+0xc0>)
 8001ef2:	755a      	strb	r2, [r3, #21]
	INMP441_I2S.Half_Duplex.WS_Pin = I2S_Pin.WS.I2S2.PB12;
 8001ef4:	2317      	movs	r3, #23
 8001ef6:	b25a      	sxtb	r2, r3
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <main+0xc0>)
 8001efa:	765a      	strb	r2, [r3, #25]
	INMP441_I2S.Half_Duplex.SD_Pin = I2S_Pin.SD.I2S2.PB15;
 8001efc:	2316      	movs	r3, #22
 8001efe:	b25a      	sxtb	r2, r3
 8001f00:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <main+0xc0>)
 8001f02:	761a      	strb	r2, [r3, #24]
	INMP441_I2S.Half_Duplex.SCK_Pin = I2S_Pin.SCK.I2S2.PB10;
 8001f04:	2315      	movs	r3, #21
 8001f06:	b25a      	sxtb	r2, r3
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <main+0xc0>)
 8001f0a:	75da      	strb	r2, [r3, #23]
	INMP441_I2S.Half_Duplex.MCK_Pin = I2S_Pin.MCK.I2S2.Disable;
 8001f0c:	23ff      	movs	r3, #255	@ 0xff
 8001f0e:	b25a      	sxtb	r2, r3
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <main+0xc0>)
 8001f12:	759a      	strb	r2, [r3, #22]

	if(I2S_Init(&INMP441_I2S)) I2S_Print_Errors(&INMP441_I2S);
 8001f14:	4810      	ldr	r0, [pc, #64]	@ (8001f58 <main+0xc0>)
 8001f16:	f7ff facb 	bl	80014b0 <I2S_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <main+0x8e>
 8001f20:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <main+0xc0>)
 8001f22:	f7ff fe0f 	bl	8001b44 <I2S_Print_Errors>



	I2S_Select_Left_Channel(&INMP441_I2S);
 8001f26:	480c      	ldr	r0, [pc, #48]	@ (8001f58 <main+0xc0>)
 8001f28:	f7ff fe57 	bl	8001bda <I2S_Select_Left_Channel>
	int16_t x = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	80fb      	strh	r3, [r7, #6]

	Delay_ms(200);
 8001f30:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001f64 <main+0xcc>
 8001f34:	f7ff ff82 	bl	8001e3c <Delay_ms>


	for(;;)
	{
		x = I2S_Read_Data(&INMP441_I2S);
 8001f38:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <main+0xc0>)
 8001f3a:	f7ff fe31 	bl	8001ba0 <I2S_Read_Data>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
		printConsole("%d\r\n",x);
 8001f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f46:	4619      	mov	r1, r3
 8001f48:	4807      	ldr	r0, [pc, #28]	@ (8001f68 <main+0xd0>)
 8001f4a:	f7fe fe93 	bl	8000c74 <printConsole>
		x = I2S_Read_Data(&INMP441_I2S);
 8001f4e:	bf00      	nop
 8001f50:	e7f2      	b.n	8001f38 <main+0xa0>
 8001f52:	bf00      	nop
 8001f54:	40011000 	.word	0x40011000
 8001f58:	20000088 	.word	0x20000088
 8001f5c:	40003800 	.word	0x40003800
 8001f60:	40020400 	.word	0x40020400
 8001f64:	43480000 	.word	0x43480000
 8001f68:	08003778 	.word	0x08003778

08001f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f74:	4a14      	ldr	r2, [pc, #80]	@ (8001fc8 <_sbrk+0x5c>)
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <_sbrk+0x60>)
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <_sbrk+0x64>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <_sbrk+0x68>)
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d207      	bcs.n	8001fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f9c:	f000 feec 	bl	8002d78 <__errno>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e009      	b.n	8001fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <_sbrk+0x64>)
 8001fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20020000 	.word	0x20020000
 8001fcc:	00000400 	.word	0x00000400
 8001fd0:	200000b0 	.word	0x200000b0
 8001fd4:	20000200 	.word	0x20000200

08001fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <SystemInit+0x20>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <SystemInit+0x20>)
 8001fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	2302      	movs	r3, #2
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	2302      	movs	r3, #2
 8002014:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002016:	4b34      	ldr	r3, [pc, #208]	@ (80020e8 <SystemCoreClockUpdate+0xec>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b08      	cmp	r3, #8
 8002024:	d011      	beq.n	800204a <SystemCoreClockUpdate+0x4e>
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d844      	bhi.n	80020b6 <SystemCoreClockUpdate+0xba>
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <SystemCoreClockUpdate+0x3e>
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d004      	beq.n	8002042 <SystemCoreClockUpdate+0x46>
 8002038:	e03d      	b.n	80020b6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800203a:	4b2c      	ldr	r3, [pc, #176]	@ (80020ec <SystemCoreClockUpdate+0xf0>)
 800203c:	4a2c      	ldr	r2, [pc, #176]	@ (80020f0 <SystemCoreClockUpdate+0xf4>)
 800203e:	601a      	str	r2, [r3, #0]
      break;
 8002040:	e03d      	b.n	80020be <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002042:	4b2a      	ldr	r3, [pc, #168]	@ (80020ec <SystemCoreClockUpdate+0xf0>)
 8002044:	4a2b      	ldr	r2, [pc, #172]	@ (80020f4 <SystemCoreClockUpdate+0xf8>)
 8002046:	601a      	str	r2, [r3, #0]
      break;
 8002048:	e039      	b.n	80020be <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800204a:	4b27      	ldr	r3, [pc, #156]	@ (80020e8 <SystemCoreClockUpdate+0xec>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	0d9b      	lsrs	r3, r3, #22
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002056:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <SystemCoreClockUpdate+0xec>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800205e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002066:	4a23      	ldr	r2, [pc, #140]	@ (80020f4 <SystemCoreClockUpdate+0xf8>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4a1e      	ldr	r2, [pc, #120]	@ (80020e8 <SystemCoreClockUpdate+0xec>)
 8002070:	6852      	ldr	r2, [r2, #4]
 8002072:	0992      	lsrs	r2, r2, #6
 8002074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e00b      	b.n	8002098 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002080:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <SystemCoreClockUpdate+0xf4>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	4a17      	ldr	r2, [pc, #92]	@ (80020e8 <SystemCoreClockUpdate+0xec>)
 800208a:	6852      	ldr	r2, [r2, #4]
 800208c:	0992      	lsrs	r2, r2, #6
 800208e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <SystemCoreClockUpdate+0xec>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	4a0e      	ldr	r2, [pc, #56]	@ (80020ec <SystemCoreClockUpdate+0xf0>)
 80020b2:	6013      	str	r3, [r2, #0]
      break;
 80020b4:	e003      	b.n	80020be <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80020b6:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <SystemCoreClockUpdate+0xf0>)
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <SystemCoreClockUpdate+0xf4>)
 80020ba:	601a      	str	r2, [r3, #0]
      break;
 80020bc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <SystemCoreClockUpdate+0xec>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	4a0b      	ldr	r2, [pc, #44]	@ (80020f8 <SystemCoreClockUpdate+0xfc>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <SystemCoreClockUpdate+0xf0>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <SystemCoreClockUpdate+0xf0>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40023800 	.word	0x40023800
 80020ec:	20000000 	.word	0x20000000
 80020f0:	00f42400 	.word	0x00f42400
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	08003780 	.word	0x08003780

080020fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020fc:	480d      	ldr	r0, [pc, #52]	@ (8002134 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002100:	f7ff ff6a 	bl	8001fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <LoopForever+0x6>)
  ldr r1, =_edata
 8002106:	490d      	ldr	r1, [pc, #52]	@ (800213c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <LoopForever+0xe>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800211c:	4c0a      	ldr	r4, [pc, #40]	@ (8002148 <LoopForever+0x16>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800212a:	f000 fe2b 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800212e:	f7ff feb3 	bl	8001e98 <main>

08002132 <LoopForever>:

LoopForever:
  b LoopForever
 8002132:	e7fe      	b.n	8002132 <LoopForever>
  ldr   r0, =_estack
 8002134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002140:	080037d4 	.word	0x080037d4
  ldr r2, =_sbss
 8002144:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002148:	200001fc 	.word	0x200001fc

0800214c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>

0800214e <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	ed87 0b02 	vstr	d0, [r7, #8]
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 800215c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002160:	f7fe fd0c 	bl	8000b7c <__aeabi_d2lz>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe fa16 	bl	800059c <__aeabi_l2d>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002184:	f7fe f880 	bl	8000288 <__aeabi_dsub>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 80021a2:	2200      	movs	r2, #0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 80021a8:	2200      	movs	r2, #0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 80021ae:	2200      	movs	r2, #0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021ba:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 80021bc:	2203      	movs	r2, #3
 80021be:	2301      	movs	r3, #1
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 80021c8:	2300      	movs	r3, #0
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	749a      	strb	r2, [r3, #18]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a47      	ldr	r2, [pc, #284]	@ (8002308 <USART_Clock_Enable+0x12c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d112      	bne.n	8002214 <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	791b      	ldrb	r3, [r3, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d106      	bne.n	8002206 <USART_Clock_Enable+0x2a>
 80021f8:	4b44      	ldr	r3, [pc, #272]	@ (800230c <USART_Clock_Enable+0x130>)
 80021fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021fc:	4a43      	ldr	r2, [pc, #268]	@ (800230c <USART_Clock_Enable+0x130>)
 80021fe:	f043 0310 	orr.w	r3, r3, #16
 8002202:	6653      	str	r3, [r2, #100]	@ 0x64
 8002204:	e079      	b.n	80022fa <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8002206:	4b41      	ldr	r3, [pc, #260]	@ (800230c <USART_Clock_Enable+0x130>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	4a40      	ldr	r2, [pc, #256]	@ (800230c <USART_Clock_Enable+0x130>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6453      	str	r3, [r2, #68]	@ 0x44
 8002212:	e072      	b.n	80022fa <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a3d      	ldr	r2, [pc, #244]	@ (8002310 <USART_Clock_Enable+0x134>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d112      	bne.n	8002244 <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	791b      	ldrb	r3, [r3, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	4293      	cmp	r3, r2
 8002226:	d106      	bne.n	8002236 <USART_Clock_Enable+0x5a>
 8002228:	4b38      	ldr	r3, [pc, #224]	@ (800230c <USART_Clock_Enable+0x130>)
 800222a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222c:	4a37      	ldr	r2, [pc, #220]	@ (800230c <USART_Clock_Enable+0x130>)
 800222e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002232:	6613      	str	r3, [r2, #96]	@ 0x60
 8002234:	e061      	b.n	80022fa <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8002236:	4b35      	ldr	r3, [pc, #212]	@ (800230c <USART_Clock_Enable+0x130>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a34      	ldr	r2, [pc, #208]	@ (800230c <USART_Clock_Enable+0x130>)
 800223c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	e05a      	b.n	80022fa <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a32      	ldr	r2, [pc, #200]	@ (8002314 <USART_Clock_Enable+0x138>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d112      	bne.n	8002274 <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	791b      	ldrb	r3, [r3, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	4293      	cmp	r3, r2
 8002256:	d106      	bne.n	8002266 <USART_Clock_Enable+0x8a>
 8002258:	4b2c      	ldr	r3, [pc, #176]	@ (800230c <USART_Clock_Enable+0x130>)
 800225a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225c:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <USART_Clock_Enable+0x130>)
 800225e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002262:	6613      	str	r3, [r2, #96]	@ 0x60
 8002264:	e049      	b.n	80022fa <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8002266:	4b29      	ldr	r3, [pc, #164]	@ (800230c <USART_Clock_Enable+0x130>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a28      	ldr	r2, [pc, #160]	@ (800230c <USART_Clock_Enable+0x130>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	e042      	b.n	80022fa <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a27      	ldr	r2, [pc, #156]	@ (8002318 <USART_Clock_Enable+0x13c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10e      	bne.n	800229c <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	4293      	cmp	r3, r2
 8002286:	d102      	bne.n	800228e <USART_Clock_Enable+0xb2>
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e036      	b.n	80022fc <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800228e:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <USART_Clock_Enable+0x130>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a1e      	ldr	r2, [pc, #120]	@ (800230c <USART_Clock_Enable+0x130>)
 8002294:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	e02e      	b.n	80022fa <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <USART_Clock_Enable+0x140>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10e      	bne.n	80022c4 <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	791b      	ldrb	r3, [r3, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d102      	bne.n	80022b6 <USART_Clock_Enable+0xda>
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	e022      	b.n	80022fc <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <USART_Clock_Enable+0x130>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a14      	ldr	r2, [pc, #80]	@ (800230c <USART_Clock_Enable+0x130>)
 80022bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	e01a      	b.n	80022fa <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <USART_Clock_Enable+0x144>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d112      	bne.n	80022f4 <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d106      	bne.n	80022e6 <USART_Clock_Enable+0x10a>
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <USART_Clock_Enable+0x130>)
 80022da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022dc:	4a0b      	ldr	r2, [pc, #44]	@ (800230c <USART_Clock_Enable+0x130>)
 80022de:	f043 0320 	orr.w	r3, r3, #32
 80022e2:	6653      	str	r3, [r2, #100]	@ 0x64
 80022e4:	e009      	b.n	80022fa <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <USART_Clock_Enable+0x130>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	4a08      	ldr	r2, [pc, #32]	@ (800230c <USART_Clock_Enable+0x130>)
 80022ec:	f043 0320 	orr.w	r3, r3, #32
 80022f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f2:	e002      	b.n	80022fa <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
 80022f8:	e000      	b.n	80022fc <USART_Clock_Enable+0x120>
	}
	return 1;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40011000 	.word	0x40011000
 800230c:	40023800 	.word	0x40023800
 8002310:	40004400 	.word	0x40004400
 8002314:	40004800 	.word	0x40004800
 8002318:	40004c00 	.word	0x40004c00
 800231c:	40005000 	.word	0x40005000
 8002320:	40011400 	.word	0x40011400

08002324 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af04      	add	r7, sp, #16
 800232a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4aa0      	ldr	r2, [pc, #640]	@ (80025b4 <PIN_Setup+0x290>)
 8002332:	4293      	cmp	r3, r2
 8002334:	f040 810d 	bne.w	8002552 <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7b1b      	ldrb	r3, [r3, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	4293      	cmp	r3, r2
 8002340:	d00f      	beq.n	8002362 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7b1b      	ldrb	r3, [r3, #12]
 8002346:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002348:	4293      	cmp	r3, r2
 800234a:	d00a      	beq.n	8002362 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7b1b      	ldrb	r3, [r3, #12]
 8002350:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002352:	4293      	cmp	r3, r2
 8002354:	d005      	beq.n	8002362 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7b1b      	ldrb	r3, [r3, #12]
 800235a:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 800235c:	4293      	cmp	r3, r2
 800235e:	f040 80be 	bne.w	80024de <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7b5b      	ldrb	r3, [r3, #13]
 8002366:	2209      	movs	r2, #9
 8002368:	4293      	cmp	r3, r2
 800236a:	d10f      	bne.n	800238c <PIN_Setup+0x68>
 800236c:	2009      	movs	r0, #9
 800236e:	2402      	movs	r4, #2
 8002370:	2500      	movs	r5, #0
 8002372:	2302      	movs	r3, #2
 8002374:	2200      	movs	r2, #0
 8002376:	2107      	movs	r1, #7
 8002378:	9102      	str	r1, [sp, #8]
 800237a:	9201      	str	r2, [sp, #4]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	462b      	mov	r3, r5
 8002380:	4622      	mov	r2, r4
 8002382:	4601      	mov	r1, r0
 8002384:	488c      	ldr	r0, [pc, #560]	@ (80025b8 <PIN_Setup+0x294>)
 8002386:	f7fe fd4b 	bl	8000e20 <GPIO_Pin_Init>
 800238a:	e013      	b.n	80023b4 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b5b      	ldrb	r3, [r3, #13]
 8002390:	2206      	movs	r2, #6
 8002392:	4293      	cmp	r3, r2
 8002394:	d10e      	bne.n	80023b4 <PIN_Setup+0x90>
 8002396:	2006      	movs	r0, #6
 8002398:	2402      	movs	r4, #2
 800239a:	2500      	movs	r5, #0
 800239c:	2302      	movs	r3, #2
 800239e:	2200      	movs	r2, #0
 80023a0:	2107      	movs	r1, #7
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	462b      	mov	r3, r5
 80023aa:	4622      	mov	r2, r4
 80023ac:	4601      	mov	r1, r0
 80023ae:	4883      	ldr	r0, [pc, #524]	@ (80025bc <PIN_Setup+0x298>)
 80023b0:	f7fe fd36 	bl	8000e20 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7b9b      	ldrb	r3, [r3, #14]
 80023b8:	220a      	movs	r2, #10
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10f      	bne.n	80023de <PIN_Setup+0xba>
 80023be:	200a      	movs	r0, #10
 80023c0:	2402      	movs	r4, #2
 80023c2:	2500      	movs	r5, #0
 80023c4:	2302      	movs	r3, #2
 80023c6:	2200      	movs	r2, #0
 80023c8:	2107      	movs	r1, #7
 80023ca:	9102      	str	r1, [sp, #8]
 80023cc:	9201      	str	r2, [sp, #4]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	462b      	mov	r3, r5
 80023d2:	4622      	mov	r2, r4
 80023d4:	4601      	mov	r1, r0
 80023d6:	4878      	ldr	r0, [pc, #480]	@ (80025b8 <PIN_Setup+0x294>)
 80023d8:	f7fe fd22 	bl	8000e20 <GPIO_Pin_Init>
 80023dc:	e013      	b.n	8002406 <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7b9b      	ldrb	r3, [r3, #14]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10e      	bne.n	8002406 <PIN_Setup+0xe2>
 80023e8:	2007      	movs	r0, #7
 80023ea:	2402      	movs	r4, #2
 80023ec:	2500      	movs	r5, #0
 80023ee:	2302      	movs	r3, #2
 80023f0:	2200      	movs	r2, #0
 80023f2:	2107      	movs	r1, #7
 80023f4:	9102      	str	r1, [sp, #8]
 80023f6:	9201      	str	r2, [sp, #4]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	462b      	mov	r3, r5
 80023fc:	4622      	mov	r2, r4
 80023fe:	4601      	mov	r1, r0
 8002400:	486e      	ldr	r0, [pc, #440]	@ (80025bc <PIN_Setup+0x298>)
 8002402:	f7fe fd0d 	bl	8000e20 <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7b1b      	ldrb	r3, [r3, #12]
 800240a:	2202      	movs	r2, #2
 800240c:	4293      	cmp	r3, r2
 800240e:	d113      	bne.n	8002438 <PIN_Setup+0x114>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7bdb      	ldrb	r3, [r3, #15]
 8002414:	2208      	movs	r2, #8
 8002416:	4293      	cmp	r3, r2
 8002418:	d10e      	bne.n	8002438 <PIN_Setup+0x114>
 800241a:	2008      	movs	r0, #8
 800241c:	2402      	movs	r4, #2
 800241e:	2500      	movs	r5, #0
 8002420:	2302      	movs	r3, #2
 8002422:	2200      	movs	r2, #0
 8002424:	2107      	movs	r1, #7
 8002426:	9102      	str	r1, [sp, #8]
 8002428:	9201      	str	r2, [sp, #4]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	462b      	mov	r3, r5
 800242e:	4622      	mov	r2, r4
 8002430:	4601      	mov	r1, r0
 8002432:	4861      	ldr	r0, [pc, #388]	@ (80025b8 <PIN_Setup+0x294>)
 8002434:	f7fe fcf4 	bl	8000e20 <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7cdb      	ldrb	r3, [r3, #19]
 800243c:	2200      	movs	r2, #0
 800243e:	4293      	cmp	r3, r2
 8002440:	f000 83bb 	beq.w	8002bba <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7cdb      	ldrb	r3, [r3, #19]
 8002448:	2201      	movs	r2, #1
 800244a:	4293      	cmp	r3, r2
 800244c:	d10e      	bne.n	800246c <PIN_Setup+0x148>
 800244e:	200b      	movs	r0, #11
 8002450:	2402      	movs	r4, #2
 8002452:	2500      	movs	r5, #0
 8002454:	2302      	movs	r3, #2
 8002456:	2200      	movs	r2, #0
 8002458:	2107      	movs	r1, #7
 800245a:	9102      	str	r1, [sp, #8]
 800245c:	9201      	str	r2, [sp, #4]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	462b      	mov	r3, r5
 8002462:	4622      	mov	r2, r4
 8002464:	4601      	mov	r1, r0
 8002466:	4854      	ldr	r0, [pc, #336]	@ (80025b8 <PIN_Setup+0x294>)
 8002468:	f7fe fcda 	bl	8000e20 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7cdb      	ldrb	r3, [r3, #19]
 8002470:	2202      	movs	r2, #2
 8002472:	4293      	cmp	r3, r2
 8002474:	d10e      	bne.n	8002494 <PIN_Setup+0x170>
 8002476:	200c      	movs	r0, #12
 8002478:	2402      	movs	r4, #2
 800247a:	2500      	movs	r5, #0
 800247c:	2302      	movs	r3, #2
 800247e:	2200      	movs	r2, #0
 8002480:	2107      	movs	r1, #7
 8002482:	9102      	str	r1, [sp, #8]
 8002484:	9201      	str	r2, [sp, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	462b      	mov	r3, r5
 800248a:	4622      	mov	r2, r4
 800248c:	4601      	mov	r1, r0
 800248e:	484a      	ldr	r0, [pc, #296]	@ (80025b8 <PIN_Setup+0x294>)
 8002490:	f7fe fcc6 	bl	8000e20 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7cdb      	ldrb	r3, [r3, #19]
 8002498:	2203      	movs	r2, #3
 800249a:	4293      	cmp	r3, r2
 800249c:	f040 838d 	bne.w	8002bba <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80024a0:	200b      	movs	r0, #11
 80024a2:	2402      	movs	r4, #2
 80024a4:	2500      	movs	r5, #0
 80024a6:	2302      	movs	r3, #2
 80024a8:	2200      	movs	r2, #0
 80024aa:	2107      	movs	r1, #7
 80024ac:	9102      	str	r1, [sp, #8]
 80024ae:	9201      	str	r2, [sp, #4]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	462b      	mov	r3, r5
 80024b4:	4622      	mov	r2, r4
 80024b6:	4601      	mov	r1, r0
 80024b8:	483f      	ldr	r0, [pc, #252]	@ (80025b8 <PIN_Setup+0x294>)
 80024ba:	f7fe fcb1 	bl	8000e20 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80024be:	200c      	movs	r0, #12
 80024c0:	2402      	movs	r4, #2
 80024c2:	2500      	movs	r5, #0
 80024c4:	2302      	movs	r3, #2
 80024c6:	2200      	movs	r2, #0
 80024c8:	2107      	movs	r1, #7
 80024ca:	9102      	str	r1, [sp, #8]
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	462b      	mov	r3, r5
 80024d2:	4622      	mov	r2, r4
 80024d4:	4601      	mov	r1, r0
 80024d6:	4838      	ldr	r0, [pc, #224]	@ (80025b8 <PIN_Setup+0x294>)
 80024d8:	f7fe fca2 	bl	8000e20 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80024dc:	e36d      	b.n	8002bba <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7b1b      	ldrb	r3, [r3, #12]
 80024e2:	2206      	movs	r2, #6
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00a      	beq.n	80024fe <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7b1b      	ldrb	r3, [r3, #12]
 80024ec:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d005      	beq.n	80024fe <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7b1b      	ldrb	r3, [r3, #12]
 80024f6:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80024f8:	4293      	cmp	r3, r2
 80024fa:	f040 8363 	bne.w	8002bc4 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7b5b      	ldrb	r3, [r3, #13]
 8002502:	2209      	movs	r2, #9
 8002504:	4293      	cmp	r3, r2
 8002506:	d10e      	bne.n	8002526 <PIN_Setup+0x202>
 8002508:	2009      	movs	r0, #9
 800250a:	2402      	movs	r4, #2
 800250c:	2500      	movs	r5, #0
 800250e:	2302      	movs	r3, #2
 8002510:	2200      	movs	r2, #0
 8002512:	2107      	movs	r1, #7
 8002514:	9102      	str	r1, [sp, #8]
 8002516:	9201      	str	r2, [sp, #4]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	462b      	mov	r3, r5
 800251c:	4622      	mov	r2, r4
 800251e:	4601      	mov	r1, r0
 8002520:	4825      	ldr	r0, [pc, #148]	@ (80025b8 <PIN_Setup+0x294>)
 8002522:	f7fe fc7d 	bl	8000e20 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	2207      	movs	r2, #7
 800252c:	4293      	cmp	r3, r2
 800252e:	f040 8349 	bne.w	8002bc4 <PIN_Setup+0x8a0>
 8002532:	2008      	movs	r0, #8
 8002534:	2402      	movs	r4, #2
 8002536:	2500      	movs	r5, #0
 8002538:	2302      	movs	r3, #2
 800253a:	2200      	movs	r2, #0
 800253c:	2107      	movs	r1, #7
 800253e:	9102      	str	r1, [sp, #8]
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	462b      	mov	r3, r5
 8002546:	4622      	mov	r2, r4
 8002548:	4601      	mov	r1, r0
 800254a:	481b      	ldr	r0, [pc, #108]	@ (80025b8 <PIN_Setup+0x294>)
 800254c:	f7fe fc68 	bl	8000e20 <GPIO_Pin_Init>
//
//		}
//	}


}
 8002550:	e338      	b.n	8002bc4 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1a      	ldr	r2, [pc, #104]	@ (80025c0 <PIN_Setup+0x29c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	f040 817b 	bne.w	8002854 <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7b1b      	ldrb	r3, [r3, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	4293      	cmp	r3, r2
 8002566:	d00f      	beq.n	8002588 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7b1b      	ldrb	r3, [r3, #12]
 800256c:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 800256e:	4293      	cmp	r3, r2
 8002570:	d00a      	beq.n	8002588 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7b1b      	ldrb	r3, [r3, #12]
 8002576:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002578:	4293      	cmp	r3, r2
 800257a:	d005      	beq.n	8002588 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7b1b      	ldrb	r3, [r3, #12]
 8002580:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002582:	4293      	cmp	r3, r2
 8002584:	f040 80f8 	bne.w	8002778 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7b5b      	ldrb	r3, [r3, #13]
 800258c:	2202      	movs	r2, #2
 800258e:	4293      	cmp	r3, r2
 8002590:	d118      	bne.n	80025c4 <PIN_Setup+0x2a0>
 8002592:	2002      	movs	r0, #2
 8002594:	2402      	movs	r4, #2
 8002596:	2500      	movs	r5, #0
 8002598:	2302      	movs	r3, #2
 800259a:	2200      	movs	r2, #0
 800259c:	2107      	movs	r1, #7
 800259e:	9102      	str	r1, [sp, #8]
 80025a0:	9201      	str	r2, [sp, #4]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	462b      	mov	r3, r5
 80025a6:	4622      	mov	r2, r4
 80025a8:	4601      	mov	r1, r0
 80025aa:	4803      	ldr	r0, [pc, #12]	@ (80025b8 <PIN_Setup+0x294>)
 80025ac:	f7fe fc38 	bl	8000e20 <GPIO_Pin_Init>
 80025b0:	e01c      	b.n	80025ec <PIN_Setup+0x2c8>
 80025b2:	bf00      	nop
 80025b4:	40011000 	.word	0x40011000
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7b5b      	ldrb	r3, [r3, #13]
 80025c8:	2205      	movs	r2, #5
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10e      	bne.n	80025ec <PIN_Setup+0x2c8>
 80025ce:	2005      	movs	r0, #5
 80025d0:	2402      	movs	r4, #2
 80025d2:	2500      	movs	r5, #0
 80025d4:	2302      	movs	r3, #2
 80025d6:	2200      	movs	r2, #0
 80025d8:	2107      	movs	r1, #7
 80025da:	9102      	str	r1, [sp, #8]
 80025dc:	9201      	str	r2, [sp, #4]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	462b      	mov	r3, r5
 80025e2:	4622      	mov	r2, r4
 80025e4:	4601      	mov	r1, r0
 80025e6:	4899      	ldr	r0, [pc, #612]	@ (800284c <PIN_Setup+0x528>)
 80025e8:	f7fe fc1a 	bl	8000e20 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7b9b      	ldrb	r3, [r3, #14]
 80025f0:	2203      	movs	r2, #3
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10f      	bne.n	8002616 <PIN_Setup+0x2f2>
 80025f6:	2003      	movs	r0, #3
 80025f8:	2402      	movs	r4, #2
 80025fa:	2500      	movs	r5, #0
 80025fc:	2302      	movs	r3, #2
 80025fe:	2200      	movs	r2, #0
 8002600:	2107      	movs	r1, #7
 8002602:	9102      	str	r1, [sp, #8]
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	462b      	mov	r3, r5
 800260a:	4622      	mov	r2, r4
 800260c:	4601      	mov	r1, r0
 800260e:	4890      	ldr	r0, [pc, #576]	@ (8002850 <PIN_Setup+0x52c>)
 8002610:	f7fe fc06 	bl	8000e20 <GPIO_Pin_Init>
 8002614:	e013      	b.n	800263e <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7b9b      	ldrb	r3, [r3, #14]
 800261a:	2206      	movs	r2, #6
 800261c:	4293      	cmp	r3, r2
 800261e:	d10e      	bne.n	800263e <PIN_Setup+0x31a>
 8002620:	2006      	movs	r0, #6
 8002622:	2402      	movs	r4, #2
 8002624:	2500      	movs	r5, #0
 8002626:	2302      	movs	r3, #2
 8002628:	2200      	movs	r2, #0
 800262a:	2107      	movs	r1, #7
 800262c:	9102      	str	r1, [sp, #8]
 800262e:	9201      	str	r2, [sp, #4]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	462b      	mov	r3, r5
 8002634:	4622      	mov	r2, r4
 8002636:	4601      	mov	r1, r0
 8002638:	4884      	ldr	r0, [pc, #528]	@ (800284c <PIN_Setup+0x528>)
 800263a:	f7fe fbf1 	bl	8000e20 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7b1b      	ldrb	r3, [r3, #12]
 8002642:	2202      	movs	r2, #2
 8002644:	4293      	cmp	r3, r2
 8002646:	d128      	bne.n	800269a <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7bdb      	ldrb	r3, [r3, #15]
 800264c:	2204      	movs	r2, #4
 800264e:	4293      	cmp	r3, r2
 8002650:	d10f      	bne.n	8002672 <PIN_Setup+0x34e>
 8002652:	2004      	movs	r0, #4
 8002654:	2402      	movs	r4, #2
 8002656:	2500      	movs	r5, #0
 8002658:	2302      	movs	r3, #2
 800265a:	2200      	movs	r2, #0
 800265c:	2107      	movs	r1, #7
 800265e:	9102      	str	r1, [sp, #8]
 8002660:	9201      	str	r2, [sp, #4]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	462b      	mov	r3, r5
 8002666:	4622      	mov	r2, r4
 8002668:	4601      	mov	r1, r0
 800266a:	4879      	ldr	r0, [pc, #484]	@ (8002850 <PIN_Setup+0x52c>)
 800266c:	f7fe fbd8 	bl	8000e20 <GPIO_Pin_Init>
 8002670:	e013      	b.n	800269a <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7bdb      	ldrb	r3, [r3, #15]
 8002676:	2207      	movs	r2, #7
 8002678:	4293      	cmp	r3, r2
 800267a:	d10e      	bne.n	800269a <PIN_Setup+0x376>
 800267c:	2007      	movs	r0, #7
 800267e:	2402      	movs	r4, #2
 8002680:	2500      	movs	r5, #0
 8002682:	2302      	movs	r3, #2
 8002684:	2200      	movs	r2, #0
 8002686:	2107      	movs	r1, #7
 8002688:	9102      	str	r1, [sp, #8]
 800268a:	9201      	str	r2, [sp, #4]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	462b      	mov	r3, r5
 8002690:	4622      	mov	r2, r4
 8002692:	4601      	mov	r1, r0
 8002694:	486e      	ldr	r0, [pc, #440]	@ (8002850 <PIN_Setup+0x52c>)
 8002696:	f7fe fbc3 	bl	8000e20 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7cdb      	ldrb	r3, [r3, #19]
 800269e:	2200      	movs	r2, #0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d105      	bne.n	80026b0 <PIN_Setup+0x38c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7cdb      	ldrb	r3, [r3, #19]
 80026a8:	2203      	movs	r2, #3
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f040 8287 	bne.w	8002bbe <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7cdb      	ldrb	r3, [r3, #19]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d128      	bne.n	800270c <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7bdb      	ldrb	r3, [r3, #15]
 80026be:	2200      	movs	r2, #0
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10f      	bne.n	80026e4 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80026c4:	2000      	movs	r0, #0
 80026c6:	2402      	movs	r4, #2
 80026c8:	2500      	movs	r5, #0
 80026ca:	2302      	movs	r3, #2
 80026cc:	2200      	movs	r2, #0
 80026ce:	2107      	movs	r1, #7
 80026d0:	9102      	str	r1, [sp, #8]
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	462b      	mov	r3, r5
 80026d8:	4622      	mov	r2, r4
 80026da:	4601      	mov	r1, r0
 80026dc:	485c      	ldr	r0, [pc, #368]	@ (8002850 <PIN_Setup+0x52c>)
 80026de:	f7fe fb9f 	bl	8000e20 <GPIO_Pin_Init>
 80026e2:	e013      	b.n	800270c <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7bdb      	ldrb	r3, [r3, #15]
 80026e8:	2203      	movs	r2, #3
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10e      	bne.n	800270c <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80026ee:	2003      	movs	r0, #3
 80026f0:	2402      	movs	r4, #2
 80026f2:	2500      	movs	r5, #0
 80026f4:	2302      	movs	r3, #2
 80026f6:	2200      	movs	r2, #0
 80026f8:	2107      	movs	r1, #7
 80026fa:	9102      	str	r1, [sp, #8]
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	462b      	mov	r3, r5
 8002702:	4622      	mov	r2, r4
 8002704:	4601      	mov	r1, r0
 8002706:	4851      	ldr	r0, [pc, #324]	@ (800284c <PIN_Setup+0x528>)
 8002708:	f7fe fb8a 	bl	8000e20 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7cdb      	ldrb	r3, [r3, #19]
 8002710:	2202      	movs	r2, #2
 8002712:	4293      	cmp	r3, r2
 8002714:	d005      	beq.n	8002722 <PIN_Setup+0x3fe>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7cdb      	ldrb	r3, [r3, #19]
 800271a:	2203      	movs	r2, #3
 800271c:	4293      	cmp	r3, r2
 800271e:	f040 824e 	bne.w	8002bbe <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7bdb      	ldrb	r3, [r3, #15]
 8002726:	2201      	movs	r2, #1
 8002728:	4293      	cmp	r3, r2
 800272a:	d10f      	bne.n	800274c <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800272c:	2001      	movs	r0, #1
 800272e:	2402      	movs	r4, #2
 8002730:	2500      	movs	r5, #0
 8002732:	2302      	movs	r3, #2
 8002734:	2200      	movs	r2, #0
 8002736:	2107      	movs	r1, #7
 8002738:	9102      	str	r1, [sp, #8]
 800273a:	9201      	str	r2, [sp, #4]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	462b      	mov	r3, r5
 8002740:	4622      	mov	r2, r4
 8002742:	4601      	mov	r1, r0
 8002744:	4842      	ldr	r0, [pc, #264]	@ (8002850 <PIN_Setup+0x52c>)
 8002746:	f7fe fb6b 	bl	8000e20 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800274a:	e238      	b.n	8002bbe <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7bdb      	ldrb	r3, [r3, #15]
 8002750:	2204      	movs	r2, #4
 8002752:	4293      	cmp	r3, r2
 8002754:	f040 8233 	bne.w	8002bbe <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002758:	2004      	movs	r0, #4
 800275a:	2402      	movs	r4, #2
 800275c:	2500      	movs	r5, #0
 800275e:	2302      	movs	r3, #2
 8002760:	2200      	movs	r2, #0
 8002762:	2107      	movs	r1, #7
 8002764:	9102      	str	r1, [sp, #8]
 8002766:	9201      	str	r2, [sp, #4]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	462b      	mov	r3, r5
 800276c:	4622      	mov	r2, r4
 800276e:	4601      	mov	r1, r0
 8002770:	4836      	ldr	r0, [pc, #216]	@ (800284c <PIN_Setup+0x528>)
 8002772:	f7fe fb55 	bl	8000e20 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002776:	e222      	b.n	8002bbe <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7b1b      	ldrb	r3, [r3, #12]
 800277c:	2206      	movs	r2, #6
 800277e:	4293      	cmp	r3, r2
 8002780:	d00a      	beq.n	8002798 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7b1b      	ldrb	r3, [r3, #12]
 8002786:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002788:	4293      	cmp	r3, r2
 800278a:	d005      	beq.n	8002798 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7b1b      	ldrb	r3, [r3, #12]
 8002790:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002792:	4293      	cmp	r3, r2
 8002794:	f040 8216 	bne.w	8002bc4 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7b5b      	ldrb	r3, [r3, #13]
 800279c:	2202      	movs	r2, #2
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10f      	bne.n	80027c2 <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80027a2:	2002      	movs	r0, #2
 80027a4:	2402      	movs	r4, #2
 80027a6:	2500      	movs	r5, #0
 80027a8:	2302      	movs	r3, #2
 80027aa:	2200      	movs	r2, #0
 80027ac:	2107      	movs	r1, #7
 80027ae:	9102      	str	r1, [sp, #8]
 80027b0:	9201      	str	r2, [sp, #4]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	462b      	mov	r3, r5
 80027b6:	4622      	mov	r2, r4
 80027b8:	4601      	mov	r1, r0
 80027ba:	4825      	ldr	r0, [pc, #148]	@ (8002850 <PIN_Setup+0x52c>)
 80027bc:	f7fe fb30 	bl	8000e20 <GPIO_Pin_Init>
 80027c0:	e013      	b.n	80027ea <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7b5b      	ldrb	r3, [r3, #13]
 80027c6:	2205      	movs	r2, #5
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10e      	bne.n	80027ea <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80027cc:	2005      	movs	r0, #5
 80027ce:	2402      	movs	r4, #2
 80027d0:	2500      	movs	r5, #0
 80027d2:	2302      	movs	r3, #2
 80027d4:	2200      	movs	r2, #0
 80027d6:	2107      	movs	r1, #7
 80027d8:	9102      	str	r1, [sp, #8]
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	462b      	mov	r3, r5
 80027e0:	4622      	mov	r2, r4
 80027e2:	4601      	mov	r1, r0
 80027e4:	4819      	ldr	r0, [pc, #100]	@ (800284c <PIN_Setup+0x528>)
 80027e6:	f7fe fb1b 	bl	8000e20 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7b1b      	ldrb	r3, [r3, #12]
 80027ee:	2207      	movs	r2, #7
 80027f0:	4293      	cmp	r3, r2
 80027f2:	f040 81e7 	bne.w	8002bc4 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7bdb      	ldrb	r3, [r3, #15]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d10f      	bne.n	8002820 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002800:	2004      	movs	r0, #4
 8002802:	2402      	movs	r4, #2
 8002804:	2500      	movs	r5, #0
 8002806:	2302      	movs	r3, #2
 8002808:	2200      	movs	r2, #0
 800280a:	2107      	movs	r1, #7
 800280c:	9102      	str	r1, [sp, #8]
 800280e:	9201      	str	r2, [sp, #4]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	462b      	mov	r3, r5
 8002814:	4622      	mov	r2, r4
 8002816:	4601      	mov	r1, r0
 8002818:	480d      	ldr	r0, [pc, #52]	@ (8002850 <PIN_Setup+0x52c>)
 800281a:	f7fe fb01 	bl	8000e20 <GPIO_Pin_Init>
}
 800281e:	e1d1      	b.n	8002bc4 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7bdb      	ldrb	r3, [r3, #15]
 8002824:	2207      	movs	r2, #7
 8002826:	4293      	cmp	r3, r2
 8002828:	f040 81cc 	bne.w	8002bc4 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800282c:	2007      	movs	r0, #7
 800282e:	2402      	movs	r4, #2
 8002830:	2500      	movs	r5, #0
 8002832:	2302      	movs	r3, #2
 8002834:	2200      	movs	r2, #0
 8002836:	2107      	movs	r1, #7
 8002838:	9102      	str	r1, [sp, #8]
 800283a:	9201      	str	r2, [sp, #4]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	462b      	mov	r3, r5
 8002840:	4622      	mov	r2, r4
 8002842:	4601      	mov	r1, r0
 8002844:	4802      	ldr	r0, [pc, #8]	@ (8002850 <PIN_Setup+0x52c>)
 8002846:	f7fe faeb 	bl	8000e20 <GPIO_Pin_Init>
}
 800284a:	e1bb      	b.n	8002bc4 <PIN_Setup+0x8a0>
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4aaa      	ldr	r2, [pc, #680]	@ (8002b04 <PIN_Setup+0x7e0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	f040 81b2 	bne.w	8002bc4 <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7b1b      	ldrb	r3, [r3, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	4293      	cmp	r3, r2
 8002868:	d00f      	beq.n	800288a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7b1b      	ldrb	r3, [r3, #12]
 800286e:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002870:	4293      	cmp	r3, r2
 8002872:	d00a      	beq.n	800288a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7b1b      	ldrb	r3, [r3, #12]
 8002878:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 800287a:	4293      	cmp	r3, r2
 800287c:	d005      	beq.n	800288a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7b1b      	ldrb	r3, [r3, #12]
 8002882:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	f040 8119 	bne.w	8002abc <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7b5b      	ldrb	r3, [r3, #13]
 800288e:	220b      	movs	r2, #11
 8002890:	4293      	cmp	r3, r2
 8002892:	d10f      	bne.n	80028b4 <PIN_Setup+0x590>
 8002894:	200b      	movs	r0, #11
 8002896:	2402      	movs	r4, #2
 8002898:	2500      	movs	r5, #0
 800289a:	2302      	movs	r3, #2
 800289c:	2200      	movs	r2, #0
 800289e:	2107      	movs	r1, #7
 80028a0:	9102      	str	r1, [sp, #8]
 80028a2:	9201      	str	r2, [sp, #4]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	462b      	mov	r3, r5
 80028a8:	4622      	mov	r2, r4
 80028aa:	4601      	mov	r1, r0
 80028ac:	4896      	ldr	r0, [pc, #600]	@ (8002b08 <PIN_Setup+0x7e4>)
 80028ae:	f7fe fab7 	bl	8000e20 <GPIO_Pin_Init>
 80028b2:	e028      	b.n	8002906 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7b5b      	ldrb	r3, [r3, #13]
 80028b8:	220a      	movs	r2, #10
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10f      	bne.n	80028de <PIN_Setup+0x5ba>
 80028be:	200a      	movs	r0, #10
 80028c0:	2402      	movs	r4, #2
 80028c2:	2500      	movs	r5, #0
 80028c4:	2302      	movs	r3, #2
 80028c6:	2200      	movs	r2, #0
 80028c8:	2107      	movs	r1, #7
 80028ca:	9102      	str	r1, [sp, #8]
 80028cc:	9201      	str	r2, [sp, #4]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	462b      	mov	r3, r5
 80028d2:	4622      	mov	r2, r4
 80028d4:	4601      	mov	r1, r0
 80028d6:	488d      	ldr	r0, [pc, #564]	@ (8002b0c <PIN_Setup+0x7e8>)
 80028d8:	f7fe faa2 	bl	8000e20 <GPIO_Pin_Init>
 80028dc:	e013      	b.n	8002906 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7b5b      	ldrb	r3, [r3, #13]
 80028e2:	2208      	movs	r2, #8
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10e      	bne.n	8002906 <PIN_Setup+0x5e2>
 80028e8:	2008      	movs	r0, #8
 80028ea:	2402      	movs	r4, #2
 80028ec:	2500      	movs	r5, #0
 80028ee:	2302      	movs	r3, #2
 80028f0:	2200      	movs	r2, #0
 80028f2:	2107      	movs	r1, #7
 80028f4:	9102      	str	r1, [sp, #8]
 80028f6:	9201      	str	r2, [sp, #4]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	462b      	mov	r3, r5
 80028fc:	4622      	mov	r2, r4
 80028fe:	4601      	mov	r1, r0
 8002900:	4882      	ldr	r0, [pc, #520]	@ (8002b0c <PIN_Setup+0x7e8>)
 8002902:	f7fe fa8d 	bl	8000e20 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7b9b      	ldrb	r3, [r3, #14]
 800290a:	220a      	movs	r2, #10
 800290c:	4293      	cmp	r3, r2
 800290e:	d10f      	bne.n	8002930 <PIN_Setup+0x60c>
 8002910:	200a      	movs	r0, #10
 8002912:	2402      	movs	r4, #2
 8002914:	2500      	movs	r5, #0
 8002916:	2302      	movs	r3, #2
 8002918:	2200      	movs	r2, #0
 800291a:	2107      	movs	r1, #7
 800291c:	9102      	str	r1, [sp, #8]
 800291e:	9201      	str	r2, [sp, #4]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	462b      	mov	r3, r5
 8002924:	4622      	mov	r2, r4
 8002926:	4601      	mov	r1, r0
 8002928:	4877      	ldr	r0, [pc, #476]	@ (8002b08 <PIN_Setup+0x7e4>)
 800292a:	f7fe fa79 	bl	8000e20 <GPIO_Pin_Init>
 800292e:	e028      	b.n	8002982 <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7b9b      	ldrb	r3, [r3, #14]
 8002934:	220b      	movs	r2, #11
 8002936:	4293      	cmp	r3, r2
 8002938:	d10f      	bne.n	800295a <PIN_Setup+0x636>
 800293a:	200b      	movs	r0, #11
 800293c:	2402      	movs	r4, #2
 800293e:	2500      	movs	r5, #0
 8002940:	2302      	movs	r3, #2
 8002942:	2200      	movs	r2, #0
 8002944:	2107      	movs	r1, #7
 8002946:	9102      	str	r1, [sp, #8]
 8002948:	9201      	str	r2, [sp, #4]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	462b      	mov	r3, r5
 800294e:	4622      	mov	r2, r4
 8002950:	4601      	mov	r1, r0
 8002952:	486e      	ldr	r0, [pc, #440]	@ (8002b0c <PIN_Setup+0x7e8>)
 8002954:	f7fe fa64 	bl	8000e20 <GPIO_Pin_Init>
 8002958:	e013      	b.n	8002982 <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7b5b      	ldrb	r3, [r3, #13]
 800295e:	2208      	movs	r2, #8
 8002960:	4293      	cmp	r3, r2
 8002962:	d10e      	bne.n	8002982 <PIN_Setup+0x65e>
 8002964:	2008      	movs	r0, #8
 8002966:	2402      	movs	r4, #2
 8002968:	2500      	movs	r5, #0
 800296a:	2302      	movs	r3, #2
 800296c:	2200      	movs	r2, #0
 800296e:	2107      	movs	r1, #7
 8002970:	9102      	str	r1, [sp, #8]
 8002972:	9201      	str	r2, [sp, #4]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	462b      	mov	r3, r5
 8002978:	4622      	mov	r2, r4
 800297a:	4601      	mov	r1, r0
 800297c:	4863      	ldr	r0, [pc, #396]	@ (8002b0c <PIN_Setup+0x7e8>)
 800297e:	f7fe fa4f 	bl	8000e20 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7b1b      	ldrb	r3, [r3, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	4293      	cmp	r3, r2
 800298a:	d128      	bne.n	80029de <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7bdb      	ldrb	r3, [r3, #15]
 8002990:	220c      	movs	r2, #12
 8002992:	4293      	cmp	r3, r2
 8002994:	d10f      	bne.n	80029b6 <PIN_Setup+0x692>
 8002996:	200c      	movs	r0, #12
 8002998:	2402      	movs	r4, #2
 800299a:	2500      	movs	r5, #0
 800299c:	2302      	movs	r3, #2
 800299e:	2200      	movs	r2, #0
 80029a0:	2107      	movs	r1, #7
 80029a2:	9102      	str	r1, [sp, #8]
 80029a4:	9201      	str	r2, [sp, #4]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	462b      	mov	r3, r5
 80029aa:	4622      	mov	r2, r4
 80029ac:	4601      	mov	r1, r0
 80029ae:	4857      	ldr	r0, [pc, #348]	@ (8002b0c <PIN_Setup+0x7e8>)
 80029b0:	f7fe fa36 	bl	8000e20 <GPIO_Pin_Init>
 80029b4:	e013      	b.n	80029de <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7bdb      	ldrb	r3, [r3, #15]
 80029ba:	220a      	movs	r2, #10
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10e      	bne.n	80029de <PIN_Setup+0x6ba>
 80029c0:	200a      	movs	r0, #10
 80029c2:	2402      	movs	r4, #2
 80029c4:	2500      	movs	r5, #0
 80029c6:	2302      	movs	r3, #2
 80029c8:	2200      	movs	r2, #0
 80029ca:	2107      	movs	r1, #7
 80029cc:	9102      	str	r1, [sp, #8]
 80029ce:	9201      	str	r2, [sp, #4]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	462b      	mov	r3, r5
 80029d4:	4622      	mov	r2, r4
 80029d6:	4601      	mov	r1, r0
 80029d8:	484d      	ldr	r0, [pc, #308]	@ (8002b10 <PIN_Setup+0x7ec>)
 80029da:	f7fe fa21 	bl	8000e20 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7cdb      	ldrb	r3, [r3, #19]
 80029e2:	2200      	movs	r2, #0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	f000 80ec 	beq.w	8002bc2 <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7cdb      	ldrb	r3, [r3, #19]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <PIN_Setup+0x6da>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7cdb      	ldrb	r3, [r3, #19]
 80029f8:	2203      	movs	r2, #3
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d128      	bne.n	8002a50 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7bdb      	ldrb	r3, [r3, #15]
 8002a02:	2200      	movs	r2, #0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10f      	bne.n	8002a28 <PIN_Setup+0x704>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	2402      	movs	r4, #2
 8002a0c:	2500      	movs	r5, #0
 8002a0e:	2302      	movs	r3, #2
 8002a10:	2200      	movs	r2, #0
 8002a12:	2107      	movs	r1, #7
 8002a14:	9102      	str	r1, [sp, #8]
 8002a16:	9201      	str	r2, [sp, #4]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	4601      	mov	r1, r0
 8002a20:	483a      	ldr	r0, [pc, #232]	@ (8002b0c <PIN_Setup+0x7e8>)
 8002a22:	f7fe f9fd 	bl	8000e20 <GPIO_Pin_Init>
 8002a26:	e013      	b.n	8002a50 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7bdb      	ldrb	r3, [r3, #15]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10e      	bne.n	8002a50 <PIN_Setup+0x72c>
 8002a32:	2003      	movs	r0, #3
 8002a34:	2402      	movs	r4, #2
 8002a36:	2500      	movs	r5, #0
 8002a38:	2302      	movs	r3, #2
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2107      	movs	r1, #7
 8002a3e:	9102      	str	r1, [sp, #8]
 8002a40:	9201      	str	r2, [sp, #4]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	462b      	mov	r3, r5
 8002a46:	4622      	mov	r2, r4
 8002a48:	4601      	mov	r1, r0
 8002a4a:	4831      	ldr	r0, [pc, #196]	@ (8002b10 <PIN_Setup+0x7ec>)
 8002a4c:	f7fe f9e8 	bl	8000e20 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7cdb      	ldrb	r3, [r3, #19]
 8002a54:	2202      	movs	r2, #2
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d005      	beq.n	8002a66 <PIN_Setup+0x742>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7cdb      	ldrb	r3, [r3, #19]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	4293      	cmp	r3, r2
 8002a62:	f040 80ae 	bne.w	8002bc2 <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7bdb      	ldrb	r3, [r3, #15]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10f      	bne.n	8002a90 <PIN_Setup+0x76c>
 8002a70:	2001      	movs	r0, #1
 8002a72:	2402      	movs	r4, #2
 8002a74:	2500      	movs	r5, #0
 8002a76:	2302      	movs	r3, #2
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2107      	movs	r1, #7
 8002a7c:	9102      	str	r1, [sp, #8]
 8002a7e:	9201      	str	r2, [sp, #4]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	462b      	mov	r3, r5
 8002a84:	4622      	mov	r2, r4
 8002a86:	4601      	mov	r1, r0
 8002a88:	4820      	ldr	r0, [pc, #128]	@ (8002b0c <PIN_Setup+0x7e8>)
 8002a8a:	f7fe f9c9 	bl	8000e20 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002a8e:	e098      	b.n	8002bc2 <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7bdb      	ldrb	r3, [r3, #15]
 8002a94:	2204      	movs	r2, #4
 8002a96:	4293      	cmp	r3, r2
 8002a98:	f040 8093 	bne.w	8002bc2 <PIN_Setup+0x89e>
 8002a9c:	2004      	movs	r0, #4
 8002a9e:	2402      	movs	r4, #2
 8002aa0:	2500      	movs	r5, #0
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2107      	movs	r1, #7
 8002aa8:	9102      	str	r1, [sp, #8]
 8002aaa:	9201      	str	r2, [sp, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	462b      	mov	r3, r5
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	4816      	ldr	r0, [pc, #88]	@ (8002b10 <PIN_Setup+0x7ec>)
 8002ab6:	f7fe f9b3 	bl	8000e20 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002aba:	e082      	b.n	8002bc2 <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7b1b      	ldrb	r3, [r3, #12]
 8002ac0:	2206      	movs	r2, #6
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7b1b      	ldrb	r3, [r3, #12]
 8002aca:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7b1b      	ldrb	r3, [r3, #12]
 8002ad4:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d174      	bne.n	8002bc4 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7b5b      	ldrb	r3, [r3, #13]
 8002ade:	220b      	movs	r2, #11
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d117      	bne.n	8002b14 <PIN_Setup+0x7f0>
 8002ae4:	200b      	movs	r0, #11
 8002ae6:	2402      	movs	r4, #2
 8002ae8:	2500      	movs	r5, #0
 8002aea:	2302      	movs	r3, #2
 8002aec:	2200      	movs	r2, #0
 8002aee:	2107      	movs	r1, #7
 8002af0:	9102      	str	r1, [sp, #8]
 8002af2:	9201      	str	r2, [sp, #4]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	462b      	mov	r3, r5
 8002af8:	4622      	mov	r2, r4
 8002afa:	4601      	mov	r1, r0
 8002afc:	4802      	ldr	r0, [pc, #8]	@ (8002b08 <PIN_Setup+0x7e4>)
 8002afe:	f7fe f98f 	bl	8000e20 <GPIO_Pin_Init>
 8002b02:	e030      	b.n	8002b66 <PIN_Setup+0x842>
 8002b04:	40004800 	.word	0x40004800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7b5b      	ldrb	r3, [r3, #13]
 8002b18:	220a      	movs	r2, #10
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10f      	bne.n	8002b3e <PIN_Setup+0x81a>
 8002b1e:	200a      	movs	r0, #10
 8002b20:	2402      	movs	r4, #2
 8002b22:	2500      	movs	r5, #0
 8002b24:	2302      	movs	r3, #2
 8002b26:	2200      	movs	r2, #0
 8002b28:	2107      	movs	r1, #7
 8002b2a:	9102      	str	r1, [sp, #8]
 8002b2c:	9201      	str	r2, [sp, #4]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	462b      	mov	r3, r5
 8002b32:	4622      	mov	r2, r4
 8002b34:	4601      	mov	r1, r0
 8002b36:	4825      	ldr	r0, [pc, #148]	@ (8002bcc <PIN_Setup+0x8a8>)
 8002b38:	f7fe f972 	bl	8000e20 <GPIO_Pin_Init>
 8002b3c:	e013      	b.n	8002b66 <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7b5b      	ldrb	r3, [r3, #13]
 8002b42:	2208      	movs	r2, #8
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10e      	bne.n	8002b66 <PIN_Setup+0x842>
 8002b48:	2008      	movs	r0, #8
 8002b4a:	2402      	movs	r4, #2
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	2302      	movs	r3, #2
 8002b50:	2200      	movs	r2, #0
 8002b52:	2107      	movs	r1, #7
 8002b54:	9102      	str	r1, [sp, #8]
 8002b56:	9201      	str	r2, [sp, #4]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	4601      	mov	r1, r0
 8002b60:	481a      	ldr	r0, [pc, #104]	@ (8002bcc <PIN_Setup+0x8a8>)
 8002b62:	f7fe f95d 	bl	8000e20 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7bdb      	ldrb	r3, [r3, #15]
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d10f      	bne.n	8002b90 <PIN_Setup+0x86c>
 8002b70:	200c      	movs	r0, #12
 8002b72:	2402      	movs	r4, #2
 8002b74:	2500      	movs	r5, #0
 8002b76:	2302      	movs	r3, #2
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2107      	movs	r1, #7
 8002b7c:	9102      	str	r1, [sp, #8]
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	462b      	mov	r3, r5
 8002b84:	4622      	mov	r2, r4
 8002b86:	4601      	mov	r1, r0
 8002b88:	4810      	ldr	r0, [pc, #64]	@ (8002bcc <PIN_Setup+0x8a8>)
 8002b8a:	f7fe f949 	bl	8000e20 <GPIO_Pin_Init>
}
 8002b8e:	e019      	b.n	8002bc4 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7bdb      	ldrb	r3, [r3, #15]
 8002b94:	220a      	movs	r2, #10
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d114      	bne.n	8002bc4 <PIN_Setup+0x8a0>
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	2402      	movs	r4, #2
 8002b9e:	2500      	movs	r5, #0
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2107      	movs	r1, #7
 8002ba6:	9102      	str	r1, [sp, #8]
 8002ba8:	9201      	str	r2, [sp, #4]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	462b      	mov	r3, r5
 8002bae:	4622      	mov	r2, r4
 8002bb0:	4601      	mov	r1, r0
 8002bb2:	4807      	ldr	r0, [pc, #28]	@ (8002bd0 <PIN_Setup+0x8ac>)
 8002bb4:	f7fe f934 	bl	8000e20 <GPIO_Pin_Init>
}
 8002bb8:	e004      	b.n	8002bc4 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002bba:	bf00      	nop
 8002bbc:	e002      	b.n	8002bc4 <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002bc2:	bf00      	nop
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bdb0      	pop	{r4, r5, r7, pc}
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40020c00 	.word	0x40020c00
 8002bd4:	00000000 	.word	0x00000000

08002bd8 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fafb 	bl	80021dc <USART_Clock_Enable>
	PIN_Setup(config);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fb9c 	bl	8002324 <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc87 	bl	8000504 <__aeabi_ui2d>
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8002d30 <USART_Init+0x158>)
 8002bfc:	f7fd fcfc 	bl	80005f8 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	a148      	add	r1, pc, #288	@ (adr r1, 8002d28 <USART_Init+0x150>)
 8002c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c0a:	f7fd fe1f 	bl	800084c <__aeabi_ddiv>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8002c16:	f107 0208 	add.w	r2, r7, #8
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	ed97 0b08 	vldr	d0, [r7, #32]
 8002c26:	f7ff fa92 	bl	800214e <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 8002c2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b40      	ldr	r3, [pc, #256]	@ (8002d34 <USART_Init+0x15c>)
 8002c34:	f7fd fce0 	bl	80005f8 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	ec43 2b17 	vmov	d7, r2, r3
 8002c40:	eeb0 0a47 	vmov.f32	s0, s14
 8002c44:	eef0 0a67 	vmov.f32	s1, s15
 8002c48:	f000 fd0e 	bl	8003668 <ceil>
 8002c4c:	ec53 2b10 	vmov	r2, r3, d0
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7fd ff6a 	bl	8000b2c <__aeabi_d2iz>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 8002c5c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c60:	eeb0 0a47 	vmov.f32	s0, s14
 8002c64:	eef0 0a67 	vmov.f32	s1, s15
 8002c68:	f000 fcfe 	bl	8003668 <ceil>
 8002c6c:	ec53 2b10 	vmov	r2, r3, d0
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd ff5a 	bl	8000b2c <__aeabi_d2iz>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c8a:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	011a      	lsls	r2, r3, #4
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7d9b      	ldrb	r3, [r3, #22]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7c9b      	ldrb	r3, [r3, #18]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7d1b      	ldrb	r3, [r3, #20]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7b1b      	ldrb	r3, [r3, #12]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d107      	bne.n	8002cf0 <USART_Init+0x118>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0208 	orr.w	r2, r2, #8
 8002cee:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7b1b      	ldrb	r3, [r3, #12]
 8002cf4:	2205      	movs	r2, #5
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d107      	bne.n	8002d0a <USART_Init+0x132>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d08:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 020c 	orr.w	r2, r2, #12
 8002d18:	60da      	str	r2, [r3, #12]

	return 1;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3728      	adds	r7, #40	@ 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	f3af 8000 	nop.w
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	41a406f4 	.word	0x41a406f4
 8002d30:	40400000 	.word	0x40400000
 8002d34:	40300000 	.word	0x40300000

08002d38 <_vsiprintf_r>:
 8002d38:	b500      	push	{lr}
 8002d3a:	b09b      	sub	sp, #108	@ 0x6c
 8002d3c:	9100      	str	r1, [sp, #0]
 8002d3e:	9104      	str	r1, [sp, #16]
 8002d40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d44:	9105      	str	r1, [sp, #20]
 8002d46:	9102      	str	r1, [sp, #8]
 8002d48:	4905      	ldr	r1, [pc, #20]	@ (8002d60 <_vsiprintf_r+0x28>)
 8002d4a:	9103      	str	r1, [sp, #12]
 8002d4c:	4669      	mov	r1, sp
 8002d4e:	f000 f993 	bl	8003078 <_svfiprintf_r>
 8002d52:	9b00      	ldr	r3, [sp, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	b01b      	add	sp, #108	@ 0x6c
 8002d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d5e:	bf00      	nop
 8002d60:	ffff0208 	.word	0xffff0208

08002d64 <vsiprintf>:
 8002d64:	4613      	mov	r3, r2
 8002d66:	460a      	mov	r2, r1
 8002d68:	4601      	mov	r1, r0
 8002d6a:	4802      	ldr	r0, [pc, #8]	@ (8002d74 <vsiprintf+0x10>)
 8002d6c:	6800      	ldr	r0, [r0, #0]
 8002d6e:	f7ff bfe3 	b.w	8002d38 <_vsiprintf_r>
 8002d72:	bf00      	nop
 8002d74:	20000004 	.word	0x20000004

08002d78 <__errno>:
 8002d78:	4b01      	ldr	r3, [pc, #4]	@ (8002d80 <__errno+0x8>)
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000004 	.word	0x20000004

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	4d0d      	ldr	r5, [pc, #52]	@ (8002dbc <__libc_init_array+0x38>)
 8002d88:	4c0d      	ldr	r4, [pc, #52]	@ (8002dc0 <__libc_init_array+0x3c>)
 8002d8a:	1b64      	subs	r4, r4, r5
 8002d8c:	10a4      	asrs	r4, r4, #2
 8002d8e:	2600      	movs	r6, #0
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	4d0b      	ldr	r5, [pc, #44]	@ (8002dc4 <__libc_init_array+0x40>)
 8002d96:	4c0c      	ldr	r4, [pc, #48]	@ (8002dc8 <__libc_init_array+0x44>)
 8002d98:	f000 fce2 	bl	8003760 <_init>
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	2600      	movs	r6, #0
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	080037cc 	.word	0x080037cc
 8002dc0:	080037cc 	.word	0x080037cc
 8002dc4:	080037cc 	.word	0x080037cc
 8002dc8:	080037d0 	.word	0x080037d0

08002dcc <__retarget_lock_acquire_recursive>:
 8002dcc:	4770      	bx	lr

08002dce <__retarget_lock_release_recursive>:
 8002dce:	4770      	bx	lr

08002dd0 <_free_r>:
 8002dd0:	b538      	push	{r3, r4, r5, lr}
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	d041      	beq.n	8002e5c <_free_r+0x8c>
 8002dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ddc:	1f0c      	subs	r4, r1, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bfb8      	it	lt
 8002de2:	18e4      	addlt	r4, r4, r3
 8002de4:	f000 f8e0 	bl	8002fa8 <__malloc_lock>
 8002de8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e60 <_free_r+0x90>)
 8002dea:	6813      	ldr	r3, [r2, #0]
 8002dec:	b933      	cbnz	r3, 8002dfc <_free_r+0x2c>
 8002dee:	6063      	str	r3, [r4, #4]
 8002df0:	6014      	str	r4, [r2, #0]
 8002df2:	4628      	mov	r0, r5
 8002df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002df8:	f000 b8dc 	b.w	8002fb4 <__malloc_unlock>
 8002dfc:	42a3      	cmp	r3, r4
 8002dfe:	d908      	bls.n	8002e12 <_free_r+0x42>
 8002e00:	6820      	ldr	r0, [r4, #0]
 8002e02:	1821      	adds	r1, r4, r0
 8002e04:	428b      	cmp	r3, r1
 8002e06:	bf01      	itttt	eq
 8002e08:	6819      	ldreq	r1, [r3, #0]
 8002e0a:	685b      	ldreq	r3, [r3, #4]
 8002e0c:	1809      	addeq	r1, r1, r0
 8002e0e:	6021      	streq	r1, [r4, #0]
 8002e10:	e7ed      	b.n	8002dee <_free_r+0x1e>
 8002e12:	461a      	mov	r2, r3
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b10b      	cbz	r3, 8002e1c <_free_r+0x4c>
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	d9fa      	bls.n	8002e12 <_free_r+0x42>
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	1850      	adds	r0, r2, r1
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d10b      	bne.n	8002e3c <_free_r+0x6c>
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	4401      	add	r1, r0
 8002e28:	1850      	adds	r0, r2, r1
 8002e2a:	4283      	cmp	r3, r0
 8002e2c:	6011      	str	r1, [r2, #0]
 8002e2e:	d1e0      	bne.n	8002df2 <_free_r+0x22>
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	6053      	str	r3, [r2, #4]
 8002e36:	4408      	add	r0, r1
 8002e38:	6010      	str	r0, [r2, #0]
 8002e3a:	e7da      	b.n	8002df2 <_free_r+0x22>
 8002e3c:	d902      	bls.n	8002e44 <_free_r+0x74>
 8002e3e:	230c      	movs	r3, #12
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	e7d6      	b.n	8002df2 <_free_r+0x22>
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	1821      	adds	r1, r4, r0
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	bf04      	itt	eq
 8002e4c:	6819      	ldreq	r1, [r3, #0]
 8002e4e:	685b      	ldreq	r3, [r3, #4]
 8002e50:	6063      	str	r3, [r4, #4]
 8002e52:	bf04      	itt	eq
 8002e54:	1809      	addeq	r1, r1, r0
 8002e56:	6021      	streq	r1, [r4, #0]
 8002e58:	6054      	str	r4, [r2, #4]
 8002e5a:	e7ca      	b.n	8002df2 <_free_r+0x22>
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	200001f8 	.word	0x200001f8

08002e64 <sbrk_aligned>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4e0f      	ldr	r6, [pc, #60]	@ (8002ea4 <sbrk_aligned+0x40>)
 8002e68:	460c      	mov	r4, r1
 8002e6a:	6831      	ldr	r1, [r6, #0]
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	b911      	cbnz	r1, 8002e76 <sbrk_aligned+0x12>
 8002e70:	f000 fba6 	bl	80035c0 <_sbrk_r>
 8002e74:	6030      	str	r0, [r6, #0]
 8002e76:	4621      	mov	r1, r4
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f000 fba1 	bl	80035c0 <_sbrk_r>
 8002e7e:	1c43      	adds	r3, r0, #1
 8002e80:	d103      	bne.n	8002e8a <sbrk_aligned+0x26>
 8002e82:	f04f 34ff 	mov.w	r4, #4294967295
 8002e86:	4620      	mov	r0, r4
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	1cc4      	adds	r4, r0, #3
 8002e8c:	f024 0403 	bic.w	r4, r4, #3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	d0f8      	beq.n	8002e86 <sbrk_aligned+0x22>
 8002e94:	1a21      	subs	r1, r4, r0
 8002e96:	4628      	mov	r0, r5
 8002e98:	f000 fb92 	bl	80035c0 <_sbrk_r>
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d1f2      	bne.n	8002e86 <sbrk_aligned+0x22>
 8002ea0:	e7ef      	b.n	8002e82 <sbrk_aligned+0x1e>
 8002ea2:	bf00      	nop
 8002ea4:	200001f4 	.word	0x200001f4

08002ea8 <_malloc_r>:
 8002ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eac:	1ccd      	adds	r5, r1, #3
 8002eae:	f025 0503 	bic.w	r5, r5, #3
 8002eb2:	3508      	adds	r5, #8
 8002eb4:	2d0c      	cmp	r5, #12
 8002eb6:	bf38      	it	cc
 8002eb8:	250c      	movcc	r5, #12
 8002eba:	2d00      	cmp	r5, #0
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	db01      	blt.n	8002ec4 <_malloc_r+0x1c>
 8002ec0:	42a9      	cmp	r1, r5
 8002ec2:	d904      	bls.n	8002ece <_malloc_r+0x26>
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	6033      	str	r3, [r6, #0]
 8002ec8:	2000      	movs	r0, #0
 8002eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fa4 <_malloc_r+0xfc>
 8002ed2:	f000 f869 	bl	8002fa8 <__malloc_lock>
 8002ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eda:	461c      	mov	r4, r3
 8002edc:	bb44      	cbnz	r4, 8002f30 <_malloc_r+0x88>
 8002ede:	4629      	mov	r1, r5
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f7ff ffbf 	bl	8002e64 <sbrk_aligned>
 8002ee6:	1c43      	adds	r3, r0, #1
 8002ee8:	4604      	mov	r4, r0
 8002eea:	d158      	bne.n	8002f9e <_malloc_r+0xf6>
 8002eec:	f8d8 4000 	ldr.w	r4, [r8]
 8002ef0:	4627      	mov	r7, r4
 8002ef2:	2f00      	cmp	r7, #0
 8002ef4:	d143      	bne.n	8002f7e <_malloc_r+0xd6>
 8002ef6:	2c00      	cmp	r4, #0
 8002ef8:	d04b      	beq.n	8002f92 <_malloc_r+0xea>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	4639      	mov	r1, r7
 8002efe:	4630      	mov	r0, r6
 8002f00:	eb04 0903 	add.w	r9, r4, r3
 8002f04:	f000 fb5c 	bl	80035c0 <_sbrk_r>
 8002f08:	4581      	cmp	r9, r0
 8002f0a:	d142      	bne.n	8002f92 <_malloc_r+0xea>
 8002f0c:	6821      	ldr	r1, [r4, #0]
 8002f0e:	1a6d      	subs	r5, r5, r1
 8002f10:	4629      	mov	r1, r5
 8002f12:	4630      	mov	r0, r6
 8002f14:	f7ff ffa6 	bl	8002e64 <sbrk_aligned>
 8002f18:	3001      	adds	r0, #1
 8002f1a:	d03a      	beq.n	8002f92 <_malloc_r+0xea>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	442b      	add	r3, r5
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	f8d8 3000 	ldr.w	r3, [r8]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	bb62      	cbnz	r2, 8002f84 <_malloc_r+0xdc>
 8002f2a:	f8c8 7000 	str.w	r7, [r8]
 8002f2e:	e00f      	b.n	8002f50 <_malloc_r+0xa8>
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	1b52      	subs	r2, r2, r5
 8002f34:	d420      	bmi.n	8002f78 <_malloc_r+0xd0>
 8002f36:	2a0b      	cmp	r2, #11
 8002f38:	d917      	bls.n	8002f6a <_malloc_r+0xc2>
 8002f3a:	1961      	adds	r1, r4, r5
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	6025      	str	r5, [r4, #0]
 8002f40:	bf18      	it	ne
 8002f42:	6059      	strne	r1, [r3, #4]
 8002f44:	6863      	ldr	r3, [r4, #4]
 8002f46:	bf08      	it	eq
 8002f48:	f8c8 1000 	streq.w	r1, [r8]
 8002f4c:	5162      	str	r2, [r4, r5]
 8002f4e:	604b      	str	r3, [r1, #4]
 8002f50:	4630      	mov	r0, r6
 8002f52:	f000 f82f 	bl	8002fb4 <__malloc_unlock>
 8002f56:	f104 000b 	add.w	r0, r4, #11
 8002f5a:	1d23      	adds	r3, r4, #4
 8002f5c:	f020 0007 	bic.w	r0, r0, #7
 8002f60:	1ac2      	subs	r2, r0, r3
 8002f62:	bf1c      	itt	ne
 8002f64:	1a1b      	subne	r3, r3, r0
 8002f66:	50a3      	strne	r3, [r4, r2]
 8002f68:	e7af      	b.n	8002eca <_malloc_r+0x22>
 8002f6a:	6862      	ldr	r2, [r4, #4]
 8002f6c:	42a3      	cmp	r3, r4
 8002f6e:	bf0c      	ite	eq
 8002f70:	f8c8 2000 	streq.w	r2, [r8]
 8002f74:	605a      	strne	r2, [r3, #4]
 8002f76:	e7eb      	b.n	8002f50 <_malloc_r+0xa8>
 8002f78:	4623      	mov	r3, r4
 8002f7a:	6864      	ldr	r4, [r4, #4]
 8002f7c:	e7ae      	b.n	8002edc <_malloc_r+0x34>
 8002f7e:	463c      	mov	r4, r7
 8002f80:	687f      	ldr	r7, [r7, #4]
 8002f82:	e7b6      	b.n	8002ef2 <_malloc_r+0x4a>
 8002f84:	461a      	mov	r2, r3
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	42a3      	cmp	r3, r4
 8002f8a:	d1fb      	bne.n	8002f84 <_malloc_r+0xdc>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6053      	str	r3, [r2, #4]
 8002f90:	e7de      	b.n	8002f50 <_malloc_r+0xa8>
 8002f92:	230c      	movs	r3, #12
 8002f94:	6033      	str	r3, [r6, #0]
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 f80c 	bl	8002fb4 <__malloc_unlock>
 8002f9c:	e794      	b.n	8002ec8 <_malloc_r+0x20>
 8002f9e:	6005      	str	r5, [r0, #0]
 8002fa0:	e7d6      	b.n	8002f50 <_malloc_r+0xa8>
 8002fa2:	bf00      	nop
 8002fa4:	200001f8 	.word	0x200001f8

08002fa8 <__malloc_lock>:
 8002fa8:	4801      	ldr	r0, [pc, #4]	@ (8002fb0 <__malloc_lock+0x8>)
 8002faa:	f7ff bf0f 	b.w	8002dcc <__retarget_lock_acquire_recursive>
 8002fae:	bf00      	nop
 8002fb0:	200001f0 	.word	0x200001f0

08002fb4 <__malloc_unlock>:
 8002fb4:	4801      	ldr	r0, [pc, #4]	@ (8002fbc <__malloc_unlock+0x8>)
 8002fb6:	f7ff bf0a 	b.w	8002dce <__retarget_lock_release_recursive>
 8002fba:	bf00      	nop
 8002fbc:	200001f0 	.word	0x200001f0

08002fc0 <__ssputs_r>:
 8002fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc4:	688e      	ldr	r6, [r1, #8]
 8002fc6:	461f      	mov	r7, r3
 8002fc8:	42be      	cmp	r6, r7
 8002fca:	680b      	ldr	r3, [r1, #0]
 8002fcc:	4682      	mov	sl, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	4690      	mov	r8, r2
 8002fd2:	d82d      	bhi.n	8003030 <__ssputs_r+0x70>
 8002fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002fdc:	d026      	beq.n	800302c <__ssputs_r+0x6c>
 8002fde:	6965      	ldr	r5, [r4, #20]
 8002fe0:	6909      	ldr	r1, [r1, #16]
 8002fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fe6:	eba3 0901 	sub.w	r9, r3, r1
 8002fea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fee:	1c7b      	adds	r3, r7, #1
 8002ff0:	444b      	add	r3, r9
 8002ff2:	106d      	asrs	r5, r5, #1
 8002ff4:	429d      	cmp	r5, r3
 8002ff6:	bf38      	it	cc
 8002ff8:	461d      	movcc	r5, r3
 8002ffa:	0553      	lsls	r3, r2, #21
 8002ffc:	d527      	bpl.n	800304e <__ssputs_r+0x8e>
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7ff ff52 	bl	8002ea8 <_malloc_r>
 8003004:	4606      	mov	r6, r0
 8003006:	b360      	cbz	r0, 8003062 <__ssputs_r+0xa2>
 8003008:	6921      	ldr	r1, [r4, #16]
 800300a:	464a      	mov	r2, r9
 800300c:	f000 fae8 	bl	80035e0 <memcpy>
 8003010:	89a3      	ldrh	r3, [r4, #12]
 8003012:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800301a:	81a3      	strh	r3, [r4, #12]
 800301c:	6126      	str	r6, [r4, #16]
 800301e:	6165      	str	r5, [r4, #20]
 8003020:	444e      	add	r6, r9
 8003022:	eba5 0509 	sub.w	r5, r5, r9
 8003026:	6026      	str	r6, [r4, #0]
 8003028:	60a5      	str	r5, [r4, #8]
 800302a:	463e      	mov	r6, r7
 800302c:	42be      	cmp	r6, r7
 800302e:	d900      	bls.n	8003032 <__ssputs_r+0x72>
 8003030:	463e      	mov	r6, r7
 8003032:	6820      	ldr	r0, [r4, #0]
 8003034:	4632      	mov	r2, r6
 8003036:	4641      	mov	r1, r8
 8003038:	f000 faa8 	bl	800358c <memmove>
 800303c:	68a3      	ldr	r3, [r4, #8]
 800303e:	1b9b      	subs	r3, r3, r6
 8003040:	60a3      	str	r3, [r4, #8]
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	4433      	add	r3, r6
 8003046:	6023      	str	r3, [r4, #0]
 8003048:	2000      	movs	r0, #0
 800304a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304e:	462a      	mov	r2, r5
 8003050:	f000 fad4 	bl	80035fc <_realloc_r>
 8003054:	4606      	mov	r6, r0
 8003056:	2800      	cmp	r0, #0
 8003058:	d1e0      	bne.n	800301c <__ssputs_r+0x5c>
 800305a:	6921      	ldr	r1, [r4, #16]
 800305c:	4650      	mov	r0, sl
 800305e:	f7ff feb7 	bl	8002dd0 <_free_r>
 8003062:	230c      	movs	r3, #12
 8003064:	f8ca 3000 	str.w	r3, [sl]
 8003068:	89a3      	ldrh	r3, [r4, #12]
 800306a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800306e:	81a3      	strh	r3, [r4, #12]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	e7e9      	b.n	800304a <__ssputs_r+0x8a>
	...

08003078 <_svfiprintf_r>:
 8003078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800307c:	4698      	mov	r8, r3
 800307e:	898b      	ldrh	r3, [r1, #12]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	b09d      	sub	sp, #116	@ 0x74
 8003084:	4607      	mov	r7, r0
 8003086:	460d      	mov	r5, r1
 8003088:	4614      	mov	r4, r2
 800308a:	d510      	bpl.n	80030ae <_svfiprintf_r+0x36>
 800308c:	690b      	ldr	r3, [r1, #16]
 800308e:	b973      	cbnz	r3, 80030ae <_svfiprintf_r+0x36>
 8003090:	2140      	movs	r1, #64	@ 0x40
 8003092:	f7ff ff09 	bl	8002ea8 <_malloc_r>
 8003096:	6028      	str	r0, [r5, #0]
 8003098:	6128      	str	r0, [r5, #16]
 800309a:	b930      	cbnz	r0, 80030aa <_svfiprintf_r+0x32>
 800309c:	230c      	movs	r3, #12
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	b01d      	add	sp, #116	@ 0x74
 80030a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030aa:	2340      	movs	r3, #64	@ 0x40
 80030ac:	616b      	str	r3, [r5, #20]
 80030ae:	2300      	movs	r3, #0
 80030b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80030b2:	2320      	movs	r3, #32
 80030b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80030bc:	2330      	movs	r3, #48	@ 0x30
 80030be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800325c <_svfiprintf_r+0x1e4>
 80030c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030c6:	f04f 0901 	mov.w	r9, #1
 80030ca:	4623      	mov	r3, r4
 80030cc:	469a      	mov	sl, r3
 80030ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030d2:	b10a      	cbz	r2, 80030d8 <_svfiprintf_r+0x60>
 80030d4:	2a25      	cmp	r2, #37	@ 0x25
 80030d6:	d1f9      	bne.n	80030cc <_svfiprintf_r+0x54>
 80030d8:	ebba 0b04 	subs.w	fp, sl, r4
 80030dc:	d00b      	beq.n	80030f6 <_svfiprintf_r+0x7e>
 80030de:	465b      	mov	r3, fp
 80030e0:	4622      	mov	r2, r4
 80030e2:	4629      	mov	r1, r5
 80030e4:	4638      	mov	r0, r7
 80030e6:	f7ff ff6b 	bl	8002fc0 <__ssputs_r>
 80030ea:	3001      	adds	r0, #1
 80030ec:	f000 80a7 	beq.w	800323e <_svfiprintf_r+0x1c6>
 80030f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030f2:	445a      	add	r2, fp
 80030f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80030f6:	f89a 3000 	ldrb.w	r3, [sl]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 809f 	beq.w	800323e <_svfiprintf_r+0x1c6>
 8003100:	2300      	movs	r3, #0
 8003102:	f04f 32ff 	mov.w	r2, #4294967295
 8003106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800310a:	f10a 0a01 	add.w	sl, sl, #1
 800310e:	9304      	str	r3, [sp, #16]
 8003110:	9307      	str	r3, [sp, #28]
 8003112:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003116:	931a      	str	r3, [sp, #104]	@ 0x68
 8003118:	4654      	mov	r4, sl
 800311a:	2205      	movs	r2, #5
 800311c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003120:	484e      	ldr	r0, [pc, #312]	@ (800325c <_svfiprintf_r+0x1e4>)
 8003122:	f7fd f85d 	bl	80001e0 <memchr>
 8003126:	9a04      	ldr	r2, [sp, #16]
 8003128:	b9d8      	cbnz	r0, 8003162 <_svfiprintf_r+0xea>
 800312a:	06d0      	lsls	r0, r2, #27
 800312c:	bf44      	itt	mi
 800312e:	2320      	movmi	r3, #32
 8003130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003134:	0711      	lsls	r1, r2, #28
 8003136:	bf44      	itt	mi
 8003138:	232b      	movmi	r3, #43	@ 0x2b
 800313a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800313e:	f89a 3000 	ldrb.w	r3, [sl]
 8003142:	2b2a      	cmp	r3, #42	@ 0x2a
 8003144:	d015      	beq.n	8003172 <_svfiprintf_r+0xfa>
 8003146:	9a07      	ldr	r2, [sp, #28]
 8003148:	4654      	mov	r4, sl
 800314a:	2000      	movs	r0, #0
 800314c:	f04f 0c0a 	mov.w	ip, #10
 8003150:	4621      	mov	r1, r4
 8003152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003156:	3b30      	subs	r3, #48	@ 0x30
 8003158:	2b09      	cmp	r3, #9
 800315a:	d94b      	bls.n	80031f4 <_svfiprintf_r+0x17c>
 800315c:	b1b0      	cbz	r0, 800318c <_svfiprintf_r+0x114>
 800315e:	9207      	str	r2, [sp, #28]
 8003160:	e014      	b.n	800318c <_svfiprintf_r+0x114>
 8003162:	eba0 0308 	sub.w	r3, r0, r8
 8003166:	fa09 f303 	lsl.w	r3, r9, r3
 800316a:	4313      	orrs	r3, r2
 800316c:	9304      	str	r3, [sp, #16]
 800316e:	46a2      	mov	sl, r4
 8003170:	e7d2      	b.n	8003118 <_svfiprintf_r+0xa0>
 8003172:	9b03      	ldr	r3, [sp, #12]
 8003174:	1d19      	adds	r1, r3, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	9103      	str	r1, [sp, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	bfbb      	ittet	lt
 800317e:	425b      	neglt	r3, r3
 8003180:	f042 0202 	orrlt.w	r2, r2, #2
 8003184:	9307      	strge	r3, [sp, #28]
 8003186:	9307      	strlt	r3, [sp, #28]
 8003188:	bfb8      	it	lt
 800318a:	9204      	strlt	r2, [sp, #16]
 800318c:	7823      	ldrb	r3, [r4, #0]
 800318e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003190:	d10a      	bne.n	80031a8 <_svfiprintf_r+0x130>
 8003192:	7863      	ldrb	r3, [r4, #1]
 8003194:	2b2a      	cmp	r3, #42	@ 0x2a
 8003196:	d132      	bne.n	80031fe <_svfiprintf_r+0x186>
 8003198:	9b03      	ldr	r3, [sp, #12]
 800319a:	1d1a      	adds	r2, r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	9203      	str	r2, [sp, #12]
 80031a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031a4:	3402      	adds	r4, #2
 80031a6:	9305      	str	r3, [sp, #20]
 80031a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800326c <_svfiprintf_r+0x1f4>
 80031ac:	7821      	ldrb	r1, [r4, #0]
 80031ae:	2203      	movs	r2, #3
 80031b0:	4650      	mov	r0, sl
 80031b2:	f7fd f815 	bl	80001e0 <memchr>
 80031b6:	b138      	cbz	r0, 80031c8 <_svfiprintf_r+0x150>
 80031b8:	9b04      	ldr	r3, [sp, #16]
 80031ba:	eba0 000a 	sub.w	r0, r0, sl
 80031be:	2240      	movs	r2, #64	@ 0x40
 80031c0:	4082      	lsls	r2, r0
 80031c2:	4313      	orrs	r3, r2
 80031c4:	3401      	adds	r4, #1
 80031c6:	9304      	str	r3, [sp, #16]
 80031c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031cc:	4824      	ldr	r0, [pc, #144]	@ (8003260 <_svfiprintf_r+0x1e8>)
 80031ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031d2:	2206      	movs	r2, #6
 80031d4:	f7fd f804 	bl	80001e0 <memchr>
 80031d8:	2800      	cmp	r0, #0
 80031da:	d036      	beq.n	800324a <_svfiprintf_r+0x1d2>
 80031dc:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <_svfiprintf_r+0x1ec>)
 80031de:	bb1b      	cbnz	r3, 8003228 <_svfiprintf_r+0x1b0>
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	3307      	adds	r3, #7
 80031e4:	f023 0307 	bic.w	r3, r3, #7
 80031e8:	3308      	adds	r3, #8
 80031ea:	9303      	str	r3, [sp, #12]
 80031ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031ee:	4433      	add	r3, r6
 80031f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80031f2:	e76a      	b.n	80030ca <_svfiprintf_r+0x52>
 80031f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80031f8:	460c      	mov	r4, r1
 80031fa:	2001      	movs	r0, #1
 80031fc:	e7a8      	b.n	8003150 <_svfiprintf_r+0xd8>
 80031fe:	2300      	movs	r3, #0
 8003200:	3401      	adds	r4, #1
 8003202:	9305      	str	r3, [sp, #20]
 8003204:	4619      	mov	r1, r3
 8003206:	f04f 0c0a 	mov.w	ip, #10
 800320a:	4620      	mov	r0, r4
 800320c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003210:	3a30      	subs	r2, #48	@ 0x30
 8003212:	2a09      	cmp	r2, #9
 8003214:	d903      	bls.n	800321e <_svfiprintf_r+0x1a6>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0c6      	beq.n	80031a8 <_svfiprintf_r+0x130>
 800321a:	9105      	str	r1, [sp, #20]
 800321c:	e7c4      	b.n	80031a8 <_svfiprintf_r+0x130>
 800321e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003222:	4604      	mov	r4, r0
 8003224:	2301      	movs	r3, #1
 8003226:	e7f0      	b.n	800320a <_svfiprintf_r+0x192>
 8003228:	ab03      	add	r3, sp, #12
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	462a      	mov	r2, r5
 800322e:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <_svfiprintf_r+0x1f0>)
 8003230:	a904      	add	r1, sp, #16
 8003232:	4638      	mov	r0, r7
 8003234:	f3af 8000 	nop.w
 8003238:	1c42      	adds	r2, r0, #1
 800323a:	4606      	mov	r6, r0
 800323c:	d1d6      	bne.n	80031ec <_svfiprintf_r+0x174>
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	065b      	lsls	r3, r3, #25
 8003242:	f53f af2d 	bmi.w	80030a0 <_svfiprintf_r+0x28>
 8003246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003248:	e72c      	b.n	80030a4 <_svfiprintf_r+0x2c>
 800324a:	ab03      	add	r3, sp, #12
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	462a      	mov	r2, r5
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <_svfiprintf_r+0x1f0>)
 8003252:	a904      	add	r1, sp, #16
 8003254:	4638      	mov	r0, r7
 8003256:	f000 f879 	bl	800334c <_printf_i>
 800325a:	e7ed      	b.n	8003238 <_svfiprintf_r+0x1c0>
 800325c:	08003790 	.word	0x08003790
 8003260:	0800379a 	.word	0x0800379a
 8003264:	00000000 	.word	0x00000000
 8003268:	08002fc1 	.word	0x08002fc1
 800326c:	08003796 	.word	0x08003796

08003270 <_printf_common>:
 8003270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003274:	4616      	mov	r6, r2
 8003276:	4698      	mov	r8, r3
 8003278:	688a      	ldr	r2, [r1, #8]
 800327a:	690b      	ldr	r3, [r1, #16]
 800327c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003280:	4293      	cmp	r3, r2
 8003282:	bfb8      	it	lt
 8003284:	4613      	movlt	r3, r2
 8003286:	6033      	str	r3, [r6, #0]
 8003288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800328c:	4607      	mov	r7, r0
 800328e:	460c      	mov	r4, r1
 8003290:	b10a      	cbz	r2, 8003296 <_printf_common+0x26>
 8003292:	3301      	adds	r3, #1
 8003294:	6033      	str	r3, [r6, #0]
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	0699      	lsls	r1, r3, #26
 800329a:	bf42      	ittt	mi
 800329c:	6833      	ldrmi	r3, [r6, #0]
 800329e:	3302      	addmi	r3, #2
 80032a0:	6033      	strmi	r3, [r6, #0]
 80032a2:	6825      	ldr	r5, [r4, #0]
 80032a4:	f015 0506 	ands.w	r5, r5, #6
 80032a8:	d106      	bne.n	80032b8 <_printf_common+0x48>
 80032aa:	f104 0a19 	add.w	sl, r4, #25
 80032ae:	68e3      	ldr	r3, [r4, #12]
 80032b0:	6832      	ldr	r2, [r6, #0]
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	42ab      	cmp	r3, r5
 80032b6:	dc26      	bgt.n	8003306 <_printf_common+0x96>
 80032b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	3b00      	subs	r3, #0
 80032c0:	bf18      	it	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	0692      	lsls	r2, r2, #26
 80032c6:	d42b      	bmi.n	8003320 <_printf_common+0xb0>
 80032c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032cc:	4641      	mov	r1, r8
 80032ce:	4638      	mov	r0, r7
 80032d0:	47c8      	blx	r9
 80032d2:	3001      	adds	r0, #1
 80032d4:	d01e      	beq.n	8003314 <_printf_common+0xa4>
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	6922      	ldr	r2, [r4, #16]
 80032da:	f003 0306 	and.w	r3, r3, #6
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf02      	ittt	eq
 80032e2:	68e5      	ldreq	r5, [r4, #12]
 80032e4:	6833      	ldreq	r3, [r6, #0]
 80032e6:	1aed      	subeq	r5, r5, r3
 80032e8:	68a3      	ldr	r3, [r4, #8]
 80032ea:	bf0c      	ite	eq
 80032ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032f0:	2500      	movne	r5, #0
 80032f2:	4293      	cmp	r3, r2
 80032f4:	bfc4      	itt	gt
 80032f6:	1a9b      	subgt	r3, r3, r2
 80032f8:	18ed      	addgt	r5, r5, r3
 80032fa:	2600      	movs	r6, #0
 80032fc:	341a      	adds	r4, #26
 80032fe:	42b5      	cmp	r5, r6
 8003300:	d11a      	bne.n	8003338 <_printf_common+0xc8>
 8003302:	2000      	movs	r0, #0
 8003304:	e008      	b.n	8003318 <_printf_common+0xa8>
 8003306:	2301      	movs	r3, #1
 8003308:	4652      	mov	r2, sl
 800330a:	4641      	mov	r1, r8
 800330c:	4638      	mov	r0, r7
 800330e:	47c8      	blx	r9
 8003310:	3001      	adds	r0, #1
 8003312:	d103      	bne.n	800331c <_printf_common+0xac>
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331c:	3501      	adds	r5, #1
 800331e:	e7c6      	b.n	80032ae <_printf_common+0x3e>
 8003320:	18e1      	adds	r1, r4, r3
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	2030      	movs	r0, #48	@ 0x30
 8003326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800332a:	4422      	add	r2, r4
 800332c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003334:	3302      	adds	r3, #2
 8003336:	e7c7      	b.n	80032c8 <_printf_common+0x58>
 8003338:	2301      	movs	r3, #1
 800333a:	4622      	mov	r2, r4
 800333c:	4641      	mov	r1, r8
 800333e:	4638      	mov	r0, r7
 8003340:	47c8      	blx	r9
 8003342:	3001      	adds	r0, #1
 8003344:	d0e6      	beq.n	8003314 <_printf_common+0xa4>
 8003346:	3601      	adds	r6, #1
 8003348:	e7d9      	b.n	80032fe <_printf_common+0x8e>
	...

0800334c <_printf_i>:
 800334c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003350:	7e0f      	ldrb	r7, [r1, #24]
 8003352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003354:	2f78      	cmp	r7, #120	@ 0x78
 8003356:	4691      	mov	r9, r2
 8003358:	4680      	mov	r8, r0
 800335a:	460c      	mov	r4, r1
 800335c:	469a      	mov	sl, r3
 800335e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003362:	d807      	bhi.n	8003374 <_printf_i+0x28>
 8003364:	2f62      	cmp	r7, #98	@ 0x62
 8003366:	d80a      	bhi.n	800337e <_printf_i+0x32>
 8003368:	2f00      	cmp	r7, #0
 800336a:	f000 80d2 	beq.w	8003512 <_printf_i+0x1c6>
 800336e:	2f58      	cmp	r7, #88	@ 0x58
 8003370:	f000 80b9 	beq.w	80034e6 <_printf_i+0x19a>
 8003374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800337c:	e03a      	b.n	80033f4 <_printf_i+0xa8>
 800337e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003382:	2b15      	cmp	r3, #21
 8003384:	d8f6      	bhi.n	8003374 <_printf_i+0x28>
 8003386:	a101      	add	r1, pc, #4	@ (adr r1, 800338c <_printf_i+0x40>)
 8003388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800338c:	080033e5 	.word	0x080033e5
 8003390:	080033f9 	.word	0x080033f9
 8003394:	08003375 	.word	0x08003375
 8003398:	08003375 	.word	0x08003375
 800339c:	08003375 	.word	0x08003375
 80033a0:	08003375 	.word	0x08003375
 80033a4:	080033f9 	.word	0x080033f9
 80033a8:	08003375 	.word	0x08003375
 80033ac:	08003375 	.word	0x08003375
 80033b0:	08003375 	.word	0x08003375
 80033b4:	08003375 	.word	0x08003375
 80033b8:	080034f9 	.word	0x080034f9
 80033bc:	08003423 	.word	0x08003423
 80033c0:	080034b3 	.word	0x080034b3
 80033c4:	08003375 	.word	0x08003375
 80033c8:	08003375 	.word	0x08003375
 80033cc:	0800351b 	.word	0x0800351b
 80033d0:	08003375 	.word	0x08003375
 80033d4:	08003423 	.word	0x08003423
 80033d8:	08003375 	.word	0x08003375
 80033dc:	08003375 	.word	0x08003375
 80033e0:	080034bb 	.word	0x080034bb
 80033e4:	6833      	ldr	r3, [r6, #0]
 80033e6:	1d1a      	adds	r2, r3, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6032      	str	r2, [r6, #0]
 80033ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033f4:	2301      	movs	r3, #1
 80033f6:	e09d      	b.n	8003534 <_printf_i+0x1e8>
 80033f8:	6833      	ldr	r3, [r6, #0]
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	1d19      	adds	r1, r3, #4
 80033fe:	6031      	str	r1, [r6, #0]
 8003400:	0606      	lsls	r6, r0, #24
 8003402:	d501      	bpl.n	8003408 <_printf_i+0xbc>
 8003404:	681d      	ldr	r5, [r3, #0]
 8003406:	e003      	b.n	8003410 <_printf_i+0xc4>
 8003408:	0645      	lsls	r5, r0, #25
 800340a:	d5fb      	bpl.n	8003404 <_printf_i+0xb8>
 800340c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003410:	2d00      	cmp	r5, #0
 8003412:	da03      	bge.n	800341c <_printf_i+0xd0>
 8003414:	232d      	movs	r3, #45	@ 0x2d
 8003416:	426d      	negs	r5, r5
 8003418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800341c:	4859      	ldr	r0, [pc, #356]	@ (8003584 <_printf_i+0x238>)
 800341e:	230a      	movs	r3, #10
 8003420:	e011      	b.n	8003446 <_printf_i+0xfa>
 8003422:	6821      	ldr	r1, [r4, #0]
 8003424:	6833      	ldr	r3, [r6, #0]
 8003426:	0608      	lsls	r0, r1, #24
 8003428:	f853 5b04 	ldr.w	r5, [r3], #4
 800342c:	d402      	bmi.n	8003434 <_printf_i+0xe8>
 800342e:	0649      	lsls	r1, r1, #25
 8003430:	bf48      	it	mi
 8003432:	b2ad      	uxthmi	r5, r5
 8003434:	2f6f      	cmp	r7, #111	@ 0x6f
 8003436:	4853      	ldr	r0, [pc, #332]	@ (8003584 <_printf_i+0x238>)
 8003438:	6033      	str	r3, [r6, #0]
 800343a:	bf14      	ite	ne
 800343c:	230a      	movne	r3, #10
 800343e:	2308      	moveq	r3, #8
 8003440:	2100      	movs	r1, #0
 8003442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003446:	6866      	ldr	r6, [r4, #4]
 8003448:	60a6      	str	r6, [r4, #8]
 800344a:	2e00      	cmp	r6, #0
 800344c:	bfa2      	ittt	ge
 800344e:	6821      	ldrge	r1, [r4, #0]
 8003450:	f021 0104 	bicge.w	r1, r1, #4
 8003454:	6021      	strge	r1, [r4, #0]
 8003456:	b90d      	cbnz	r5, 800345c <_printf_i+0x110>
 8003458:	2e00      	cmp	r6, #0
 800345a:	d04b      	beq.n	80034f4 <_printf_i+0x1a8>
 800345c:	4616      	mov	r6, r2
 800345e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003462:	fb03 5711 	mls	r7, r3, r1, r5
 8003466:	5dc7      	ldrb	r7, [r0, r7]
 8003468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800346c:	462f      	mov	r7, r5
 800346e:	42bb      	cmp	r3, r7
 8003470:	460d      	mov	r5, r1
 8003472:	d9f4      	bls.n	800345e <_printf_i+0x112>
 8003474:	2b08      	cmp	r3, #8
 8003476:	d10b      	bne.n	8003490 <_printf_i+0x144>
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	07df      	lsls	r7, r3, #31
 800347c:	d508      	bpl.n	8003490 <_printf_i+0x144>
 800347e:	6923      	ldr	r3, [r4, #16]
 8003480:	6861      	ldr	r1, [r4, #4]
 8003482:	4299      	cmp	r1, r3
 8003484:	bfde      	ittt	le
 8003486:	2330      	movle	r3, #48	@ 0x30
 8003488:	f806 3c01 	strble.w	r3, [r6, #-1]
 800348c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003490:	1b92      	subs	r2, r2, r6
 8003492:	6122      	str	r2, [r4, #16]
 8003494:	f8cd a000 	str.w	sl, [sp]
 8003498:	464b      	mov	r3, r9
 800349a:	aa03      	add	r2, sp, #12
 800349c:	4621      	mov	r1, r4
 800349e:	4640      	mov	r0, r8
 80034a0:	f7ff fee6 	bl	8003270 <_printf_common>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d14a      	bne.n	800353e <_printf_i+0x1f2>
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	b004      	add	sp, #16
 80034ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	f043 0320 	orr.w	r3, r3, #32
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	4833      	ldr	r0, [pc, #204]	@ (8003588 <_printf_i+0x23c>)
 80034bc:	2778      	movs	r7, #120	@ 0x78
 80034be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	6831      	ldr	r1, [r6, #0]
 80034c6:	061f      	lsls	r7, r3, #24
 80034c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80034cc:	d402      	bmi.n	80034d4 <_printf_i+0x188>
 80034ce:	065f      	lsls	r7, r3, #25
 80034d0:	bf48      	it	mi
 80034d2:	b2ad      	uxthmi	r5, r5
 80034d4:	6031      	str	r1, [r6, #0]
 80034d6:	07d9      	lsls	r1, r3, #31
 80034d8:	bf44      	itt	mi
 80034da:	f043 0320 	orrmi.w	r3, r3, #32
 80034de:	6023      	strmi	r3, [r4, #0]
 80034e0:	b11d      	cbz	r5, 80034ea <_printf_i+0x19e>
 80034e2:	2310      	movs	r3, #16
 80034e4:	e7ac      	b.n	8003440 <_printf_i+0xf4>
 80034e6:	4827      	ldr	r0, [pc, #156]	@ (8003584 <_printf_i+0x238>)
 80034e8:	e7e9      	b.n	80034be <_printf_i+0x172>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	f023 0320 	bic.w	r3, r3, #32
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	e7f6      	b.n	80034e2 <_printf_i+0x196>
 80034f4:	4616      	mov	r6, r2
 80034f6:	e7bd      	b.n	8003474 <_printf_i+0x128>
 80034f8:	6833      	ldr	r3, [r6, #0]
 80034fa:	6825      	ldr	r5, [r4, #0]
 80034fc:	6961      	ldr	r1, [r4, #20]
 80034fe:	1d18      	adds	r0, r3, #4
 8003500:	6030      	str	r0, [r6, #0]
 8003502:	062e      	lsls	r6, r5, #24
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	d501      	bpl.n	800350c <_printf_i+0x1c0>
 8003508:	6019      	str	r1, [r3, #0]
 800350a:	e002      	b.n	8003512 <_printf_i+0x1c6>
 800350c:	0668      	lsls	r0, r5, #25
 800350e:	d5fb      	bpl.n	8003508 <_printf_i+0x1bc>
 8003510:	8019      	strh	r1, [r3, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	6123      	str	r3, [r4, #16]
 8003516:	4616      	mov	r6, r2
 8003518:	e7bc      	b.n	8003494 <_printf_i+0x148>
 800351a:	6833      	ldr	r3, [r6, #0]
 800351c:	1d1a      	adds	r2, r3, #4
 800351e:	6032      	str	r2, [r6, #0]
 8003520:	681e      	ldr	r6, [r3, #0]
 8003522:	6862      	ldr	r2, [r4, #4]
 8003524:	2100      	movs	r1, #0
 8003526:	4630      	mov	r0, r6
 8003528:	f7fc fe5a 	bl	80001e0 <memchr>
 800352c:	b108      	cbz	r0, 8003532 <_printf_i+0x1e6>
 800352e:	1b80      	subs	r0, r0, r6
 8003530:	6060      	str	r0, [r4, #4]
 8003532:	6863      	ldr	r3, [r4, #4]
 8003534:	6123      	str	r3, [r4, #16]
 8003536:	2300      	movs	r3, #0
 8003538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800353c:	e7aa      	b.n	8003494 <_printf_i+0x148>
 800353e:	6923      	ldr	r3, [r4, #16]
 8003540:	4632      	mov	r2, r6
 8003542:	4649      	mov	r1, r9
 8003544:	4640      	mov	r0, r8
 8003546:	47d0      	blx	sl
 8003548:	3001      	adds	r0, #1
 800354a:	d0ad      	beq.n	80034a8 <_printf_i+0x15c>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	079b      	lsls	r3, r3, #30
 8003550:	d413      	bmi.n	800357a <_printf_i+0x22e>
 8003552:	68e0      	ldr	r0, [r4, #12]
 8003554:	9b03      	ldr	r3, [sp, #12]
 8003556:	4298      	cmp	r0, r3
 8003558:	bfb8      	it	lt
 800355a:	4618      	movlt	r0, r3
 800355c:	e7a6      	b.n	80034ac <_printf_i+0x160>
 800355e:	2301      	movs	r3, #1
 8003560:	4632      	mov	r2, r6
 8003562:	4649      	mov	r1, r9
 8003564:	4640      	mov	r0, r8
 8003566:	47d0      	blx	sl
 8003568:	3001      	adds	r0, #1
 800356a:	d09d      	beq.n	80034a8 <_printf_i+0x15c>
 800356c:	3501      	adds	r5, #1
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	9903      	ldr	r1, [sp, #12]
 8003572:	1a5b      	subs	r3, r3, r1
 8003574:	42ab      	cmp	r3, r5
 8003576:	dcf2      	bgt.n	800355e <_printf_i+0x212>
 8003578:	e7eb      	b.n	8003552 <_printf_i+0x206>
 800357a:	2500      	movs	r5, #0
 800357c:	f104 0619 	add.w	r6, r4, #25
 8003580:	e7f5      	b.n	800356e <_printf_i+0x222>
 8003582:	bf00      	nop
 8003584:	080037a1 	.word	0x080037a1
 8003588:	080037b2 	.word	0x080037b2

0800358c <memmove>:
 800358c:	4288      	cmp	r0, r1
 800358e:	b510      	push	{r4, lr}
 8003590:	eb01 0402 	add.w	r4, r1, r2
 8003594:	d902      	bls.n	800359c <memmove+0x10>
 8003596:	4284      	cmp	r4, r0
 8003598:	4623      	mov	r3, r4
 800359a:	d807      	bhi.n	80035ac <memmove+0x20>
 800359c:	1e43      	subs	r3, r0, #1
 800359e:	42a1      	cmp	r1, r4
 80035a0:	d008      	beq.n	80035b4 <memmove+0x28>
 80035a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035aa:	e7f8      	b.n	800359e <memmove+0x12>
 80035ac:	4402      	add	r2, r0
 80035ae:	4601      	mov	r1, r0
 80035b0:	428a      	cmp	r2, r1
 80035b2:	d100      	bne.n	80035b6 <memmove+0x2a>
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035be:	e7f7      	b.n	80035b0 <memmove+0x24>

080035c0 <_sbrk_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	4d06      	ldr	r5, [pc, #24]	@ (80035dc <_sbrk_r+0x1c>)
 80035c4:	2300      	movs	r3, #0
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	602b      	str	r3, [r5, #0]
 80035cc:	f7fe fcce 	bl	8001f6c <_sbrk>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_sbrk_r+0x1a>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_sbrk_r+0x1a>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	200001ec 	.word	0x200001ec

080035e0 <memcpy>:
 80035e0:	440a      	add	r2, r1
 80035e2:	4291      	cmp	r1, r2
 80035e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035e8:	d100      	bne.n	80035ec <memcpy+0xc>
 80035ea:	4770      	bx	lr
 80035ec:	b510      	push	{r4, lr}
 80035ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035f6:	4291      	cmp	r1, r2
 80035f8:	d1f9      	bne.n	80035ee <memcpy+0xe>
 80035fa:	bd10      	pop	{r4, pc}

080035fc <_realloc_r>:
 80035fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003600:	4680      	mov	r8, r0
 8003602:	4615      	mov	r5, r2
 8003604:	460c      	mov	r4, r1
 8003606:	b921      	cbnz	r1, 8003612 <_realloc_r+0x16>
 8003608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	4611      	mov	r1, r2
 800360e:	f7ff bc4b 	b.w	8002ea8 <_malloc_r>
 8003612:	b92a      	cbnz	r2, 8003620 <_realloc_r+0x24>
 8003614:	f7ff fbdc 	bl	8002dd0 <_free_r>
 8003618:	2400      	movs	r4, #0
 800361a:	4620      	mov	r0, r4
 800361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003620:	f000 f81a 	bl	8003658 <_malloc_usable_size_r>
 8003624:	4285      	cmp	r5, r0
 8003626:	4606      	mov	r6, r0
 8003628:	d802      	bhi.n	8003630 <_realloc_r+0x34>
 800362a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800362e:	d8f4      	bhi.n	800361a <_realloc_r+0x1e>
 8003630:	4629      	mov	r1, r5
 8003632:	4640      	mov	r0, r8
 8003634:	f7ff fc38 	bl	8002ea8 <_malloc_r>
 8003638:	4607      	mov	r7, r0
 800363a:	2800      	cmp	r0, #0
 800363c:	d0ec      	beq.n	8003618 <_realloc_r+0x1c>
 800363e:	42b5      	cmp	r5, r6
 8003640:	462a      	mov	r2, r5
 8003642:	4621      	mov	r1, r4
 8003644:	bf28      	it	cs
 8003646:	4632      	movcs	r2, r6
 8003648:	f7ff ffca 	bl	80035e0 <memcpy>
 800364c:	4621      	mov	r1, r4
 800364e:	4640      	mov	r0, r8
 8003650:	f7ff fbbe 	bl	8002dd0 <_free_r>
 8003654:	463c      	mov	r4, r7
 8003656:	e7e0      	b.n	800361a <_realloc_r+0x1e>

08003658 <_malloc_usable_size_r>:
 8003658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800365c:	1f18      	subs	r0, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	bfbc      	itt	lt
 8003662:	580b      	ldrlt	r3, [r1, r0]
 8003664:	18c0      	addlt	r0, r0, r3
 8003666:	4770      	bx	lr

08003668 <ceil>:
 8003668:	ec51 0b10 	vmov	r0, r1, d0
 800366c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8003678:	2e13      	cmp	r6, #19
 800367a:	460c      	mov	r4, r1
 800367c:	4605      	mov	r5, r0
 800367e:	4680      	mov	r8, r0
 8003680:	dc2e      	bgt.n	80036e0 <ceil+0x78>
 8003682:	2e00      	cmp	r6, #0
 8003684:	da11      	bge.n	80036aa <ceil+0x42>
 8003686:	a332      	add	r3, pc, #200	@ (adr r3, 8003750 <ceil+0xe8>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc fdfe 	bl	800028c <__adddf3>
 8003690:	2200      	movs	r2, #0
 8003692:	2300      	movs	r3, #0
 8003694:	f7fd fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8003698:	b120      	cbz	r0, 80036a4 <ceil+0x3c>
 800369a:	2c00      	cmp	r4, #0
 800369c:	db4f      	blt.n	800373e <ceil+0xd6>
 800369e:	4325      	orrs	r5, r4
 80036a0:	d151      	bne.n	8003746 <ceil+0xde>
 80036a2:	462c      	mov	r4, r5
 80036a4:	4621      	mov	r1, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	e023      	b.n	80036f2 <ceil+0x8a>
 80036aa:	4f2b      	ldr	r7, [pc, #172]	@ (8003758 <ceil+0xf0>)
 80036ac:	4137      	asrs	r7, r6
 80036ae:	ea01 0307 	and.w	r3, r1, r7
 80036b2:	4303      	orrs	r3, r0
 80036b4:	d01d      	beq.n	80036f2 <ceil+0x8a>
 80036b6:	a326      	add	r3, pc, #152	@ (adr r3, 8003750 <ceil+0xe8>)
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f7fc fde6 	bl	800028c <__adddf3>
 80036c0:	2200      	movs	r2, #0
 80036c2:	2300      	movs	r3, #0
 80036c4:	f7fd fa28 	bl	8000b18 <__aeabi_dcmpgt>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d0eb      	beq.n	80036a4 <ceil+0x3c>
 80036cc:	2c00      	cmp	r4, #0
 80036ce:	bfc2      	ittt	gt
 80036d0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80036d4:	4133      	asrgt	r3, r6
 80036d6:	18e4      	addgt	r4, r4, r3
 80036d8:	ea24 0407 	bic.w	r4, r4, r7
 80036dc:	2500      	movs	r5, #0
 80036de:	e7e1      	b.n	80036a4 <ceil+0x3c>
 80036e0:	2e33      	cmp	r6, #51	@ 0x33
 80036e2:	dd0a      	ble.n	80036fa <ceil+0x92>
 80036e4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80036e8:	d103      	bne.n	80036f2 <ceil+0x8a>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	f7fc fdcd 	bl	800028c <__adddf3>
 80036f2:	ec41 0b10 	vmov	d0, r0, r1
 80036f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036fa:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80036fe:	f04f 37ff 	mov.w	r7, #4294967295
 8003702:	40df      	lsrs	r7, r3
 8003704:	4238      	tst	r0, r7
 8003706:	d0f4      	beq.n	80036f2 <ceil+0x8a>
 8003708:	a311      	add	r3, pc, #68	@ (adr r3, 8003750 <ceil+0xe8>)
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f7fc fdbd 	bl	800028c <__adddf3>
 8003712:	2200      	movs	r2, #0
 8003714:	2300      	movs	r3, #0
 8003716:	f7fd f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800371a:	2800      	cmp	r0, #0
 800371c:	d0c2      	beq.n	80036a4 <ceil+0x3c>
 800371e:	2c00      	cmp	r4, #0
 8003720:	dd0a      	ble.n	8003738 <ceil+0xd0>
 8003722:	2e14      	cmp	r6, #20
 8003724:	d101      	bne.n	800372a <ceil+0xc2>
 8003726:	3401      	adds	r4, #1
 8003728:	e006      	b.n	8003738 <ceil+0xd0>
 800372a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800372e:	2301      	movs	r3, #1
 8003730:	40b3      	lsls	r3, r6
 8003732:	441d      	add	r5, r3
 8003734:	45a8      	cmp	r8, r5
 8003736:	d8f6      	bhi.n	8003726 <ceil+0xbe>
 8003738:	ea25 0507 	bic.w	r5, r5, r7
 800373c:	e7b2      	b.n	80036a4 <ceil+0x3c>
 800373e:	2500      	movs	r5, #0
 8003740:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003744:	e7ae      	b.n	80036a4 <ceil+0x3c>
 8003746:	4c05      	ldr	r4, [pc, #20]	@ (800375c <ceil+0xf4>)
 8003748:	2500      	movs	r5, #0
 800374a:	e7ab      	b.n	80036a4 <ceil+0x3c>
 800374c:	f3af 8000 	nop.w
 8003750:	8800759c 	.word	0x8800759c
 8003754:	7e37e43c 	.word	0x7e37e43c
 8003758:	000fffff 	.word	0x000fffff
 800375c:	3ff00000 	.word	0x3ff00000

08003760 <_init>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr

0800376c <_fini>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr
