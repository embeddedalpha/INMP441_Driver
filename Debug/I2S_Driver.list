
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003660  08003660  00004660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ac  080036ac  00005054  2**0
                  CONTENTS
  4 .ARM          00000008  080036ac  080036ac  000046ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036b4  080036b4  00005054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b8  080036b8  000046b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080036bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005054  2**0
                  CONTENTS
 10 .bss          000001a8  20000054  20000054  00005054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  00005054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000762e  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d03  00000000  00000000  0000c6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  0000d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b6  00000000  00000000  0000d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a431  00000000  00000000  0000d7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005168  00000000  00000000  00027bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2ca  00000000  00000000  0002cd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bc031  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fec  00000000  00000000  000bc074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000bd060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003648 	.word	0x08003648

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08003648 	.word	0x08003648

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <Console_Init+0x44>)
 8000c34:	f001 fa25 	bl	8002082 <USART_Config_Reset>
	 serial.Port = USART1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <Console_Init+0x44>)
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <Console_Init+0x48>)
 8000c3c:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <Console_Init+0x44>)
 8000c42:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 8000c44:	2201      	movs	r2, #1
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <Console_Init+0x44>)
 8000c48:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Console_Init+0x44>)
 8000c50:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8000c52:	2206      	movs	r2, #6
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <Console_Init+0x44>)
 8000c56:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8000c58:	2207      	movs	r2, #7
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <Console_Init+0x44>)
 8000c5c:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8000c5e:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <Console_Init+0x44>)
 8000c60:	f001 ff2e 	bl	8002ac0 <USART_Init>


}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000070 	.word	0x20000070
 8000c70:	40011000 	.word	0x40011000

08000c74 <printConsole>:

 void printConsole(char *msg, ...)
{
 8000c74:	b40f      	push	{r0, r1, r2, r3}
 8000c76:	b580      	push	{r7, lr}
 8000c78:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 8000c80:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000c84:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000c88:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000c8c:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 8000c90:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 8000c92:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000c96:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	3b14      	subs	r3, #20
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 8000ca6:	f101 0120 	add.w	r1, r1, #32
 8000caa:	6809      	ldr	r1, [r1, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 ffcd 	bl	8002c4c <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000cb8:	f102 0214 	add.w	r2, r2, #20
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e020      	b.n	8000d02 <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 8000cc0:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000cc4:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 8000cc8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000ccc:	f103 0314 	add.w	r3, r3, #20
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <printConsole+0xc0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 8000cdc:	bf00      	nop
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <printConsole+0xc0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f8      	beq.n	8000cde <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 8000cec:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000cf0:	f103 0314 	add.w	r3, r3, #20
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000cfc:	f102 0214 	add.w	r2, r2, #20
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	3b14      	subs	r3, #20
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa61 	bl	80001d0 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000d16:	f103 0314 	add.w	r3, r3, #20
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d2cf      	bcs.n	8000cc0 <printConsole+0x4c>
	}
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d30:	b004      	add	sp, #16
 8000d32:	4770      	bx	lr
 8000d34:	20000070 	.word	0x20000070

08000d38 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 8000d42:	2201      	movs	r2, #1
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	615a      	str	r2, [r3, #20]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <GPIO_Clock_Enable+0xa0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d106      	bne.n	8000d7a <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a23      	ldr	r2, [pc, #140]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d78:	e039      	b.n	8000dee <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <GPIO_Clock_Enable+0xa8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d106      	bne.n	8000d90 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a1e      	ldr	r2, [pc, #120]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	e02e      	b.n	8000dee <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <GPIO_Clock_Enable+0xac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d106      	bne.n	8000da6 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8000d98:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	4a18      	ldr	r2, [pc, #96]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da4:	e023      	b.n	8000dee <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <GPIO_Clock_Enable+0xb0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d106      	bne.n	8000dbc <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a13      	ldr	r2, [pc, #76]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	e018      	b.n	8000dee <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <GPIO_Clock_Enable+0xb4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d106      	bne.n	8000dd2 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	e00d      	b.n	8000dee <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <GPIO_Clock_Enable+0xb8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d106      	bne.n	8000de8 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <GPIO_Clock_Enable+0xa4>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	e002      	b.n	8000dee <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	e000      	b.n	8000df0 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40021c00 	.word	0x40021c00

08000e18 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4603      	mov	r3, r0
 8000e28:	70fb      	strb	r3, [r7, #3]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70bb      	strb	r3, [r7, #2]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff92 	bl	8000d5c <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	78b9      	ldrb	r1, [r7, #2]
 8000e3e:	78fa      	ldrb	r2, [r7, #3]
 8000e40:	0052      	lsls	r2, r2, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	7879      	ldrb	r1, [r7, #1]
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	fa01 f202 	lsl.w	r2, r1, r2
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	7c39      	ldrb	r1, [r7, #16]
 8000e64:	78fa      	ldrb	r2, [r7, #3]
 8000e66:	0052      	lsls	r2, r2, #1
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	7d39      	ldrb	r1, [r7, #20]
 8000e78:	78fa      	ldrb	r2, [r7, #3]
 8000e7a:	0052      	lsls	r2, r2, #1
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d80a      	bhi.n	8000ea2 <GPIO_Pin_Init+0x8a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	7e39      	ldrb	r1, [r7, #24]
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8000ea0:	e00a      	b.n	8000eb8 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	7e39      	ldrb	r1, [r7, #24]
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SCK_PIN_INIT2>:




static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10) || (config->Half_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10)){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2315      	movs	r3, #21
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d006      	beq.n	8000ee4 <SCK_PIN_INIT2+0x24>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000edc:	461a      	mov	r2, r3
 8000ede:	2315      	movs	r3, #21
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d10e      	bne.n	8000f02 <SCK_PIN_INIT2+0x42>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	2400      	movs	r4, #0
 8000ee8:	2303      	movs	r3, #3
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	9102      	str	r1, [sp, #8]
 8000ef0:	9201      	str	r2, [sp, #4]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	210a      	movs	r1, #10
 8000efa:	4816      	ldr	r0, [pc, #88]	@ (8000f54 <SCK_PIN_INIT2+0x94>)
 8000efc:	f7ff ff8c 	bl	8000e18 <GPIO_Pin_Init>
 8000f00:	e022      	b.n	8000f48 <SCK_PIN_INIT2+0x88>
	}
	else if((config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13) || (config->Half_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13)){
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2318      	movs	r3, #24
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d006      	beq.n	8000f1e <SCK_PIN_INIT2+0x5e>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000f16:	461a      	mov	r2, r3
 8000f18:	2318      	movs	r3, #24
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d10e      	bne.n	8000f3c <SCK_PIN_INIT2+0x7c>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	2400      	movs	r4, #0
 8000f22:	2303      	movs	r3, #3
 8000f24:	2200      	movs	r2, #0
 8000f26:	2105      	movs	r1, #5
 8000f28:	9102      	str	r1, [sp, #8]
 8000f2a:	9201      	str	r2, [sp, #4]
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4623      	mov	r3, r4
 8000f30:	4602      	mov	r2, r0
 8000f32:	210d      	movs	r1, #13
 8000f34:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <SCK_PIN_INIT2+0x94>)
 8000f36:	f7ff ff6f 	bl	8000e18 <GPIO_Pin_Init>
 8000f3a:	e005      	b.n	8000f48 <SCK_PIN_INIT2+0x88>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	77da      	strb	r2, [r3, #31]
		return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e000      	b.n	8000f4a <SCK_PIN_INIT2+0x8a>
	}
	return 1;
 8000f48:	2301      	movs	r3, #1
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020400 	.word	0x40020400

08000f58 <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09) || (config->Half_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09)){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000f66:	461a      	mov	r2, r3
 8000f68:	231d      	movs	r3, #29
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d006      	beq.n	8000f7c <WS_PIN_INIT2+0x24>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8000f74:	461a      	mov	r2, r3
 8000f76:	231d      	movs	r3, #29
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d10e      	bne.n	8000f9a <WS_PIN_INIT2+0x42>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	2400      	movs	r4, #0
 8000f80:	2303      	movs	r3, #3
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	9102      	str	r1, [sp, #8]
 8000f88:	9201      	str	r2, [sp, #4]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	4602      	mov	r2, r0
 8000f90:	2109      	movs	r1, #9
 8000f92:	4816      	ldr	r0, [pc, #88]	@ (8000fec <WS_PIN_INIT2+0x94>)
 8000f94:	f7ff ff40 	bl	8000e18 <GPIO_Pin_Init>
 8000f98:	e022      	b.n	8000fe0 <WS_PIN_INIT2+0x88>
	}
	else if((config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12) || (config->Half_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12)){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2317      	movs	r3, #23
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d006      	beq.n	8000fb6 <WS_PIN_INIT2+0x5e>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2317      	movs	r3, #23
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d10e      	bne.n	8000fd4 <WS_PIN_INIT2+0x7c>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	2303      	movs	r3, #3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2105      	movs	r1, #5
 8000fc0:	9102      	str	r1, [sp, #8]
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4602      	mov	r2, r0
 8000fca:	210c      	movs	r1, #12
 8000fcc:	4807      	ldr	r0, [pc, #28]	@ (8000fec <WS_PIN_INIT2+0x94>)
 8000fce:	f7ff ff23 	bl	8000e18 <GPIO_Pin_Init>
 8000fd2:	e005      	b.n	8000fe0 <WS_PIN_INIT2+0x88>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	779a      	strb	r2, [r3, #30]
		return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e000      	b.n	8000fe2 <WS_PIN_INIT2+0x8a>
	}
	return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020400 	.word	0x40020400

08000ff0 <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15) || (config->Half_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15)){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000ffe:	461a      	mov	r2, r3
 8001000:	2316      	movs	r3, #22
 8001002:	429a      	cmp	r2, r3
 8001004:	d006      	beq.n	8001014 <SD_PIN_Init2+0x24>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800100c:	461a      	mov	r2, r3
 800100e:	2316      	movs	r3, #22
 8001010:	429a      	cmp	r2, r3
 8001012:	d10e      	bne.n	8001032 <SD_PIN_Init2+0x42>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2EXT);
 8001014:	2002      	movs	r0, #2
 8001016:	2400      	movs	r4, #0
 8001018:	2303      	movs	r3, #3
 800101a:	2202      	movs	r2, #2
 800101c:	2105      	movs	r1, #5
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4623      	mov	r3, r4
 8001026:	4602      	mov	r2, r0
 8001028:	210f      	movs	r1, #15
 800102a:	4816      	ldr	r0, [pc, #88]	@ (8001084 <SD_PIN_Init2+0x94>)
 800102c:	f7ff fef4 	bl	8000e18 <GPIO_Pin_Init>
 8001030:	e022      	b.n	8001078 <SD_PIN_Init2+0x88>
	}
	else if((config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03) || (config->Half_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03)){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001038:	461a      	mov	r2, r3
 800103a:	2319      	movs	r3, #25
 800103c:	429a      	cmp	r2, r3
 800103e:	d006      	beq.n	800104e <SD_PIN_Init2+0x5e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001046:	461a      	mov	r2, r3
 8001048:	2319      	movs	r3, #25
 800104a:	429a      	cmp	r2, r3
 800104c:	d10e      	bne.n	800106c <SD_PIN_Init2+0x7c>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2EXT);
 800104e:	2002      	movs	r0, #2
 8001050:	2400      	movs	r4, #0
 8001052:	2303      	movs	r3, #3
 8001054:	2202      	movs	r2, #2
 8001056:	2105      	movs	r1, #5
 8001058:	9102      	str	r1, [sp, #8]
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4623      	mov	r3, r4
 8001060:	4602      	mov	r2, r0
 8001062:	2103      	movs	r1, #3
 8001064:	4808      	ldr	r0, [pc, #32]	@ (8001088 <SD_PIN_Init2+0x98>)
 8001066:	f7ff fed7 	bl	8000e18 <GPIO_Pin_Init>
 800106a:	e005      	b.n	8001078 <SD_PIN_Init2+0x88>
	}
	else{
		config->Error.SD_Pin_Error = true;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	775a      	strb	r2, [r3, #29]
		return -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e000      	b.n	800107a <SD_PIN_Init2+0x8a>
	}
	return 1;
 8001078:	2301      	movs	r3, #1
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	bf00      	nop
 8001084:	40020400 	.word	0x40020400
 8001088:	40020800 	.word	0x40020800

0800108c <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b087      	sub	sp, #28
 8001090:	af04      	add	r7, sp, #16
 8001092:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable) || (config->Half_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800109a:	461a      	mov	r2, r3
 800109c:	23ff      	movs	r3, #255	@ 0xff
 800109e:	429a      	cmp	r2, r3
 80010a0:	d106      	bne.n	80010b0 <MCK_PIN_Init2+0x24>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80010a8:	461a      	mov	r2, r3
 80010aa:	23ff      	movs	r3, #255	@ 0xff
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d023      	beq.n	80010f8 <MCK_PIN_Init2+0x6c>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7) || (config->Half_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2325      	movs	r3, #37	@ 0x25
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d006      	beq.n	80010cc <MCK_PIN_Init2+0x40>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2325      	movs	r3, #37	@ 0x25
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d10e      	bne.n	80010ea <MCK_PIN_Init2+0x5e>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 80010cc:	2002      	movs	r0, #2
 80010ce:	2400      	movs	r4, #0
 80010d0:	2303      	movs	r3, #3
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	9102      	str	r1, [sp, #8]
 80010d8:	9201      	str	r2, [sp, #4]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	4623      	mov	r3, r4
 80010de:	4602      	mov	r2, r0
 80010e0:	2107      	movs	r1, #7
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <MCK_PIN_Init2+0x78>)
 80010e4:	f7ff fe98 	bl	8000e18 <GPIO_Pin_Init>
 80010e8:	e006      	b.n	80010f8 <MCK_PIN_Init2+0x6c>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e000      	b.n	80010fa <MCK_PIN_Init2+0x6e>
		}
	}
	return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	40020800 	.word	0x40020800

08001108 <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b087      	sub	sp, #28
 800110c:	af04      	add	r7, sp, #16
 800110e:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14)){
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8001116:	461a      	mov	r2, r3
 8001118:	231d      	movs	r3, #29
 800111a:	429a      	cmp	r2, r3
 800111c:	d10e      	bne.n	800113c <EXT_SD_PIN_Init2+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800111e:	2002      	movs	r0, #2
 8001120:	2400      	movs	r4, #0
 8001122:	2303      	movs	r3, #3
 8001124:	2200      	movs	r2, #0
 8001126:	2105      	movs	r1, #5
 8001128:	9102      	str	r1, [sp, #8]
 800112a:	9201      	str	r2, [sp, #4]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4623      	mov	r3, r4
 8001130:	4602      	mov	r2, r0
 8001132:	210e      	movs	r1, #14
 8001134:	4812      	ldr	r0, [pc, #72]	@ (8001180 <EXT_SD_PIN_Init2+0x78>)
 8001136:	f7ff fe6f 	bl	8000e18 <GPIO_Pin_Init>
 800113a:	e01b      	b.n	8001174 <EXT_SD_PIN_Init2+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8001142:	461a      	mov	r2, r3
 8001144:	231b      	movs	r3, #27
 8001146:	429a      	cmp	r2, r3
 8001148:	d10e      	bne.n	8001168 <EXT_SD_PIN_Init2+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800114a:	2002      	movs	r0, #2
 800114c:	2400      	movs	r4, #0
 800114e:	2303      	movs	r3, #3
 8001150:	2200      	movs	r2, #0
 8001152:	2105      	movs	r1, #5
 8001154:	9102      	str	r1, [sp, #8]
 8001156:	9201      	str	r2, [sp, #4]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4623      	mov	r3, r4
 800115c:	4602      	mov	r2, r0
 800115e:	2102      	movs	r1, #2
 8001160:	4808      	ldr	r0, [pc, #32]	@ (8001184 <EXT_SD_PIN_Init2+0x7c>)
 8001162:	f7ff fe59 	bl	8000e18 <GPIO_Pin_Init>
 8001166:	e005      	b.n	8001174 <EXT_SD_PIN_Init2+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	771a      	strb	r2, [r3, #28]
		return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e000      	b.n	8001176 <EXT_SD_PIN_Init2+0x6e>
	}
	return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800

08001188 <SCK_PIN_INIT3>:


static int8_t SCK_PIN_INIT3(I2S_Config *config)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b087      	sub	sp, #28
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001196:	461a      	mov	r2, r3
 8001198:	2315      	movs	r3, #21
 800119a:	429a      	cmp	r2, r3
 800119c:	d10e      	bne.n	80011bc <SCK_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800119e:	2002      	movs	r0, #2
 80011a0:	2400      	movs	r4, #0
 80011a2:	2303      	movs	r3, #3
 80011a4:	2200      	movs	r2, #0
 80011a6:	2105      	movs	r1, #5
 80011a8:	9102      	str	r1, [sp, #8]
 80011aa:	9201      	str	r2, [sp, #4]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4623      	mov	r3, r4
 80011b0:	4602      	mov	r2, r0
 80011b2:	210a      	movs	r1, #10
 80011b4:	4812      	ldr	r0, [pc, #72]	@ (8001200 <SCK_PIN_INIT3+0x78>)
 80011b6:	f7ff fe2f 	bl	8000e18 <GPIO_Pin_Init>
 80011ba:	e01b      	b.n	80011f4 <SCK_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2318      	movs	r3, #24
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d10e      	bne.n	80011e8 <SCK_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80011ca:	2002      	movs	r0, #2
 80011cc:	2400      	movs	r4, #0
 80011ce:	2303      	movs	r3, #3
 80011d0:	2200      	movs	r2, #0
 80011d2:	2105      	movs	r1, #5
 80011d4:	9102      	str	r1, [sp, #8]
 80011d6:	9201      	str	r2, [sp, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	4623      	mov	r3, r4
 80011dc:	4602      	mov	r2, r0
 80011de:	210d      	movs	r1, #13
 80011e0:	4807      	ldr	r0, [pc, #28]	@ (8001200 <SCK_PIN_INIT3+0x78>)
 80011e2:	f7ff fe19 	bl	8000e18 <GPIO_Pin_Init>
 80011e6:	e005      	b.n	80011f4 <SCK_PIN_INIT3+0x6c>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	77da      	strb	r2, [r3, #31]
		return -1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e000      	b.n	80011f6 <SCK_PIN_INIT3+0x6e>
	}
	return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020400 	.word	0x40020400

08001204 <WS_PIN_INIT3>:
static int8_t WS_PIN_INIT3(I2S_Config *config)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af04      	add	r7, sp, #16
 800120a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001212:	461a      	mov	r2, r3
 8001214:	231d      	movs	r3, #29
 8001216:	429a      	cmp	r2, r3
 8001218:	d10e      	bne.n	8001238 <WS_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800121a:	2002      	movs	r0, #2
 800121c:	2400      	movs	r4, #0
 800121e:	2303      	movs	r3, #3
 8001220:	2200      	movs	r2, #0
 8001222:	2105      	movs	r1, #5
 8001224:	9102      	str	r1, [sp, #8]
 8001226:	9201      	str	r2, [sp, #4]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4623      	mov	r3, r4
 800122c:	4602      	mov	r2, r0
 800122e:	2109      	movs	r1, #9
 8001230:	4812      	ldr	r0, [pc, #72]	@ (800127c <WS_PIN_INIT3+0x78>)
 8001232:	f7ff fdf1 	bl	8000e18 <GPIO_Pin_Init>
 8001236:	e01b      	b.n	8001270 <WS_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800123e:	461a      	mov	r2, r3
 8001240:	2317      	movs	r3, #23
 8001242:	429a      	cmp	r2, r3
 8001244:	d10e      	bne.n	8001264 <WS_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8001246:	2002      	movs	r0, #2
 8001248:	2400      	movs	r4, #0
 800124a:	2303      	movs	r3, #3
 800124c:	2200      	movs	r2, #0
 800124e:	2105      	movs	r1, #5
 8001250:	9102      	str	r1, [sp, #8]
 8001252:	9201      	str	r2, [sp, #4]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4623      	mov	r3, r4
 8001258:	4602      	mov	r2, r0
 800125a:	210c      	movs	r1, #12
 800125c:	4807      	ldr	r0, [pc, #28]	@ (800127c <WS_PIN_INIT3+0x78>)
 800125e:	f7ff fddb 	bl	8000e18 <GPIO_Pin_Init>
 8001262:	e005      	b.n	8001270 <WS_PIN_INIT3+0x6c>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	779a      	strb	r2, [r3, #30]
		return -1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	e000      	b.n	8001272 <WS_PIN_INIT3+0x6e>
	}
	return 1;
 8001270:	2301      	movs	r3, #1
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	40020400 	.word	0x40020400

08001280 <SD_PIN_Init3>:
static int8_t SD_PIN_Init3(I2S_Config *config)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800128e:	461a      	mov	r2, r3
 8001290:	2316      	movs	r3, #22
 8001292:	429a      	cmp	r2, r3
 8001294:	d10e      	bne.n	80012b4 <SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8001296:	2002      	movs	r0, #2
 8001298:	2400      	movs	r4, #0
 800129a:	2303      	movs	r3, #3
 800129c:	2200      	movs	r2, #0
 800129e:	2105      	movs	r1, #5
 80012a0:	9102      	str	r1, [sp, #8]
 80012a2:	9201      	str	r2, [sp, #4]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	4623      	mov	r3, r4
 80012a8:	4602      	mov	r2, r0
 80012aa:	210f      	movs	r1, #15
 80012ac:	4812      	ldr	r0, [pc, #72]	@ (80012f8 <SD_PIN_Init3+0x78>)
 80012ae:	f7ff fdb3 	bl	8000e18 <GPIO_Pin_Init>
 80012b2:	e01b      	b.n	80012ec <SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80012ba:	461a      	mov	r2, r3
 80012bc:	2319      	movs	r3, #25
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10e      	bne.n	80012e0 <SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80012c2:	2002      	movs	r0, #2
 80012c4:	2400      	movs	r4, #0
 80012c6:	2303      	movs	r3, #3
 80012c8:	2200      	movs	r2, #0
 80012ca:	2105      	movs	r1, #5
 80012cc:	9102      	str	r1, [sp, #8]
 80012ce:	9201      	str	r2, [sp, #4]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4623      	mov	r3, r4
 80012d4:	4602      	mov	r2, r0
 80012d6:	2103      	movs	r1, #3
 80012d8:	4808      	ldr	r0, [pc, #32]	@ (80012fc <SD_PIN_Init3+0x7c>)
 80012da:	f7ff fd9d 	bl	8000e18 <GPIO_Pin_Init>
 80012de:	e005      	b.n	80012ec <SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.SD_Pin_Error = true;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	775a      	strb	r2, [r3, #29]
		return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e000      	b.n	80012ee <SD_PIN_Init3+0x6e>
	}
	return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800

08001300 <MCK_PIN_Init3>:
static int8_t MCK_PIN_Init3(I2S_Config *config)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af04      	add	r7, sp, #16
 8001306:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800130e:	461a      	mov	r2, r3
 8001310:	23ff      	movs	r3, #255	@ 0xff
 8001312:	429a      	cmp	r2, r3
 8001314:	d01c      	beq.n	8001350 <MCK_PIN_Init3+0x50>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800131c:	461a      	mov	r2, r3
 800131e:	2325      	movs	r3, #37	@ 0x25
 8001320:	429a      	cmp	r2, r3
 8001322:	d10e      	bne.n	8001342 <MCK_PIN_Init3+0x42>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8001324:	2002      	movs	r0, #2
 8001326:	2400      	movs	r4, #0
 8001328:	2303      	movs	r3, #3
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	9102      	str	r1, [sp, #8]
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4623      	mov	r3, r4
 8001336:	4602      	mov	r2, r0
 8001338:	2107      	movs	r1, #7
 800133a:	4808      	ldr	r0, [pc, #32]	@ (800135c <MCK_PIN_Init3+0x5c>)
 800133c:	f7ff fd6c 	bl	8000e18 <GPIO_Pin_Init>
 8001340:	e006      	b.n	8001350 <MCK_PIN_Init3+0x50>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e000      	b.n	8001352 <MCK_PIN_Init3+0x52>
		}
	}
	return 1;
 8001350:	2301      	movs	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	40020800 	.word	0x40020800

08001360 <EXT_SD_PIN_Init3>:
static int8_t EXT_SD_PIN_Init3(I2S_Config *config)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b087      	sub	sp, #28
 8001364:	af04      	add	r7, sp, #16
 8001366:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f993 3013 	ldrsb.w	r3, [r3, #19]
 800136e:	461a      	mov	r2, r3
 8001370:	231d      	movs	r3, #29
 8001372:	429a      	cmp	r2, r3
 8001374:	d10e      	bne.n	8001394 <EXT_SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8001376:	2002      	movs	r0, #2
 8001378:	2400      	movs	r4, #0
 800137a:	2303      	movs	r3, #3
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	9102      	str	r1, [sp, #8]
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	4623      	mov	r3, r4
 8001388:	4602      	mov	r2, r0
 800138a:	210e      	movs	r1, #14
 800138c:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <EXT_SD_PIN_Init3+0x78>)
 800138e:	f7ff fd43 	bl	8000e18 <GPIO_Pin_Init>
 8001392:	e01b      	b.n	80013cc <EXT_SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f993 3013 	ldrsb.w	r3, [r3, #19]
 800139a:	461a      	mov	r2, r3
 800139c:	231b      	movs	r3, #27
 800139e:	429a      	cmp	r2, r3
 80013a0:	d10e      	bne.n	80013c0 <EXT_SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80013a2:	2002      	movs	r0, #2
 80013a4:	2400      	movs	r4, #0
 80013a6:	2303      	movs	r3, #3
 80013a8:	2200      	movs	r2, #0
 80013aa:	2105      	movs	r1, #5
 80013ac:	9102      	str	r1, [sp, #8]
 80013ae:	9201      	str	r2, [sp, #4]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4623      	mov	r3, r4
 80013b4:	4602      	mov	r2, r0
 80013b6:	2102      	movs	r1, #2
 80013b8:	4808      	ldr	r0, [pc, #32]	@ (80013dc <EXT_SD_PIN_Init3+0x7c>)
 80013ba:	f7ff fd2d 	bl	8000e18 <GPIO_Pin_Init>
 80013be:	e005      	b.n	80013cc <EXT_SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	771a      	strb	r2, [r3, #28]
		return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e000      	b.n	80013ce <EXT_SD_PIN_Init3+0x6e>
	}
	return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800

080013e0 <I2S_DeInit>:


/********************************************************************************************************/
void I2S_DeInit(I2S_Config *config)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	if(config->Port != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <I2S_DeInit+0x1c>
	{
		RCC->APB1ENR &= ~(RCC_APB1ENR_SPI2EN | RCC_APB1ENR_SPI3EN);
 80013f0:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <I2S_DeInit+0xc4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a2b      	ldr	r2, [pc, #172]	@ (80014a4 <I2S_DeInit+0xc4>)
 80013f6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	config->Port->I2SCFGR &= ~0xFFFF;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	041b      	lsls	r3, r3, #16
 800140a:	61d3      	str	r3, [r2, #28]
	config->Port->I2SPR &= ~0xFFFF;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	6213      	str	r3, [r2, #32]
	config->Audio_Frequency = -1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	22ff      	movs	r2, #255	@ 0xff
 8001420:	731a      	strb	r2, [r3, #12]
	config->Channel_Length = -1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	22ff      	movs	r2, #255	@ 0xff
 8001426:	72da      	strb	r2, [r3, #11]
	config->Data_Length = -1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	22ff      	movs	r2, #255	@ 0xff
 800142c:	729a      	strb	r2, [r3, #10]
	config->LR_Pin_Number = -1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	22ff      	movs	r2, #255	@ 0xff
 8001432:	721a      	strb	r2, [r3, #8]

	config->Standard = -1;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	22ff      	movs	r2, #255	@ 0xff
 8001438:	725a      	strb	r2, [r3, #9]
	config->Full_Duplex.EXT_SD = -1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	22ff      	movs	r2, #255	@ 0xff
 800143e:	74da      	strb	r2, [r3, #19]
	config->Full_Duplex.MCK_Pin = -1;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	22ff      	movs	r2, #255	@ 0xff
 8001444:	73da      	strb	r2, [r3, #15]
	config->Full_Duplex.SCK_Pin = -1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	22ff      	movs	r2, #255	@ 0xff
 800144a:	741a      	strb	r2, [r3, #16]
	config->Full_Duplex.SD_Pin = -1;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	22ff      	movs	r2, #255	@ 0xff
 8001450:	745a      	strb	r2, [r3, #17]
	config->Full_Duplex.WS_Pin = -1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	22ff      	movs	r2, #255	@ 0xff
 8001456:	749a      	strb	r2, [r3, #18]
	config->Full_Duplex.mode = -1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	22ff      	movs	r2, #255	@ 0xff
 800145c:	739a      	strb	r2, [r3, #14]
	config->Full_Duplex.Enable = 0;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	735a      	strb	r2, [r3, #13]
	config->Half_Duplex.MCK_Pin = -1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	22ff      	movs	r2, #255	@ 0xff
 8001468:	759a      	strb	r2, [r3, #22]
	config->Half_Duplex.SCK_Pin = -1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	22ff      	movs	r2, #255	@ 0xff
 800146e:	75da      	strb	r2, [r3, #23]
	config->Half_Duplex.SD_Pin = -1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	22ff      	movs	r2, #255	@ 0xff
 8001474:	761a      	strb	r2, [r3, #24]
	config->Half_Duplex.WS_Pin = -1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	22ff      	movs	r2, #255	@ 0xff
 800147a:	765a      	strb	r2, [r3, #25]
	config->Half_Duplex.mode = -1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	22ff      	movs	r2, #255	@ 0xff
 8001480:	755a      	strb	r2, [r3, #21]
	config->Half_Duplex.Enable = 0;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	751a      	strb	r2, [r3, #20]
	config->LR_Pin_Port = NULL;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
	I2S_Start(config);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fb10 	bl	8001ab4 <I2S_Start>
	config->Port = NULL;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <I2S_Init>:

/********************************************************************************************************/
int8_t I2S_Init(I2S_Config *config)
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	b089      	sub	sp, #36	@ 0x24
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a9b      	ldr	r2, [pc, #620]	@ (8001724 <I2S_Init+0x27c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d122      	bne.n	8001500 <I2S_Init+0x58>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80014ba:	4b9b      	ldr	r3, [pc, #620]	@ (8001728 <I2S_Init+0x280>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a9a      	ldr	r2, [pc, #616]	@ (8001728 <I2S_Init+0x280>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7d1b      	ldrb	r3, [r3, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d103      	bne.n	80014d6 <I2S_Init+0x2e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7b5b      	ldrb	r3, [r3, #13]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <I2S_Init+0x48>
		{
			SD_PIN_Init2(config);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fd8a 	bl	8000ff0 <SD_PIN_Init2>
			WS_PIN_INIT2(config);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fd3b 	bl	8000f58 <WS_PIN_INIT2>
			SCK_PIN_INIT2(config);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fcec 	bl	8000ec0 <SCK_PIN_INIT2>
			MCK_PIN_Init2(config);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fdcf 	bl	800108c <MCK_PIN_Init2>
 80014ee:	e032      	b.n	8001556 <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7b5b      	ldrb	r3, [r3, #13]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d02e      	beq.n	8001556 <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init2(config);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fe05 	bl	8001108 <EXT_SD_PIN_Init2>
 80014fe:	e02a      	b.n	8001556 <I2S_Init+0xae>
		}
	}
	else if(config->Port == I2S_Port.I2S3)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a89      	ldr	r2, [pc, #548]	@ (800172c <I2S_Init+0x284>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d122      	bne.n	8001550 <I2S_Init+0xa8>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 800150a:	4b87      	ldr	r3, [pc, #540]	@ (8001728 <I2S_Init+0x280>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a86      	ldr	r2, [pc, #536]	@ (8001728 <I2S_Init+0x280>)
 8001510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7d1b      	ldrb	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <I2S_Init+0x7e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7b5b      	ldrb	r3, [r3, #13]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00c      	beq.n	8001540 <I2S_Init+0x98>
		{
			SD_PIN_Init3(config);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff feaa 	bl	8001280 <SD_PIN_Init3>
			WS_PIN_INIT3(config);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fe69 	bl	8001204 <WS_PIN_INIT3>
			SCK_PIN_INIT3(config);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fe28 	bl	8001188 <SCK_PIN_INIT3>
			MCK_PIN_Init3(config);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fee1 	bl	8001300 <MCK_PIN_Init3>
 800153e:	e00a      	b.n	8001556 <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7b5b      	ldrb	r3, [r3, #13]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init3(config);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff09 	bl	8001360 <EXT_SD_PIN_Init3>
 800154e:	e002      	b.n	8001556 <I2S_Init+0xae>
		}
	}
	else
	{

		config->Error.Port_Error = true;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	769a      	strb	r2, [r3, #26]
	}

	GPIO_Pin_Init(config->LR_Pin_Port, config->LR_Pin_Number, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6858      	ldr	r0, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001560:	b2d9      	uxtb	r1, r3
 8001562:	2501      	movs	r5, #1
 8001564:	2600      	movs	r6, #0
 8001566:	2303      	movs	r3, #3
 8001568:	2200      	movs	r2, #0
 800156a:	2400      	movs	r4, #0
 800156c:	9402      	str	r4, [sp, #8]
 800156e:	9201      	str	r2, [sp, #4]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4633      	mov	r3, r6
 8001574:	462a      	mov	r2, r5
 8001576:	f7ff fc4f 	bl	8000e18 <GPIO_Pin_Init>


	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001588:	61da      	str	r2, [r3, #28]
	config->Port->I2SCFGR |= SPI_I2SCFGR_I2SMOD;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69da      	ldr	r2, [r3, #28]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001598:	61da      	str	r2, [r3, #28]

	I2S_Stop(config);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa9c 	bl	8001ad8 <I2S_Stop>


	// I2S Mode
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80015ae:	61da      	str	r2, [r3, #28]

	if((config->Full_Duplex.mode == I2S_Mode.Master.Transmit) || (config->Half_Duplex.mode == I2S_Mode.Master.Transmit)){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80015b6:	461a      	mov	r2, r3
 80015b8:	2301      	movs	r3, #1
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d006      	beq.n	80015cc <I2S_Init+0x124>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80015c4:	461a      	mov	r2, r3
 80015c6:	2301      	movs	r3, #1
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d108      	bne.n	80015de <I2S_Init+0x136>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015da:	61da      	str	r2, [r3, #28]
 80015dc:	e043      	b.n	8001666 <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Master.Receive) || (config->Half_Duplex.mode == I2S_Mode.Master.Receive)){
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2302      	movs	r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d006      	beq.n	80015fa <I2S_Init+0x152>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80015f2:	461a      	mov	r2, r3
 80015f4:	2302      	movs	r3, #2
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d108      	bne.n	800160c <I2S_Init+0x164>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69da      	ldr	r2, [r3, #28]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001608:	61da      	str	r2, [r3, #28]
 800160a:	e02c      	b.n	8001666 <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Slave.Transmit) || (config->Half_Duplex.mode == I2S_Mode.Slave.Transmit)){
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001612:	461a      	mov	r2, r3
 8001614:	2303      	movs	r3, #3
 8001616:	429a      	cmp	r2, r3
 8001618:	d006      	beq.n	8001628 <I2S_Init+0x180>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001620:	461a      	mov	r2, r3
 8001622:	2303      	movs	r3, #3
 8001624:	429a      	cmp	r2, r3
 8001626:	d108      	bne.n	800163a <I2S_Init+0x192>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001636:	61da      	str	r2, [r3, #28]
 8001638:	e015      	b.n	8001666 <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Slave.Receive) || (config->Half_Duplex.mode == I2S_Mode.Slave.Receive)){
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001640:	461a      	mov	r2, r3
 8001642:	2304      	movs	r3, #4
 8001644:	429a      	cmp	r2, r3
 8001646:	d006      	beq.n	8001656 <I2S_Init+0x1ae>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800164e:	461a      	mov	r2, r3
 8001650:	2304      	movs	r3, #4
 8001652:	429a      	cmp	r2, r3
 8001654:	d107      	bne.n	8001666 <I2S_Init+0x1be>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_0;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001664:	61da      	str	r2, [r3, #28]
	}

	// Standard
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SSTD;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8001674:	61da      	str	r2, [r3, #28]
	if(config->Standard == I2S_Standard.Standard_Philips){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800167c:	2201      	movs	r2, #1
 800167e:	4293      	cmp	r3, r2
 8001680:	d108      	bne.n	8001694 <I2S_Init+0x1ec>
		config->Port->I2SCFGR &= ~(SPI_I2SCFGR_I2SSTD);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8001690:	61da      	str	r2, [r3, #28]
 8001692:	e030      	b.n	80016f6 <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800169a:	2202      	movs	r2, #2
 800169c:	4293      	cmp	r3, r2
 800169e:	d108      	bne.n	80016b2 <I2S_Init+0x20a>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0210 	orr.w	r2, r2, #16
 80016ae:	61da      	str	r2, [r3, #28]
 80016b0:	e021      	b.n	80016f6 <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d108      	bne.n	80016d0 <I2S_Init+0x228>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69da      	ldr	r2, [r3, #28]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	61da      	str	r2, [r3, #28]
 80016ce:	e012      	b.n	80016f6 <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.PCM){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016d6:	2204      	movs	r2, #4
 80016d8:	4293      	cmp	r3, r2
 80016da:	d108      	bne.n	80016ee <I2S_Init+0x246>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80016ea:	61da      	str	r2, [r3, #28]
 80016ec:	e003      	b.n	80016f6 <I2S_Init+0x24e>
	}else{
		config->Error.Standard_Error  = true;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}

	// Data Length
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0206 	bic.w	r2, r2, #6
 8001704:	61da      	str	r2, [r3, #28]
	if(config->Data_Length == I2S_Data_Length._16_bit){
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800170c:	2201      	movs	r2, #1
 800170e:	4293      	cmp	r3, r2
 8001710:	d10e      	bne.n	8001730 <I2S_Init+0x288>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0206 	bic.w	r2, r2, #6
 8001720:	61da      	str	r2, [r3, #28]
 8001722:	e027      	b.n	8001774 <I2S_Init+0x2cc>
 8001724:	40003800 	.word	0x40003800
 8001728:	40023800 	.word	0x40023800
 800172c:	40003c00 	.word	0x40003c00
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001736:	2202      	movs	r2, #2
 8001738:	4293      	cmp	r3, r2
 800173a:	d108      	bne.n	800174e <I2S_Init+0x2a6>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0202 	orr.w	r2, r2, #2
 800174a:	61da      	str	r2, [r3, #28]
 800174c:	e012      	b.n	8001774 <I2S_Init+0x2cc>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001754:	2203      	movs	r2, #3
 8001756:	4293      	cmp	r3, r2
 8001758:	d108      	bne.n	800176c <I2S_Init+0x2c4>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	69da      	ldr	r2, [r3, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0204 	orr.w	r2, r2, #4
 8001768:	61da      	str	r2, [r3, #28]
 800176a:	e003      	b.n	8001774 <I2S_Init+0x2cc>
	}else{
		config->Error.Data_Len_Error = true;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	61da      	str	r2, [r3, #28]
	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800178a:	2201      	movs	r2, #1
 800178c:	4293      	cmp	r3, r2
 800178e:	d108      	bne.n	80017a2 <I2S_Init+0x2fa>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	61da      	str	r2, [r3, #28]
 80017a0:	e012      	b.n	80017c8 <I2S_Init+0x320>
	}else if(config->Channel_Length == I2S_Channel_Length._32_bit){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80017a8:	2203      	movs	r2, #3
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d108      	bne.n	80017c0 <I2S_Init+0x318>
		config->Port->I2SCFGR |=  SPI_I2SCFGR_CHLEN;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	61da      	str	r2, [r3, #28]
 80017be:	e003      	b.n	80017c8 <I2S_Init+0x320>
	}else{
		config->Error.Channel_Length_Error = true;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}


	int plli2s_n = 128;
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	60fb      	str	r3, [r7, #12]
	int plli2s_r = 5;
 80017cc:	2305      	movs	r3, #5
 80017ce:	60bb      	str	r3, [r7, #8]
	if(config->Audio_Frequency == I2S_Audio_Frequency._8000Hz)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80017d6:	461a      	mov	r2, r3
 80017d8:	2301      	movs	r3, #1
 80017da:	429a      	cmp	r2, r3
 80017dc:	d121      	bne.n	8001822 <I2S_Init+0x37a>
	{
		//
		  plli2s_n = 64;
 80017de:	2340      	movs	r3, #64	@ 0x40
 80017e0:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 80017e2:	2305      	movs	r3, #5
 80017e4:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	019a      	lsls	r2, r3, #6
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	071b      	lsls	r3, r3, #28
 80017ee:	431a      	orrs	r2, r3
 80017f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001a68 <I2S_Init+0x5c0>)
 80017f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80017f6:	4b9c      	ldr	r3, [pc, #624]	@ (8001a68 <I2S_Init+0x5c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a9b      	ldr	r2, [pc, #620]	@ (8001a68 <I2S_Init+0x5c0>)
 80017fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001800:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001802:	bf00      	nop
 8001804:	4b98      	ldr	r3, [pc, #608]	@ (8001a68 <I2S_Init+0x5c0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f9      	beq.n	8001804 <I2S_Init+0x35c>
		config->Port->I2SPR |= 50;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6a1a      	ldr	r2, [r3, #32]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 800181e:	621a      	str	r2, [r3, #32]
 8001820:	e136      	b.n	8001a90 <I2S_Init+0x5e8>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._16000Hz)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001828:	461a      	mov	r2, r3
 800182a:	2302      	movs	r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d121      	bne.n	8001874 <I2S_Init+0x3cc>
	{
		//
		  plli2s_n = 128;
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8001834:	2305      	movs	r3, #5
 8001836:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	019a      	lsls	r2, r3, #6
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	071b      	lsls	r3, r3, #28
 8001840:	431a      	orrs	r2, r3
 8001842:	4b89      	ldr	r3, [pc, #548]	@ (8001a68 <I2S_Init+0x5c0>)
 8001844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001848:	4b87      	ldr	r3, [pc, #540]	@ (8001a68 <I2S_Init+0x5c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a86      	ldr	r2, [pc, #536]	@ (8001a68 <I2S_Init+0x5c0>)
 800184e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001852:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001854:	bf00      	nop
 8001856:	4b84      	ldr	r3, [pc, #528]	@ (8001a68 <I2S_Init+0x5c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f9      	beq.n	8001856 <I2S_Init+0x3ae>
		config->Port->I2SPR |= 50;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8001870:	621a      	str	r2, [r3, #32]
 8001872:	e10d      	b.n	8001a90 <I2S_Init+0x5e8>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._22050Hz)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800187a:	461a      	mov	r2, r3
 800187c:	2303      	movs	r3, #3
 800187e:	429a      	cmp	r2, r3
 8001880:	d121      	bne.n	80018c6 <I2S_Init+0x41e>
	{
		//
		 plli2s_n = 141;
 8001882:	238d      	movs	r3, #141	@ 0x8d
 8001884:	60fb      	str	r3, [r7, #12]
		 plli2s_r = 5;
 8001886:	2305      	movs	r3, #5
 8001888:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	019a      	lsls	r2, r3, #6
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	071b      	lsls	r3, r3, #28
 8001892:	431a      	orrs	r2, r3
 8001894:	4b74      	ldr	r3, [pc, #464]	@ (8001a68 <I2S_Init+0x5c0>)
 8001896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 800189a:	4b73      	ldr	r3, [pc, #460]	@ (8001a68 <I2S_Init+0x5c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a72      	ldr	r2, [pc, #456]	@ (8001a68 <I2S_Init+0x5c0>)
 80018a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018a4:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80018a6:	bf00      	nop
 80018a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a68 <I2S_Init+0x5c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f9      	beq.n	80018a8 <I2S_Init+0x400>
		config->Port->I2SPR |= 40 | SPI_I2SPR_ODD;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7294 	orr.w	r2, r2, #296	@ 0x128
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	e0e4      	b.n	8001a90 <I2S_Init+0x5e8>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._32000Hz)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80018cc:	461a      	mov	r2, r3
 80018ce:	2304      	movs	r3, #4
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d121      	bne.n	8001918 <I2S_Init+0x470>
	{
		//
		  plli2s_n = 64;
 80018d4:	2340      	movs	r3, #64	@ 0x40
 80018d6:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 80018d8:	2305      	movs	r3, #5
 80018da:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	019a      	lsls	r2, r3, #6
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	071b      	lsls	r3, r3, #28
 80018e4:	431a      	orrs	r2, r3
 80018e6:	4b60      	ldr	r3, [pc, #384]	@ (8001a68 <I2S_Init+0x5c0>)
 80018e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80018ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001a68 <I2S_Init+0x5c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a68 <I2S_Init+0x5c0>)
 80018f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018f6:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80018f8:	bf00      	nop
 80018fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001a68 <I2S_Init+0x5c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f9      	beq.n	80018fa <I2S_Init+0x452>
		config->Port->I2SPR |= 12;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 020c 	orr.w	r2, r2, #12
 8001914:	621a      	str	r2, [r3, #32]
 8001916:	e0bb      	b.n	8001a90 <I2S_Init+0x5e8>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._44100Hz)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800191e:	461a      	mov	r2, r3
 8001920:	2305      	movs	r3, #5
 8001922:	429a      	cmp	r2, r3
 8001924:	d121      	bne.n	800196a <I2S_Init+0x4c2>
	{
		//
		  plli2s_n = 50;
 8001926:	2332      	movs	r3, #50	@ 0x32
 8001928:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 6;
 800192a:	2306      	movs	r3, #6
 800192c:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	019a      	lsls	r2, r3, #6
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	071b      	lsls	r3, r3, #28
 8001936:	431a      	orrs	r2, r3
 8001938:	4b4b      	ldr	r3, [pc, #300]	@ (8001a68 <I2S_Init+0x5c0>)
 800193a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 800193e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a68 <I2S_Init+0x5c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a49      	ldr	r2, [pc, #292]	@ (8001a68 <I2S_Init+0x5c0>)
 8001944:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001948:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 800194a:	bf00      	nop
 800194c:	4b46      	ldr	r3, [pc, #280]	@ (8001a68 <I2S_Init+0x5c0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f9      	beq.n	800194c <I2S_Init+0x4a4>
		config->Port->I2SPR |= 10 | SPI_I2SPR_ODD;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 7285 	orr.w	r2, r2, #266	@ 0x10a
 8001966:	621a      	str	r2, [r3, #32]
 8001968:	e092      	b.n	8001a90 <I2S_Init+0x5e8>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._48000Hz)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001970:	461a      	mov	r2, r3
 8001972:	2306      	movs	r3, #6
 8001974:	429a      	cmp	r2, r3
 8001976:	d125      	bne.n	80019c4 <I2S_Init+0x51c>
	{
		//
		  plli2s_n = 384/2;
 8001978:	23c0      	movs	r3, #192	@ 0xc0
 800197a:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 800197c:	2305      	movs	r3, #5
 800197e:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	019a      	lsls	r2, r3, #6
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	071b      	lsls	r3, r3, #28
 8001988:	431a      	orrs	r2, r3
 800198a:	4b37      	ldr	r3, [pc, #220]	@ (8001a68 <I2S_Init+0x5c0>)
 800198c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001990:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <I2S_Init+0x5c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a34      	ldr	r2, [pc, #208]	@ (8001a68 <I2S_Init+0x5c0>)
 8001996:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800199a:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 800199c:	bf00      	nop
 800199e:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <I2S_Init+0x5c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f9      	beq.n	800199e <I2S_Init+0x4f6>
		config->Port->I2SPR = (12);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	220c      	movs	r2, #12
 80019b0:	621a      	str	r2, [r3, #32]
		config->Port->I2SPR |= SPI_I2SPR_ODD;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a1a      	ldr	r2, [r3, #32]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019c0:	621a      	str	r2, [r3, #32]
 80019c2:	e065      	b.n	8001a90 <I2S_Init+0x5e8>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._64000Hz)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80019ca:	461a      	mov	r2, r3
 80019cc:	2307      	movs	r3, #7
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d121      	bne.n	8001a16 <I2S_Init+0x56e>
	{
		//
		  plli2s_n = 128;
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 80019d6:	2305      	movs	r3, #5
 80019d8:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	019a      	lsls	r2, r3, #6
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	071b      	lsls	r3, r3, #28
 80019e2:	431a      	orrs	r2, r3
 80019e4:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <I2S_Init+0x5c0>)
 80019e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <I2S_Init+0x5c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <I2S_Init+0x5c0>)
 80019f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019f4:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80019f6:	bf00      	nop
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <I2S_Init+0x5c0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f9      	beq.n	80019f8 <I2S_Init+0x550>
		config->Port->I2SPR |= 12;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 020c 	orr.w	r2, r2, #12
 8001a12:	621a      	str	r2, [r3, #32]
 8001a14:	e03c      	b.n	8001a90 <I2S_Init+0x5e8>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._96000Hz)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2308      	movs	r3, #8
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d123      	bne.n	8001a6c <I2S_Init+0x5c4>
	{
		//
		  plli2s_n = 192;
 8001a24:	23c0      	movs	r3, #192	@ 0xc0
 8001a26:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8001a28:	2305      	movs	r3, #5
 8001a2a:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	019a      	lsls	r2, r3, #6
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	071b      	lsls	r3, r3, #28
 8001a34:	431a      	orrs	r2, r3
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <I2S_Init+0x5c0>)
 8001a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <I2S_Init+0x5c0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <I2S_Init+0x5c0>)
 8001a42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a46:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001a48:	bf00      	nop
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <I2S_Init+0x5c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f9      	beq.n	8001a4a <I2S_Init+0x5a2>
		config->Port->I2SPR |= 12 ;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 020c 	orr.w	r2, r2, #12
 8001a64:	621a      	str	r2, [r3, #32]
 8001a66:	e013      	b.n	8001a90 <I2S_Init+0x5e8>
 8001a68:	40023800 	.word	0x40023800
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._192000Hz)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001a72:	461a      	mov	r2, r3
 8001a74:	2309      	movs	r3, #9
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d00a      	beq.n	8001a90 <I2S_Init+0x5e8>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._384000Hz)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001a80:	461a      	mov	r2, r3
 8001a82:	230a      	movs	r3, #10
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d003      	beq.n	8001a90 <I2S_Init+0x5e8>
	{
		//
	}else
	{
		config->Error.Audio_Frequency_Error = true;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	//  I2S Enable
	I2S_Start(config);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f80f 	bl	8001ab4 <I2S_Start>

//	I2S_Mode_Set(config);

	return 1;
 8001a96:	2301      	movs	r3, #1

}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa0 <I2S_Print_Errors>:
/********************************************************************************************************/
/********************************************************************************************************/
void I2S_Print_Errors(I2S_Config *config)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	if(config->Error.SCK_Pin_Error) printConsole("SCK_Pin_Error \r\n");
	if(config->Error.SD_Pin_Error) printConsole("SD_Pin_Error \r\n");
	if(config->Error.Standard_Error) printConsole("Standard_Error \r\n");
	if(config->Error.WS_Pin_Error) printConsole("WS_Pin_Error \r\n");
#endif
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <I2S_Start>:
/********************************************************************************************************/
void I2S_Start(I2S_Config *config)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001aca:	61da      	str	r2, [r3, #28]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <I2S_Stop>:
/********************************************************************************************************/
void I2S_Stop(I2S_Config *config)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR &= ~SPI_I2SCFGR_I2SE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aee:	61da      	str	r2, [r3, #28]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <I2S_Read_Data>:
	return retval;
}


void I2S_Read_Data(I2S_Config *config, uint32_t *data)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
	uint32_t retval[2];
	if(config->Data_Length == I2S_Data_Length._16_bit)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d112      	bne.n	8001b38 <I2S_Read_Data+0x3c>
	{
		while((config -> Port -> SR & SPI_SR_CHSIDE) == SPI_SR_CHSIDE){}
 8001b12:	bf00      	nop
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d0f8      	beq.n	8001b14 <I2S_Read_Data+0x18>
//		retval[0] = config -> Port -> DR;
		retval[1] =   config -> Port -> DR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60fb      	str	r3, [r7, #12]
		*data =  ((retval[1] << 16) | retval[0]);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	601a      	str	r2, [r3, #0]
		while((config -> Port -> SR & SPI_SR_CHSIDE) == SPI_SR_CHSIDE){}
		retval[0] = config -> Port -> DR;
		retval[1] =   config -> Port -> DR;
		*data =  ((retval[1] << 16) | retval[0]);
	}
}
 8001b36:	e021      	b.n	8001b7c <I2S_Read_Data+0x80>
	else if((config->Data_Length == I2S_Channel_Length._32_bit) || (config->Data_Length == I2S_Data_Length._24_bit))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b3e:	2203      	movs	r2, #3
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d005      	beq.n	8001b50 <I2S_Read_Data+0x54>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d115      	bne.n	8001b7c <I2S_Read_Data+0x80>
		while((config -> Port -> SR & SPI_SR_CHSIDE) == SPI_SR_CHSIDE){}
 8001b50:	bf00      	nop
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d0f8      	beq.n	8001b52 <I2S_Read_Data+0x56>
		retval[0] = config -> Port -> DR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	60bb      	str	r3, [r7, #8]
		retval[1] =   config -> Port -> DR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	60fb      	str	r3, [r7, #12]
		*data =  ((retval[1] << 16) | retval[0]);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <I2S_Select_Right_Channel>:
void I2S_Select_Left_Channel(I2S_Config *config)
{
	GPIO_Pin_Low(config->LR_Pin_Port, config->LR_Pin_Number);
}
void I2S_Select_Right_Channel(I2S_Config *config)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->LR_Pin_Port, config->LR_Pin_Number);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff f8cb 	bl	8000d38 <GPIO_Pin_High>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ffc2 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8001c4e:	23a8      	movs	r3, #168	@ 0xa8
 8001c50:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8001c56:	2307      	movs	r3, #7
 8001c58:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001c60:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3a      	ldr	r2, [pc, #232]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001c6c:	bf00      	nop
 8001c6e:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f9      	beq.n	8001c6e <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001c7a:	4b35      	ldr	r3, [pc, #212]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a34      	ldr	r2, [pc, #208]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001c86:	4b33      	ldr	r3, [pc, #204]	@ (8001d54 <MCU_Clock_Setup+0x110>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <MCU_Clock_Setup+0x110>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c90:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001c92:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <MCU_Clock_Setup+0x114>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a30      	ldr	r2, [pc, #192]	@ (8001d58 <MCU_Clock_Setup+0x114>)
 8001c98:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c9c:	f043 0305 	orr.w	r3, r3, #5
 8001ca0:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	793a      	ldrb	r2, [r7, #4]
 8001ca8:	0611      	lsls	r1, r2, #24
 8001caa:	797a      	ldrb	r2, [r7, #5]
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	79ba      	ldrb	r2, [r7, #6]
 8001cb2:	0192      	lsls	r2, r2, #6
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4a24      	ldr	r2, [pc, #144]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a22      	ldr	r2, [pc, #136]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ccc:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cdc:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001ce0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cec:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cf8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001cfa:	bf00      	nop
 8001cfc:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f9      	beq.n	8001cfc <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a10      	ldr	r2, [pc, #64]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001d14:	bf00      	nop
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d1f9      	bne.n	8001d16 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8001d22:	f000 f8df 	bl	8001ee4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <MCU_Clock_Setup+0x118>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <MCU_Clock_Setup+0x11c>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff63 	bl	8001c00 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <MCU_Clock_Setup+0x10c>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	18618619 	.word	0x18618619

08001d64 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <Delay_Config+0x2c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <Delay_Config+0x2c>)
 8001d70:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001d74:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <Delay_Config+0x2c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <Delay_Config+0x2c>)
 8001d7e:	2205      	movs	r2, #5
 8001d80:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8001d9a:	f7ff ff53 	bl	8001c44 <MCU_Clock_Setup>
	Delay_Config();
 8001d9e:	f7ff ffe1 	bl	8001d64 <Delay_Config>
	Console_Init(USART1, 230400);
 8001da2:	f44f 3161 	mov.w	r1, #230400	@ 0x38400
 8001da6:	4826      	ldr	r0, [pc, #152]	@ (8001e40 <main+0xac>)
 8001da8:	f7fe ff3e 	bl	8000c28 <Console_Init>


	I2S_DeInit(&INMP441_I2S);
 8001dac:	4825      	ldr	r0, [pc, #148]	@ (8001e44 <main+0xb0>)
 8001dae:	f7ff fb17 	bl	80013e0 <I2S_DeInit>


	INMP441_I2S.Port = I2S_Port.I2S2;
 8001db2:	4a25      	ldr	r2, [pc, #148]	@ (8001e48 <main+0xb4>)
 8001db4:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <main+0xb0>)
 8001db6:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 8001db8:	2306      	movs	r3, #6
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <main+0xb0>)
 8001dbe:	731a      	strb	r2, [r3, #12]
	INMP441_I2S.Channel_Length = I2S_Channel_Length._32_bit;
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <main+0xb0>)
 8001dc4:	72da      	strb	r2, [r3, #11]
	INMP441_I2S.Data_Length = I2S_Data_Length._16_bit;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <main+0xb0>)
 8001dca:	729a      	strb	r2, [r3, #10]
	INMP441_I2S.LR_Pin_Port = GPIOB;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <main+0xb0>)
 8001dce:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <main+0xb8>)
 8001dd0:	605a      	str	r2, [r3, #4]
	INMP441_I2S.LR_Pin_Number = 11;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <main+0xb0>)
 8001dd4:	220b      	movs	r2, #11
 8001dd6:	721a      	strb	r2, [r3, #8]
	INMP441_I2S.Standard = I2S_Standard.Standard_Philips;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <main+0xb0>)
 8001ddc:	725a      	strb	r2, [r3, #9]
	INMP441_I2S.Half_Duplex.Enable = true;
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <main+0xb0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	751a      	strb	r2, [r3, #20]
	INMP441_I2S.Half_Duplex.mode = I2S_Mode.Master.Receive;
 8001de4:	2302      	movs	r3, #2
 8001de6:	b25a      	sxtb	r2, r3
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <main+0xb0>)
 8001dea:	755a      	strb	r2, [r3, #21]
	INMP441_I2S.Half_Duplex.WS_Pin = I2S_Pin.WS.I2S2.PB12;
 8001dec:	2317      	movs	r3, #23
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <main+0xb0>)
 8001df2:	765a      	strb	r2, [r3, #25]
	INMP441_I2S.Half_Duplex.SD_Pin = I2S_Pin.SD.I2S2.PB15;
 8001df4:	2316      	movs	r3, #22
 8001df6:	b25a      	sxtb	r2, r3
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <main+0xb0>)
 8001dfa:	761a      	strb	r2, [r3, #24]
	INMP441_I2S.Half_Duplex.SCK_Pin = I2S_Pin.SCK.I2S2.PB10;
 8001dfc:	2315      	movs	r3, #21
 8001dfe:	b25a      	sxtb	r2, r3
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <main+0xb0>)
 8001e02:	75da      	strb	r2, [r3, #23]
	INMP441_I2S.Half_Duplex.MCK_Pin = I2S_Pin.MCK.I2S2.Disable;
 8001e04:	23ff      	movs	r3, #255	@ 0xff
 8001e06:	b25a      	sxtb	r2, r3
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <main+0xb0>)
 8001e0a:	759a      	strb	r2, [r3, #22]

	if(I2S_Init(&INMP441_I2S)) I2S_Print_Errors(&INMP441_I2S);
 8001e0c:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <main+0xb0>)
 8001e0e:	f7ff fb4b 	bl	80014a8 <I2S_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <main+0x8a>
 8001e18:	480a      	ldr	r0, [pc, #40]	@ (8001e44 <main+0xb0>)
 8001e1a:	f7ff fe41 	bl	8001aa0 <I2S_Print_Errors>



	I2S_Select_Right_Channel(&INMP441_I2S);
 8001e1e:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <main+0xb0>)
 8001e20:	f7ff feb2 	bl	8001b88 <I2S_Select_Right_Channel>
	uint32_t x = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]


	for(;;)
	{
		I2S_Read_Data(&INMP441_I2S,&x);
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <main+0xb0>)
 8001e2e:	f7ff fe65 	bl	8001afc <I2S_Read_Data>
		printConsole("%"PRId32"\r\n",x);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	@ (8001e50 <main+0xbc>)
 8001e38:	f7fe ff1c 	bl	8000c74 <printConsole>
		I2S_Read_Data(&INMP441_I2S,&x);
 8001e3c:	bf00      	nop
 8001e3e:	e7f3      	b.n	8001e28 <main+0x94>
 8001e40:	40011000 	.word	0x40011000
 8001e44:	20000088 	.word	0x20000088
 8001e48:	40003800 	.word	0x40003800
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	08003660 	.word	0x08003660

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f000 feec 	bl	8002c60 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20020000 	.word	0x20020000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	200000b0 	.word	0x200000b0
 8001ebc:	20000200 	.word	0x20000200

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	2302      	movs	r3, #2
 8001efc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <SystemCoreClockUpdate+0xec>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d011      	beq.n	8001f32 <SystemCoreClockUpdate+0x4e>
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d844      	bhi.n	8001f9e <SystemCoreClockUpdate+0xba>
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <SystemCoreClockUpdate+0x3e>
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d004      	beq.n	8001f2a <SystemCoreClockUpdate+0x46>
 8001f20:	e03d      	b.n	8001f9e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001f22:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd4 <SystemCoreClockUpdate+0xf0>)
 8001f24:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd8 <SystemCoreClockUpdate+0xf4>)
 8001f26:	601a      	str	r2, [r3, #0]
      break;
 8001f28:	e03d      	b.n	8001fa6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <SystemCoreClockUpdate+0xf0>)
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fdc <SystemCoreClockUpdate+0xf8>)
 8001f2e:	601a      	str	r2, [r3, #0]
      break;
 8001f30:	e039      	b.n	8001fa6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001f32:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <SystemCoreClockUpdate+0xec>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0d9b      	lsrs	r3, r3, #22
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f3e:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <SystemCoreClockUpdate+0xec>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f46:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001f4e:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <SystemCoreClockUpdate+0xf8>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <SystemCoreClockUpdate+0xec>)
 8001f58:	6852      	ldr	r2, [r2, #4]
 8001f5a:	0992      	lsrs	r2, r2, #6
 8001f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e00b      	b.n	8001f80 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001f68:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <SystemCoreClockUpdate+0xf4>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <SystemCoreClockUpdate+0xec>)
 8001f72:	6852      	ldr	r2, [r2, #4]
 8001f74:	0992      	lsrs	r2, r2, #6
 8001f76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <SystemCoreClockUpdate+0xec>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <SystemCoreClockUpdate+0xf0>)
 8001f9a:	6013      	str	r3, [r2, #0]
      break;
 8001f9c:	e003      	b.n	8001fa6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <SystemCoreClockUpdate+0xf0>)
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <SystemCoreClockUpdate+0xf4>)
 8001fa2:	601a      	str	r2, [r3, #0]
      break;
 8001fa4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <SystemCoreClockUpdate+0xec>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <SystemCoreClockUpdate+0xfc>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <SystemCoreClockUpdate+0xf0>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <SystemCoreClockUpdate+0xf0>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	08003668 	.word	0x08003668

08001fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fe6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fe8:	f7ff ff6a 	bl	8001ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fec:	480c      	ldr	r0, [pc, #48]	@ (8002020 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fee:	490d      	ldr	r1, [pc, #52]	@ (8002024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <LoopForever+0xe>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002004:	4c0a      	ldr	r4, [pc, #40]	@ (8002030 <LoopForever+0x16>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002012:	f000 fe2b 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002016:	f7ff febd 	bl	8001d94 <main>

0800201a <LoopForever>:

LoopForever:
  b LoopForever
 800201a:	e7fe      	b.n	800201a <LoopForever>
  ldr   r0, =_estack
 800201c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002024:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002028:	080036bc 	.word	0x080036bc
  ldr r2, =_sbss
 800202c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002030:	200001fc 	.word	0x200001fc

08002034 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002034:	e7fe      	b.n	8002034 <ADC_IRQHandler>

08002036 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	ed87 0b02 	vstr	d0, [r7, #8]
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8002044:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002048:	f7fe fd98 	bl	8000b7c <__aeabi_d2lz>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe faa2 	bl	800059c <__aeabi_l2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800206c:	f7fe f90c 	bl	8000288 <__aeabi_dsub>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	e9c1 2300 	strd	r2, r3, [r1]
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 800208a:	2200      	movs	r2, #0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8002090:	2200      	movs	r2, #0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 8002096:	2200      	movs	r2, #0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020a2:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 80020a4:	2203      	movs	r2, #3
 80020a6:	2301      	movs	r3, #1
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 80020b0:	2300      	movs	r3, #0
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	749a      	strb	r2, [r3, #18]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a47      	ldr	r2, [pc, #284]	@ (80021f0 <USART_Clock_Enable+0x12c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d112      	bne.n	80020fc <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	791b      	ldrb	r3, [r3, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	4293      	cmp	r3, r2
 80020de:	d106      	bne.n	80020ee <USART_Clock_Enable+0x2a>
 80020e0:	4b44      	ldr	r3, [pc, #272]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80020e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020e4:	4a43      	ldr	r2, [pc, #268]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80020e6:	f043 0310 	orr.w	r3, r3, #16
 80020ea:	6653      	str	r3, [r2, #100]	@ 0x64
 80020ec:	e079      	b.n	80021e2 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80020ee:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	4a40      	ldr	r2, [pc, #256]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fa:	e072      	b.n	80021e2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3d      	ldr	r2, [pc, #244]	@ (80021f8 <USART_Clock_Enable+0x134>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d112      	bne.n	800212c <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	791b      	ldrb	r3, [r3, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	4293      	cmp	r3, r2
 800210e:	d106      	bne.n	800211e <USART_Clock_Enable+0x5a>
 8002110:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002114:	4a37      	ldr	r2, [pc, #220]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211a:	6613      	str	r3, [r2, #96]	@ 0x60
 800211c:	e061      	b.n	80021e2 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800211e:	4b35      	ldr	r3, [pc, #212]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	4a34      	ldr	r2, [pc, #208]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002128:	6413      	str	r3, [r2, #64]	@ 0x40
 800212a:	e05a      	b.n	80021e2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a32      	ldr	r2, [pc, #200]	@ (80021fc <USART_Clock_Enable+0x138>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d112      	bne.n	800215c <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	791b      	ldrb	r3, [r3, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	4293      	cmp	r3, r2
 800213e:	d106      	bne.n	800214e <USART_Clock_Enable+0x8a>
 8002140:	4b2c      	ldr	r3, [pc, #176]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002144:	4a2b      	ldr	r2, [pc, #172]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214a:	6613      	str	r3, [r2, #96]	@ 0x60
 800214c:	e049      	b.n	80021e2 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 800214e:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a28      	ldr	r2, [pc, #160]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	e042      	b.n	80021e2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <USART_Clock_Enable+0x13c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10e      	bne.n	8002184 <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	791b      	ldrb	r3, [r3, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	4293      	cmp	r3, r2
 800216e:	d102      	bne.n	8002176 <USART_Clock_Enable+0xb2>
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
 8002174:	e036      	b.n	80021e4 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <USART_Clock_Enable+0x130>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <USART_Clock_Enable+0x130>)
 800217c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002180:	6413      	str	r3, [r2, #64]	@ 0x40
 8002182:	e02e      	b.n	80021e2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <USART_Clock_Enable+0x140>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10e      	bne.n	80021ac <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	791b      	ldrb	r3, [r3, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	4293      	cmp	r3, r2
 8002196:	d102      	bne.n	800219e <USART_Clock_Enable+0xda>
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	e022      	b.n	80021e4 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80021a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021aa:	e01a      	b.n	80021e2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a15      	ldr	r2, [pc, #84]	@ (8002208 <USART_Clock_Enable+0x144>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d112      	bne.n	80021dc <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4293      	cmp	r3, r2
 80021be:	d106      	bne.n	80021ce <USART_Clock_Enable+0x10a>
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80021c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021c4:	4a0b      	ldr	r2, [pc, #44]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80021c6:	f043 0320 	orr.w	r3, r3, #32
 80021ca:	6653      	str	r3, [r2, #100]	@ 0x64
 80021cc:	e009      	b.n	80021e2 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <USART_Clock_Enable+0x130>)
 80021d4:	f043 0320 	orr.w	r3, r3, #32
 80021d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021da:	e002      	b.n	80021e2 <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	e000      	b.n	80021e4 <USART_Clock_Enable+0x120>
	}
	return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40004800 	.word	0x40004800
 8002200:	40004c00 	.word	0x40004c00
 8002204:	40005000 	.word	0x40005000
 8002208:	40011400 	.word	0x40011400

0800220c <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 800220c:	b5b0      	push	{r4, r5, r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af04      	add	r7, sp, #16
 8002212:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4aa0      	ldr	r2, [pc, #640]	@ (800249c <PIN_Setup+0x290>)
 800221a:	4293      	cmp	r3, r2
 800221c:	f040 810d 	bne.w	800243a <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7b1b      	ldrb	r3, [r3, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7b1b      	ldrb	r3, [r3, #12]
 800222e:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002230:	4293      	cmp	r3, r2
 8002232:	d00a      	beq.n	800224a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7b1b      	ldrb	r3, [r3, #12]
 8002238:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 800223a:	4293      	cmp	r3, r2
 800223c:	d005      	beq.n	800224a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7b1b      	ldrb	r3, [r3, #12]
 8002242:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002244:	4293      	cmp	r3, r2
 8002246:	f040 80be 	bne.w	80023c6 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b5b      	ldrb	r3, [r3, #13]
 800224e:	2209      	movs	r2, #9
 8002250:	4293      	cmp	r3, r2
 8002252:	d10f      	bne.n	8002274 <PIN_Setup+0x68>
 8002254:	2009      	movs	r0, #9
 8002256:	2402      	movs	r4, #2
 8002258:	2500      	movs	r5, #0
 800225a:	2302      	movs	r3, #2
 800225c:	2200      	movs	r2, #0
 800225e:	2107      	movs	r1, #7
 8002260:	9102      	str	r1, [sp, #8]
 8002262:	9201      	str	r2, [sp, #4]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	462b      	mov	r3, r5
 8002268:	4622      	mov	r2, r4
 800226a:	4601      	mov	r1, r0
 800226c:	488c      	ldr	r0, [pc, #560]	@ (80024a0 <PIN_Setup+0x294>)
 800226e:	f7fe fdd3 	bl	8000e18 <GPIO_Pin_Init>
 8002272:	e013      	b.n	800229c <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7b5b      	ldrb	r3, [r3, #13]
 8002278:	2206      	movs	r2, #6
 800227a:	4293      	cmp	r3, r2
 800227c:	d10e      	bne.n	800229c <PIN_Setup+0x90>
 800227e:	2006      	movs	r0, #6
 8002280:	2402      	movs	r4, #2
 8002282:	2500      	movs	r5, #0
 8002284:	2302      	movs	r3, #2
 8002286:	2200      	movs	r2, #0
 8002288:	2107      	movs	r1, #7
 800228a:	9102      	str	r1, [sp, #8]
 800228c:	9201      	str	r2, [sp, #4]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	462b      	mov	r3, r5
 8002292:	4622      	mov	r2, r4
 8002294:	4601      	mov	r1, r0
 8002296:	4883      	ldr	r0, [pc, #524]	@ (80024a4 <PIN_Setup+0x298>)
 8002298:	f7fe fdbe 	bl	8000e18 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7b9b      	ldrb	r3, [r3, #14]
 80022a0:	220a      	movs	r2, #10
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10f      	bne.n	80022c6 <PIN_Setup+0xba>
 80022a6:	200a      	movs	r0, #10
 80022a8:	2402      	movs	r4, #2
 80022aa:	2500      	movs	r5, #0
 80022ac:	2302      	movs	r3, #2
 80022ae:	2200      	movs	r2, #0
 80022b0:	2107      	movs	r1, #7
 80022b2:	9102      	str	r1, [sp, #8]
 80022b4:	9201      	str	r2, [sp, #4]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	462b      	mov	r3, r5
 80022ba:	4622      	mov	r2, r4
 80022bc:	4601      	mov	r1, r0
 80022be:	4878      	ldr	r0, [pc, #480]	@ (80024a0 <PIN_Setup+0x294>)
 80022c0:	f7fe fdaa 	bl	8000e18 <GPIO_Pin_Init>
 80022c4:	e013      	b.n	80022ee <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7b9b      	ldrb	r3, [r3, #14]
 80022ca:	2207      	movs	r2, #7
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d10e      	bne.n	80022ee <PIN_Setup+0xe2>
 80022d0:	2007      	movs	r0, #7
 80022d2:	2402      	movs	r4, #2
 80022d4:	2500      	movs	r5, #0
 80022d6:	2302      	movs	r3, #2
 80022d8:	2200      	movs	r2, #0
 80022da:	2107      	movs	r1, #7
 80022dc:	9102      	str	r1, [sp, #8]
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	462b      	mov	r3, r5
 80022e4:	4622      	mov	r2, r4
 80022e6:	4601      	mov	r1, r0
 80022e8:	486e      	ldr	r0, [pc, #440]	@ (80024a4 <PIN_Setup+0x298>)
 80022ea:	f7fe fd95 	bl	8000e18 <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7b1b      	ldrb	r3, [r3, #12]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d113      	bne.n	8002320 <PIN_Setup+0x114>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7bdb      	ldrb	r3, [r3, #15]
 80022fc:	2208      	movs	r2, #8
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10e      	bne.n	8002320 <PIN_Setup+0x114>
 8002302:	2008      	movs	r0, #8
 8002304:	2402      	movs	r4, #2
 8002306:	2500      	movs	r5, #0
 8002308:	2302      	movs	r3, #2
 800230a:	2200      	movs	r2, #0
 800230c:	2107      	movs	r1, #7
 800230e:	9102      	str	r1, [sp, #8]
 8002310:	9201      	str	r2, [sp, #4]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	462b      	mov	r3, r5
 8002316:	4622      	mov	r2, r4
 8002318:	4601      	mov	r1, r0
 800231a:	4861      	ldr	r0, [pc, #388]	@ (80024a0 <PIN_Setup+0x294>)
 800231c:	f7fe fd7c 	bl	8000e18 <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7cdb      	ldrb	r3, [r3, #19]
 8002324:	2200      	movs	r2, #0
 8002326:	4293      	cmp	r3, r2
 8002328:	f000 83bb 	beq.w	8002aa2 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7cdb      	ldrb	r3, [r3, #19]
 8002330:	2201      	movs	r2, #1
 8002332:	4293      	cmp	r3, r2
 8002334:	d10e      	bne.n	8002354 <PIN_Setup+0x148>
 8002336:	200b      	movs	r0, #11
 8002338:	2402      	movs	r4, #2
 800233a:	2500      	movs	r5, #0
 800233c:	2302      	movs	r3, #2
 800233e:	2200      	movs	r2, #0
 8002340:	2107      	movs	r1, #7
 8002342:	9102      	str	r1, [sp, #8]
 8002344:	9201      	str	r2, [sp, #4]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	462b      	mov	r3, r5
 800234a:	4622      	mov	r2, r4
 800234c:	4601      	mov	r1, r0
 800234e:	4854      	ldr	r0, [pc, #336]	@ (80024a0 <PIN_Setup+0x294>)
 8002350:	f7fe fd62 	bl	8000e18 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7cdb      	ldrb	r3, [r3, #19]
 8002358:	2202      	movs	r2, #2
 800235a:	4293      	cmp	r3, r2
 800235c:	d10e      	bne.n	800237c <PIN_Setup+0x170>
 800235e:	200c      	movs	r0, #12
 8002360:	2402      	movs	r4, #2
 8002362:	2500      	movs	r5, #0
 8002364:	2302      	movs	r3, #2
 8002366:	2200      	movs	r2, #0
 8002368:	2107      	movs	r1, #7
 800236a:	9102      	str	r1, [sp, #8]
 800236c:	9201      	str	r2, [sp, #4]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	462b      	mov	r3, r5
 8002372:	4622      	mov	r2, r4
 8002374:	4601      	mov	r1, r0
 8002376:	484a      	ldr	r0, [pc, #296]	@ (80024a0 <PIN_Setup+0x294>)
 8002378:	f7fe fd4e 	bl	8000e18 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7cdb      	ldrb	r3, [r3, #19]
 8002380:	2203      	movs	r2, #3
 8002382:	4293      	cmp	r3, r2
 8002384:	f040 838d 	bne.w	8002aa2 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002388:	200b      	movs	r0, #11
 800238a:	2402      	movs	r4, #2
 800238c:	2500      	movs	r5, #0
 800238e:	2302      	movs	r3, #2
 8002390:	2200      	movs	r2, #0
 8002392:	2107      	movs	r1, #7
 8002394:	9102      	str	r1, [sp, #8]
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	462b      	mov	r3, r5
 800239c:	4622      	mov	r2, r4
 800239e:	4601      	mov	r1, r0
 80023a0:	483f      	ldr	r0, [pc, #252]	@ (80024a0 <PIN_Setup+0x294>)
 80023a2:	f7fe fd39 	bl	8000e18 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80023a6:	200c      	movs	r0, #12
 80023a8:	2402      	movs	r4, #2
 80023aa:	2500      	movs	r5, #0
 80023ac:	2302      	movs	r3, #2
 80023ae:	2200      	movs	r2, #0
 80023b0:	2107      	movs	r1, #7
 80023b2:	9102      	str	r1, [sp, #8]
 80023b4:	9201      	str	r2, [sp, #4]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	462b      	mov	r3, r5
 80023ba:	4622      	mov	r2, r4
 80023bc:	4601      	mov	r1, r0
 80023be:	4838      	ldr	r0, [pc, #224]	@ (80024a0 <PIN_Setup+0x294>)
 80023c0:	f7fe fd2a 	bl	8000e18 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80023c4:	e36d      	b.n	8002aa2 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7b1b      	ldrb	r3, [r3, #12]
 80023ca:	2206      	movs	r2, #6
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00a      	beq.n	80023e6 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7b1b      	ldrb	r3, [r3, #12]
 80023d4:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d005      	beq.n	80023e6 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7b1b      	ldrb	r3, [r3, #12]
 80023de:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80023e0:	4293      	cmp	r3, r2
 80023e2:	f040 8363 	bne.w	8002aac <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7b5b      	ldrb	r3, [r3, #13]
 80023ea:	2209      	movs	r2, #9
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10e      	bne.n	800240e <PIN_Setup+0x202>
 80023f0:	2009      	movs	r0, #9
 80023f2:	2402      	movs	r4, #2
 80023f4:	2500      	movs	r5, #0
 80023f6:	2302      	movs	r3, #2
 80023f8:	2200      	movs	r2, #0
 80023fa:	2107      	movs	r1, #7
 80023fc:	9102      	str	r1, [sp, #8]
 80023fe:	9201      	str	r2, [sp, #4]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	462b      	mov	r3, r5
 8002404:	4622      	mov	r2, r4
 8002406:	4601      	mov	r1, r0
 8002408:	4825      	ldr	r0, [pc, #148]	@ (80024a0 <PIN_Setup+0x294>)
 800240a:	f7fe fd05 	bl	8000e18 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7b1b      	ldrb	r3, [r3, #12]
 8002412:	2207      	movs	r2, #7
 8002414:	4293      	cmp	r3, r2
 8002416:	f040 8349 	bne.w	8002aac <PIN_Setup+0x8a0>
 800241a:	2008      	movs	r0, #8
 800241c:	2402      	movs	r4, #2
 800241e:	2500      	movs	r5, #0
 8002420:	2302      	movs	r3, #2
 8002422:	2200      	movs	r2, #0
 8002424:	2107      	movs	r1, #7
 8002426:	9102      	str	r1, [sp, #8]
 8002428:	9201      	str	r2, [sp, #4]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	462b      	mov	r3, r5
 800242e:	4622      	mov	r2, r4
 8002430:	4601      	mov	r1, r0
 8002432:	481b      	ldr	r0, [pc, #108]	@ (80024a0 <PIN_Setup+0x294>)
 8002434:	f7fe fcf0 	bl	8000e18 <GPIO_Pin_Init>
//
//		}
//	}


}
 8002438:	e338      	b.n	8002aac <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1a      	ldr	r2, [pc, #104]	@ (80024a8 <PIN_Setup+0x29c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	f040 817b 	bne.w	800273c <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7b1b      	ldrb	r3, [r3, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	4293      	cmp	r3, r2
 800244e:	d00f      	beq.n	8002470 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7b1b      	ldrb	r3, [r3, #12]
 8002454:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002456:	4293      	cmp	r3, r2
 8002458:	d00a      	beq.n	8002470 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7b1b      	ldrb	r3, [r3, #12]
 800245e:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d005      	beq.n	8002470 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7b1b      	ldrb	r3, [r3, #12]
 8002468:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 800246a:	4293      	cmp	r3, r2
 800246c:	f040 80f8 	bne.w	8002660 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7b5b      	ldrb	r3, [r3, #13]
 8002474:	2202      	movs	r2, #2
 8002476:	4293      	cmp	r3, r2
 8002478:	d118      	bne.n	80024ac <PIN_Setup+0x2a0>
 800247a:	2002      	movs	r0, #2
 800247c:	2402      	movs	r4, #2
 800247e:	2500      	movs	r5, #0
 8002480:	2302      	movs	r3, #2
 8002482:	2200      	movs	r2, #0
 8002484:	2107      	movs	r1, #7
 8002486:	9102      	str	r1, [sp, #8]
 8002488:	9201      	str	r2, [sp, #4]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	462b      	mov	r3, r5
 800248e:	4622      	mov	r2, r4
 8002490:	4601      	mov	r1, r0
 8002492:	4803      	ldr	r0, [pc, #12]	@ (80024a0 <PIN_Setup+0x294>)
 8002494:	f7fe fcc0 	bl	8000e18 <GPIO_Pin_Init>
 8002498:	e01c      	b.n	80024d4 <PIN_Setup+0x2c8>
 800249a:	bf00      	nop
 800249c:	40011000 	.word	0x40011000
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7b5b      	ldrb	r3, [r3, #13]
 80024b0:	2205      	movs	r2, #5
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10e      	bne.n	80024d4 <PIN_Setup+0x2c8>
 80024b6:	2005      	movs	r0, #5
 80024b8:	2402      	movs	r4, #2
 80024ba:	2500      	movs	r5, #0
 80024bc:	2302      	movs	r3, #2
 80024be:	2200      	movs	r2, #0
 80024c0:	2107      	movs	r1, #7
 80024c2:	9102      	str	r1, [sp, #8]
 80024c4:	9201      	str	r2, [sp, #4]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	462b      	mov	r3, r5
 80024ca:	4622      	mov	r2, r4
 80024cc:	4601      	mov	r1, r0
 80024ce:	4899      	ldr	r0, [pc, #612]	@ (8002734 <PIN_Setup+0x528>)
 80024d0:	f7fe fca2 	bl	8000e18 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7b9b      	ldrb	r3, [r3, #14]
 80024d8:	2203      	movs	r2, #3
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10f      	bne.n	80024fe <PIN_Setup+0x2f2>
 80024de:	2003      	movs	r0, #3
 80024e0:	2402      	movs	r4, #2
 80024e2:	2500      	movs	r5, #0
 80024e4:	2302      	movs	r3, #2
 80024e6:	2200      	movs	r2, #0
 80024e8:	2107      	movs	r1, #7
 80024ea:	9102      	str	r1, [sp, #8]
 80024ec:	9201      	str	r2, [sp, #4]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	462b      	mov	r3, r5
 80024f2:	4622      	mov	r2, r4
 80024f4:	4601      	mov	r1, r0
 80024f6:	4890      	ldr	r0, [pc, #576]	@ (8002738 <PIN_Setup+0x52c>)
 80024f8:	f7fe fc8e 	bl	8000e18 <GPIO_Pin_Init>
 80024fc:	e013      	b.n	8002526 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7b9b      	ldrb	r3, [r3, #14]
 8002502:	2206      	movs	r2, #6
 8002504:	4293      	cmp	r3, r2
 8002506:	d10e      	bne.n	8002526 <PIN_Setup+0x31a>
 8002508:	2006      	movs	r0, #6
 800250a:	2402      	movs	r4, #2
 800250c:	2500      	movs	r5, #0
 800250e:	2302      	movs	r3, #2
 8002510:	2200      	movs	r2, #0
 8002512:	2107      	movs	r1, #7
 8002514:	9102      	str	r1, [sp, #8]
 8002516:	9201      	str	r2, [sp, #4]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	462b      	mov	r3, r5
 800251c:	4622      	mov	r2, r4
 800251e:	4601      	mov	r1, r0
 8002520:	4884      	ldr	r0, [pc, #528]	@ (8002734 <PIN_Setup+0x528>)
 8002522:	f7fe fc79 	bl	8000e18 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	2202      	movs	r2, #2
 800252c:	4293      	cmp	r3, r2
 800252e:	d128      	bne.n	8002582 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7bdb      	ldrb	r3, [r3, #15]
 8002534:	2204      	movs	r2, #4
 8002536:	4293      	cmp	r3, r2
 8002538:	d10f      	bne.n	800255a <PIN_Setup+0x34e>
 800253a:	2004      	movs	r0, #4
 800253c:	2402      	movs	r4, #2
 800253e:	2500      	movs	r5, #0
 8002540:	2302      	movs	r3, #2
 8002542:	2200      	movs	r2, #0
 8002544:	2107      	movs	r1, #7
 8002546:	9102      	str	r1, [sp, #8]
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	462b      	mov	r3, r5
 800254e:	4622      	mov	r2, r4
 8002550:	4601      	mov	r1, r0
 8002552:	4879      	ldr	r0, [pc, #484]	@ (8002738 <PIN_Setup+0x52c>)
 8002554:	f7fe fc60 	bl	8000e18 <GPIO_Pin_Init>
 8002558:	e013      	b.n	8002582 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7bdb      	ldrb	r3, [r3, #15]
 800255e:	2207      	movs	r2, #7
 8002560:	4293      	cmp	r3, r2
 8002562:	d10e      	bne.n	8002582 <PIN_Setup+0x376>
 8002564:	2007      	movs	r0, #7
 8002566:	2402      	movs	r4, #2
 8002568:	2500      	movs	r5, #0
 800256a:	2302      	movs	r3, #2
 800256c:	2200      	movs	r2, #0
 800256e:	2107      	movs	r1, #7
 8002570:	9102      	str	r1, [sp, #8]
 8002572:	9201      	str	r2, [sp, #4]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	462b      	mov	r3, r5
 8002578:	4622      	mov	r2, r4
 800257a:	4601      	mov	r1, r0
 800257c:	486e      	ldr	r0, [pc, #440]	@ (8002738 <PIN_Setup+0x52c>)
 800257e:	f7fe fc4b 	bl	8000e18 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7cdb      	ldrb	r3, [r3, #19]
 8002586:	2200      	movs	r2, #0
 8002588:	4293      	cmp	r3, r2
 800258a:	d105      	bne.n	8002598 <PIN_Setup+0x38c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7cdb      	ldrb	r3, [r3, #19]
 8002590:	2203      	movs	r2, #3
 8002592:	4293      	cmp	r3, r2
 8002594:	f040 8287 	bne.w	8002aa6 <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7cdb      	ldrb	r3, [r3, #19]
 800259c:	2201      	movs	r2, #1
 800259e:	4293      	cmp	r3, r2
 80025a0:	d128      	bne.n	80025f4 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7bdb      	ldrb	r3, [r3, #15]
 80025a6:	2200      	movs	r2, #0
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d10f      	bne.n	80025cc <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025ac:	2000      	movs	r0, #0
 80025ae:	2402      	movs	r4, #2
 80025b0:	2500      	movs	r5, #0
 80025b2:	2302      	movs	r3, #2
 80025b4:	2200      	movs	r2, #0
 80025b6:	2107      	movs	r1, #7
 80025b8:	9102      	str	r1, [sp, #8]
 80025ba:	9201      	str	r2, [sp, #4]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	462b      	mov	r3, r5
 80025c0:	4622      	mov	r2, r4
 80025c2:	4601      	mov	r1, r0
 80025c4:	485c      	ldr	r0, [pc, #368]	@ (8002738 <PIN_Setup+0x52c>)
 80025c6:	f7fe fc27 	bl	8000e18 <GPIO_Pin_Init>
 80025ca:	e013      	b.n	80025f4 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7bdb      	ldrb	r3, [r3, #15]
 80025d0:	2203      	movs	r2, #3
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10e      	bne.n	80025f4 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025d6:	2003      	movs	r0, #3
 80025d8:	2402      	movs	r4, #2
 80025da:	2500      	movs	r5, #0
 80025dc:	2302      	movs	r3, #2
 80025de:	2200      	movs	r2, #0
 80025e0:	2107      	movs	r1, #7
 80025e2:	9102      	str	r1, [sp, #8]
 80025e4:	9201      	str	r2, [sp, #4]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	462b      	mov	r3, r5
 80025ea:	4622      	mov	r2, r4
 80025ec:	4601      	mov	r1, r0
 80025ee:	4851      	ldr	r0, [pc, #324]	@ (8002734 <PIN_Setup+0x528>)
 80025f0:	f7fe fc12 	bl	8000e18 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7cdb      	ldrb	r3, [r3, #19]
 80025f8:	2202      	movs	r2, #2
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d005      	beq.n	800260a <PIN_Setup+0x3fe>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7cdb      	ldrb	r3, [r3, #19]
 8002602:	2203      	movs	r2, #3
 8002604:	4293      	cmp	r3, r2
 8002606:	f040 824e 	bne.w	8002aa6 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7bdb      	ldrb	r3, [r3, #15]
 800260e:	2201      	movs	r2, #1
 8002610:	4293      	cmp	r3, r2
 8002612:	d10f      	bne.n	8002634 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002614:	2001      	movs	r0, #1
 8002616:	2402      	movs	r4, #2
 8002618:	2500      	movs	r5, #0
 800261a:	2302      	movs	r3, #2
 800261c:	2200      	movs	r2, #0
 800261e:	2107      	movs	r1, #7
 8002620:	9102      	str	r1, [sp, #8]
 8002622:	9201      	str	r2, [sp, #4]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	462b      	mov	r3, r5
 8002628:	4622      	mov	r2, r4
 800262a:	4601      	mov	r1, r0
 800262c:	4842      	ldr	r0, [pc, #264]	@ (8002738 <PIN_Setup+0x52c>)
 800262e:	f7fe fbf3 	bl	8000e18 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002632:	e238      	b.n	8002aa6 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7bdb      	ldrb	r3, [r3, #15]
 8002638:	2204      	movs	r2, #4
 800263a:	4293      	cmp	r3, r2
 800263c:	f040 8233 	bne.w	8002aa6 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002640:	2004      	movs	r0, #4
 8002642:	2402      	movs	r4, #2
 8002644:	2500      	movs	r5, #0
 8002646:	2302      	movs	r3, #2
 8002648:	2200      	movs	r2, #0
 800264a:	2107      	movs	r1, #7
 800264c:	9102      	str	r1, [sp, #8]
 800264e:	9201      	str	r2, [sp, #4]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	462b      	mov	r3, r5
 8002654:	4622      	mov	r2, r4
 8002656:	4601      	mov	r1, r0
 8002658:	4836      	ldr	r0, [pc, #216]	@ (8002734 <PIN_Setup+0x528>)
 800265a:	f7fe fbdd 	bl	8000e18 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800265e:	e222      	b.n	8002aa6 <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	2206      	movs	r2, #6
 8002666:	4293      	cmp	r3, r2
 8002668:	d00a      	beq.n	8002680 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7b1b      	ldrb	r3, [r3, #12]
 800266e:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002670:	4293      	cmp	r3, r2
 8002672:	d005      	beq.n	8002680 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b1b      	ldrb	r3, [r3, #12]
 8002678:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800267a:	4293      	cmp	r3, r2
 800267c:	f040 8216 	bne.w	8002aac <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7b5b      	ldrb	r3, [r3, #13]
 8002684:	2202      	movs	r2, #2
 8002686:	4293      	cmp	r3, r2
 8002688:	d10f      	bne.n	80026aa <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800268a:	2002      	movs	r0, #2
 800268c:	2402      	movs	r4, #2
 800268e:	2500      	movs	r5, #0
 8002690:	2302      	movs	r3, #2
 8002692:	2200      	movs	r2, #0
 8002694:	2107      	movs	r1, #7
 8002696:	9102      	str	r1, [sp, #8]
 8002698:	9201      	str	r2, [sp, #4]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	462b      	mov	r3, r5
 800269e:	4622      	mov	r2, r4
 80026a0:	4601      	mov	r1, r0
 80026a2:	4825      	ldr	r0, [pc, #148]	@ (8002738 <PIN_Setup+0x52c>)
 80026a4:	f7fe fbb8 	bl	8000e18 <GPIO_Pin_Init>
 80026a8:	e013      	b.n	80026d2 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7b5b      	ldrb	r3, [r3, #13]
 80026ae:	2205      	movs	r2, #5
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d10e      	bne.n	80026d2 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80026b4:	2005      	movs	r0, #5
 80026b6:	2402      	movs	r4, #2
 80026b8:	2500      	movs	r5, #0
 80026ba:	2302      	movs	r3, #2
 80026bc:	2200      	movs	r2, #0
 80026be:	2107      	movs	r1, #7
 80026c0:	9102      	str	r1, [sp, #8]
 80026c2:	9201      	str	r2, [sp, #4]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	462b      	mov	r3, r5
 80026c8:	4622      	mov	r2, r4
 80026ca:	4601      	mov	r1, r0
 80026cc:	4819      	ldr	r0, [pc, #100]	@ (8002734 <PIN_Setup+0x528>)
 80026ce:	f7fe fba3 	bl	8000e18 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7b1b      	ldrb	r3, [r3, #12]
 80026d6:	2207      	movs	r2, #7
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 81e7 	bne.w	8002aac <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7bdb      	ldrb	r3, [r3, #15]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d10f      	bne.n	8002708 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80026e8:	2004      	movs	r0, #4
 80026ea:	2402      	movs	r4, #2
 80026ec:	2500      	movs	r5, #0
 80026ee:	2302      	movs	r3, #2
 80026f0:	2200      	movs	r2, #0
 80026f2:	2107      	movs	r1, #7
 80026f4:	9102      	str	r1, [sp, #8]
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	462b      	mov	r3, r5
 80026fc:	4622      	mov	r2, r4
 80026fe:	4601      	mov	r1, r0
 8002700:	480d      	ldr	r0, [pc, #52]	@ (8002738 <PIN_Setup+0x52c>)
 8002702:	f7fe fb89 	bl	8000e18 <GPIO_Pin_Init>
}
 8002706:	e1d1      	b.n	8002aac <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7bdb      	ldrb	r3, [r3, #15]
 800270c:	2207      	movs	r2, #7
 800270e:	4293      	cmp	r3, r2
 8002710:	f040 81cc 	bne.w	8002aac <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002714:	2007      	movs	r0, #7
 8002716:	2402      	movs	r4, #2
 8002718:	2500      	movs	r5, #0
 800271a:	2302      	movs	r3, #2
 800271c:	2200      	movs	r2, #0
 800271e:	2107      	movs	r1, #7
 8002720:	9102      	str	r1, [sp, #8]
 8002722:	9201      	str	r2, [sp, #4]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	462b      	mov	r3, r5
 8002728:	4622      	mov	r2, r4
 800272a:	4601      	mov	r1, r0
 800272c:	4802      	ldr	r0, [pc, #8]	@ (8002738 <PIN_Setup+0x52c>)
 800272e:	f7fe fb73 	bl	8000e18 <GPIO_Pin_Init>
}
 8002732:	e1bb      	b.n	8002aac <PIN_Setup+0x8a0>
 8002734:	40020c00 	.word	0x40020c00
 8002738:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4aaa      	ldr	r2, [pc, #680]	@ (80029ec <PIN_Setup+0x7e0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	f040 81b2 	bne.w	8002aac <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7b1b      	ldrb	r3, [r3, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	4293      	cmp	r3, r2
 8002750:	d00f      	beq.n	8002772 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7b1b      	ldrb	r3, [r3, #12]
 8002756:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002758:	4293      	cmp	r3, r2
 800275a:	d00a      	beq.n	8002772 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7b1b      	ldrb	r3, [r3, #12]
 8002760:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002762:	4293      	cmp	r3, r2
 8002764:	d005      	beq.n	8002772 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7b1b      	ldrb	r3, [r3, #12]
 800276a:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	f040 8119 	bne.w	80029a4 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7b5b      	ldrb	r3, [r3, #13]
 8002776:	220b      	movs	r2, #11
 8002778:	4293      	cmp	r3, r2
 800277a:	d10f      	bne.n	800279c <PIN_Setup+0x590>
 800277c:	200b      	movs	r0, #11
 800277e:	2402      	movs	r4, #2
 8002780:	2500      	movs	r5, #0
 8002782:	2302      	movs	r3, #2
 8002784:	2200      	movs	r2, #0
 8002786:	2107      	movs	r1, #7
 8002788:	9102      	str	r1, [sp, #8]
 800278a:	9201      	str	r2, [sp, #4]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	462b      	mov	r3, r5
 8002790:	4622      	mov	r2, r4
 8002792:	4601      	mov	r1, r0
 8002794:	4896      	ldr	r0, [pc, #600]	@ (80029f0 <PIN_Setup+0x7e4>)
 8002796:	f7fe fb3f 	bl	8000e18 <GPIO_Pin_Init>
 800279a:	e028      	b.n	80027ee <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7b5b      	ldrb	r3, [r3, #13]
 80027a0:	220a      	movs	r2, #10
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10f      	bne.n	80027c6 <PIN_Setup+0x5ba>
 80027a6:	200a      	movs	r0, #10
 80027a8:	2402      	movs	r4, #2
 80027aa:	2500      	movs	r5, #0
 80027ac:	2302      	movs	r3, #2
 80027ae:	2200      	movs	r2, #0
 80027b0:	2107      	movs	r1, #7
 80027b2:	9102      	str	r1, [sp, #8]
 80027b4:	9201      	str	r2, [sp, #4]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	462b      	mov	r3, r5
 80027ba:	4622      	mov	r2, r4
 80027bc:	4601      	mov	r1, r0
 80027be:	488d      	ldr	r0, [pc, #564]	@ (80029f4 <PIN_Setup+0x7e8>)
 80027c0:	f7fe fb2a 	bl	8000e18 <GPIO_Pin_Init>
 80027c4:	e013      	b.n	80027ee <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7b5b      	ldrb	r3, [r3, #13]
 80027ca:	2208      	movs	r2, #8
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10e      	bne.n	80027ee <PIN_Setup+0x5e2>
 80027d0:	2008      	movs	r0, #8
 80027d2:	2402      	movs	r4, #2
 80027d4:	2500      	movs	r5, #0
 80027d6:	2302      	movs	r3, #2
 80027d8:	2200      	movs	r2, #0
 80027da:	2107      	movs	r1, #7
 80027dc:	9102      	str	r1, [sp, #8]
 80027de:	9201      	str	r2, [sp, #4]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	462b      	mov	r3, r5
 80027e4:	4622      	mov	r2, r4
 80027e6:	4601      	mov	r1, r0
 80027e8:	4882      	ldr	r0, [pc, #520]	@ (80029f4 <PIN_Setup+0x7e8>)
 80027ea:	f7fe fb15 	bl	8000e18 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7b9b      	ldrb	r3, [r3, #14]
 80027f2:	220a      	movs	r2, #10
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d10f      	bne.n	8002818 <PIN_Setup+0x60c>
 80027f8:	200a      	movs	r0, #10
 80027fa:	2402      	movs	r4, #2
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2200      	movs	r2, #0
 8002802:	2107      	movs	r1, #7
 8002804:	9102      	str	r1, [sp, #8]
 8002806:	9201      	str	r2, [sp, #4]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	462b      	mov	r3, r5
 800280c:	4622      	mov	r2, r4
 800280e:	4601      	mov	r1, r0
 8002810:	4877      	ldr	r0, [pc, #476]	@ (80029f0 <PIN_Setup+0x7e4>)
 8002812:	f7fe fb01 	bl	8000e18 <GPIO_Pin_Init>
 8002816:	e028      	b.n	800286a <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7b9b      	ldrb	r3, [r3, #14]
 800281c:	220b      	movs	r2, #11
 800281e:	4293      	cmp	r3, r2
 8002820:	d10f      	bne.n	8002842 <PIN_Setup+0x636>
 8002822:	200b      	movs	r0, #11
 8002824:	2402      	movs	r4, #2
 8002826:	2500      	movs	r5, #0
 8002828:	2302      	movs	r3, #2
 800282a:	2200      	movs	r2, #0
 800282c:	2107      	movs	r1, #7
 800282e:	9102      	str	r1, [sp, #8]
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	462b      	mov	r3, r5
 8002836:	4622      	mov	r2, r4
 8002838:	4601      	mov	r1, r0
 800283a:	486e      	ldr	r0, [pc, #440]	@ (80029f4 <PIN_Setup+0x7e8>)
 800283c:	f7fe faec 	bl	8000e18 <GPIO_Pin_Init>
 8002840:	e013      	b.n	800286a <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7b5b      	ldrb	r3, [r3, #13]
 8002846:	2208      	movs	r2, #8
 8002848:	4293      	cmp	r3, r2
 800284a:	d10e      	bne.n	800286a <PIN_Setup+0x65e>
 800284c:	2008      	movs	r0, #8
 800284e:	2402      	movs	r4, #2
 8002850:	2500      	movs	r5, #0
 8002852:	2302      	movs	r3, #2
 8002854:	2200      	movs	r2, #0
 8002856:	2107      	movs	r1, #7
 8002858:	9102      	str	r1, [sp, #8]
 800285a:	9201      	str	r2, [sp, #4]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	462b      	mov	r3, r5
 8002860:	4622      	mov	r2, r4
 8002862:	4601      	mov	r1, r0
 8002864:	4863      	ldr	r0, [pc, #396]	@ (80029f4 <PIN_Setup+0x7e8>)
 8002866:	f7fe fad7 	bl	8000e18 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7b1b      	ldrb	r3, [r3, #12]
 800286e:	2202      	movs	r2, #2
 8002870:	4293      	cmp	r3, r2
 8002872:	d128      	bne.n	80028c6 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7bdb      	ldrb	r3, [r3, #15]
 8002878:	220c      	movs	r2, #12
 800287a:	4293      	cmp	r3, r2
 800287c:	d10f      	bne.n	800289e <PIN_Setup+0x692>
 800287e:	200c      	movs	r0, #12
 8002880:	2402      	movs	r4, #2
 8002882:	2500      	movs	r5, #0
 8002884:	2302      	movs	r3, #2
 8002886:	2200      	movs	r2, #0
 8002888:	2107      	movs	r1, #7
 800288a:	9102      	str	r1, [sp, #8]
 800288c:	9201      	str	r2, [sp, #4]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	462b      	mov	r3, r5
 8002892:	4622      	mov	r2, r4
 8002894:	4601      	mov	r1, r0
 8002896:	4857      	ldr	r0, [pc, #348]	@ (80029f4 <PIN_Setup+0x7e8>)
 8002898:	f7fe fabe 	bl	8000e18 <GPIO_Pin_Init>
 800289c:	e013      	b.n	80028c6 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7bdb      	ldrb	r3, [r3, #15]
 80028a2:	220a      	movs	r2, #10
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10e      	bne.n	80028c6 <PIN_Setup+0x6ba>
 80028a8:	200a      	movs	r0, #10
 80028aa:	2402      	movs	r4, #2
 80028ac:	2500      	movs	r5, #0
 80028ae:	2302      	movs	r3, #2
 80028b0:	2200      	movs	r2, #0
 80028b2:	2107      	movs	r1, #7
 80028b4:	9102      	str	r1, [sp, #8]
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	462b      	mov	r3, r5
 80028bc:	4622      	mov	r2, r4
 80028be:	4601      	mov	r1, r0
 80028c0:	484d      	ldr	r0, [pc, #308]	@ (80029f8 <PIN_Setup+0x7ec>)
 80028c2:	f7fe faa9 	bl	8000e18 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7cdb      	ldrb	r3, [r3, #19]
 80028ca:	2200      	movs	r2, #0
 80028cc:	4293      	cmp	r3, r2
 80028ce:	f000 80ec 	beq.w	8002aaa <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7cdb      	ldrb	r3, [r3, #19]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <PIN_Setup+0x6da>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7cdb      	ldrb	r3, [r3, #19]
 80028e0:	2203      	movs	r2, #3
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d128      	bne.n	8002938 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7bdb      	ldrb	r3, [r3, #15]
 80028ea:	2200      	movs	r2, #0
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10f      	bne.n	8002910 <PIN_Setup+0x704>
 80028f0:	2000      	movs	r0, #0
 80028f2:	2402      	movs	r4, #2
 80028f4:	2500      	movs	r5, #0
 80028f6:	2302      	movs	r3, #2
 80028f8:	2200      	movs	r2, #0
 80028fa:	2107      	movs	r1, #7
 80028fc:	9102      	str	r1, [sp, #8]
 80028fe:	9201      	str	r2, [sp, #4]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	462b      	mov	r3, r5
 8002904:	4622      	mov	r2, r4
 8002906:	4601      	mov	r1, r0
 8002908:	483a      	ldr	r0, [pc, #232]	@ (80029f4 <PIN_Setup+0x7e8>)
 800290a:	f7fe fa85 	bl	8000e18 <GPIO_Pin_Init>
 800290e:	e013      	b.n	8002938 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7bdb      	ldrb	r3, [r3, #15]
 8002914:	2203      	movs	r2, #3
 8002916:	4293      	cmp	r3, r2
 8002918:	d10e      	bne.n	8002938 <PIN_Setup+0x72c>
 800291a:	2003      	movs	r0, #3
 800291c:	2402      	movs	r4, #2
 800291e:	2500      	movs	r5, #0
 8002920:	2302      	movs	r3, #2
 8002922:	2200      	movs	r2, #0
 8002924:	2107      	movs	r1, #7
 8002926:	9102      	str	r1, [sp, #8]
 8002928:	9201      	str	r2, [sp, #4]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	462b      	mov	r3, r5
 800292e:	4622      	mov	r2, r4
 8002930:	4601      	mov	r1, r0
 8002932:	4831      	ldr	r0, [pc, #196]	@ (80029f8 <PIN_Setup+0x7ec>)
 8002934:	f7fe fa70 	bl	8000e18 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7cdb      	ldrb	r3, [r3, #19]
 800293c:	2202      	movs	r2, #2
 800293e:	4293      	cmp	r3, r2
 8002940:	d005      	beq.n	800294e <PIN_Setup+0x742>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7cdb      	ldrb	r3, [r3, #19]
 8002946:	2203      	movs	r2, #3
 8002948:	4293      	cmp	r3, r2
 800294a:	f040 80ae 	bne.w	8002aaa <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7bdb      	ldrb	r3, [r3, #15]
 8002952:	2201      	movs	r2, #1
 8002954:	4293      	cmp	r3, r2
 8002956:	d10f      	bne.n	8002978 <PIN_Setup+0x76c>
 8002958:	2001      	movs	r0, #1
 800295a:	2402      	movs	r4, #2
 800295c:	2500      	movs	r5, #0
 800295e:	2302      	movs	r3, #2
 8002960:	2200      	movs	r2, #0
 8002962:	2107      	movs	r1, #7
 8002964:	9102      	str	r1, [sp, #8]
 8002966:	9201      	str	r2, [sp, #4]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	462b      	mov	r3, r5
 800296c:	4622      	mov	r2, r4
 800296e:	4601      	mov	r1, r0
 8002970:	4820      	ldr	r0, [pc, #128]	@ (80029f4 <PIN_Setup+0x7e8>)
 8002972:	f7fe fa51 	bl	8000e18 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002976:	e098      	b.n	8002aaa <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7bdb      	ldrb	r3, [r3, #15]
 800297c:	2204      	movs	r2, #4
 800297e:	4293      	cmp	r3, r2
 8002980:	f040 8093 	bne.w	8002aaa <PIN_Setup+0x89e>
 8002984:	2004      	movs	r0, #4
 8002986:	2402      	movs	r4, #2
 8002988:	2500      	movs	r5, #0
 800298a:	2302      	movs	r3, #2
 800298c:	2200      	movs	r2, #0
 800298e:	2107      	movs	r1, #7
 8002990:	9102      	str	r1, [sp, #8]
 8002992:	9201      	str	r2, [sp, #4]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	462b      	mov	r3, r5
 8002998:	4622      	mov	r2, r4
 800299a:	4601      	mov	r1, r0
 800299c:	4816      	ldr	r0, [pc, #88]	@ (80029f8 <PIN_Setup+0x7ec>)
 800299e:	f7fe fa3b 	bl	8000e18 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80029a2:	e082      	b.n	8002aaa <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7b1b      	ldrb	r3, [r3, #12]
 80029a8:	2206      	movs	r2, #6
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d009      	beq.n	80029c2 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7b1b      	ldrb	r3, [r3, #12]
 80029b2:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d004      	beq.n	80029c2 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7b1b      	ldrb	r3, [r3, #12]
 80029bc:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80029be:	4293      	cmp	r3, r2
 80029c0:	d174      	bne.n	8002aac <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7b5b      	ldrb	r3, [r3, #13]
 80029c6:	220b      	movs	r2, #11
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d117      	bne.n	80029fc <PIN_Setup+0x7f0>
 80029cc:	200b      	movs	r0, #11
 80029ce:	2402      	movs	r4, #2
 80029d0:	2500      	movs	r5, #0
 80029d2:	2302      	movs	r3, #2
 80029d4:	2200      	movs	r2, #0
 80029d6:	2107      	movs	r1, #7
 80029d8:	9102      	str	r1, [sp, #8]
 80029da:	9201      	str	r2, [sp, #4]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	462b      	mov	r3, r5
 80029e0:	4622      	mov	r2, r4
 80029e2:	4601      	mov	r1, r0
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <PIN_Setup+0x7e4>)
 80029e6:	f7fe fa17 	bl	8000e18 <GPIO_Pin_Init>
 80029ea:	e030      	b.n	8002a4e <PIN_Setup+0x842>
 80029ec:	40004800 	.word	0x40004800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7b5b      	ldrb	r3, [r3, #13]
 8002a00:	220a      	movs	r2, #10
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10f      	bne.n	8002a26 <PIN_Setup+0x81a>
 8002a06:	200a      	movs	r0, #10
 8002a08:	2402      	movs	r4, #2
 8002a0a:	2500      	movs	r5, #0
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2107      	movs	r1, #7
 8002a12:	9102      	str	r1, [sp, #8]
 8002a14:	9201      	str	r2, [sp, #4]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	462b      	mov	r3, r5
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	4601      	mov	r1, r0
 8002a1e:	4825      	ldr	r0, [pc, #148]	@ (8002ab4 <PIN_Setup+0x8a8>)
 8002a20:	f7fe f9fa 	bl	8000e18 <GPIO_Pin_Init>
 8002a24:	e013      	b.n	8002a4e <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7b5b      	ldrb	r3, [r3, #13]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10e      	bne.n	8002a4e <PIN_Setup+0x842>
 8002a30:	2008      	movs	r0, #8
 8002a32:	2402      	movs	r4, #2
 8002a34:	2500      	movs	r5, #0
 8002a36:	2302      	movs	r3, #2
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2107      	movs	r1, #7
 8002a3c:	9102      	str	r1, [sp, #8]
 8002a3e:	9201      	str	r2, [sp, #4]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	462b      	mov	r3, r5
 8002a44:	4622      	mov	r2, r4
 8002a46:	4601      	mov	r1, r0
 8002a48:	481a      	ldr	r0, [pc, #104]	@ (8002ab4 <PIN_Setup+0x8a8>)
 8002a4a:	f7fe f9e5 	bl	8000e18 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7bdb      	ldrb	r3, [r3, #15]
 8002a52:	220c      	movs	r2, #12
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10f      	bne.n	8002a78 <PIN_Setup+0x86c>
 8002a58:	200c      	movs	r0, #12
 8002a5a:	2402      	movs	r4, #2
 8002a5c:	2500      	movs	r5, #0
 8002a5e:	2302      	movs	r3, #2
 8002a60:	2200      	movs	r2, #0
 8002a62:	2107      	movs	r1, #7
 8002a64:	9102      	str	r1, [sp, #8]
 8002a66:	9201      	str	r2, [sp, #4]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	462b      	mov	r3, r5
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	4601      	mov	r1, r0
 8002a70:	4810      	ldr	r0, [pc, #64]	@ (8002ab4 <PIN_Setup+0x8a8>)
 8002a72:	f7fe f9d1 	bl	8000e18 <GPIO_Pin_Init>
}
 8002a76:	e019      	b.n	8002aac <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7bdb      	ldrb	r3, [r3, #15]
 8002a7c:	220a      	movs	r2, #10
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d114      	bne.n	8002aac <PIN_Setup+0x8a0>
 8002a82:	200a      	movs	r0, #10
 8002a84:	2402      	movs	r4, #2
 8002a86:	2500      	movs	r5, #0
 8002a88:	2302      	movs	r3, #2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2107      	movs	r1, #7
 8002a8e:	9102      	str	r1, [sp, #8]
 8002a90:	9201      	str	r2, [sp, #4]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	462b      	mov	r3, r5
 8002a96:	4622      	mov	r2, r4
 8002a98:	4601      	mov	r1, r0
 8002a9a:	4807      	ldr	r0, [pc, #28]	@ (8002ab8 <PIN_Setup+0x8ac>)
 8002a9c:	f7fe f9bc 	bl	8000e18 <GPIO_Pin_Init>
}
 8002aa0:	e004      	b.n	8002aac <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002aa2:	bf00      	nop
 8002aa4:	e002      	b.n	8002aac <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002aa6:	bf00      	nop
 8002aa8:	e000      	b.n	8002aac <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002aaa:	bf00      	nop
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	00000000 	.word	0x00000000

08002ac0 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	@ 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fafb 	bl	80020c4 <USART_Clock_Enable>
	PIN_Setup(config);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fb9c 	bl	800220c <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd13 	bl	8000504 <__aeabi_ui2d>
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8002c18 <USART_Init+0x158>)
 8002ae4:	f7fd fd88 	bl	80005f8 <__aeabi_dmul>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	a148      	add	r1, pc, #288	@ (adr r1, 8002c10 <USART_Init+0x150>)
 8002aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002af2:	f7fd feab 	bl	800084c <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8002afe:	f107 0208 	add.w	r2, r7, #8
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	ed97 0b08 	vldr	d0, [r7, #32]
 8002b0e:	f7ff fa92 	bl	8002036 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 8002b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	4b40      	ldr	r3, [pc, #256]	@ (8002c1c <USART_Init+0x15c>)
 8002b1c:	f7fd fd6c 	bl	80005f8 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	ec43 2b17 	vmov	d7, r2, r3
 8002b28:	eeb0 0a47 	vmov.f32	s0, s14
 8002b2c:	eef0 0a67 	vmov.f32	s1, s15
 8002b30:	f000 fd0e 	bl	8003550 <ceil>
 8002b34:	ec53 2b10 	vmov	r2, r3, d0
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fd fff6 	bl	8000b2c <__aeabi_d2iz>
 8002b40:	4603      	mov	r3, r0
 8002b42:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 8002b44:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b48:	eeb0 0a47 	vmov.f32	s0, s14
 8002b4c:	eef0 0a67 	vmov.f32	s1, s15
 8002b50:	f000 fcfe 	bl	8003550 <ceil>
 8002b54:	ec53 2b10 	vmov	r2, r3, d0
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f7fd ffe6 	bl	8000b2c <__aeabi_d2iz>
 8002b60:	4603      	mov	r3, r0
 8002b62:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b72:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	011a      	lsls	r2, r3, #4
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7d9b      	ldrb	r3, [r3, #22]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7c9b      	ldrb	r3, [r3, #18]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7d1b      	ldrb	r3, [r3, #20]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7b1b      	ldrb	r3, [r3, #12]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d107      	bne.n	8002bd8 <USART_Init+0x118>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7b1b      	ldrb	r3, [r3, #12]
 8002bdc:	2205      	movs	r2, #5
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d107      	bne.n	8002bf2 <USART_Init+0x132>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bf0:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 020c 	orr.w	r2, r2, #12
 8002c00:	60da      	str	r2, [r3, #12]

	return 1;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	@ 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	f3af 8000 	nop.w
 8002c10:	00000000 	.word	0x00000000
 8002c14:	41a406f4 	.word	0x41a406f4
 8002c18:	40400000 	.word	0x40400000
 8002c1c:	40300000 	.word	0x40300000

08002c20 <_vsiprintf_r>:
 8002c20:	b500      	push	{lr}
 8002c22:	b09b      	sub	sp, #108	@ 0x6c
 8002c24:	9100      	str	r1, [sp, #0]
 8002c26:	9104      	str	r1, [sp, #16]
 8002c28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002c2c:	9105      	str	r1, [sp, #20]
 8002c2e:	9102      	str	r1, [sp, #8]
 8002c30:	4905      	ldr	r1, [pc, #20]	@ (8002c48 <_vsiprintf_r+0x28>)
 8002c32:	9103      	str	r1, [sp, #12]
 8002c34:	4669      	mov	r1, sp
 8002c36:	f000 f993 	bl	8002f60 <_svfiprintf_r>
 8002c3a:	9b00      	ldr	r3, [sp, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	b01b      	add	sp, #108	@ 0x6c
 8002c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c46:	bf00      	nop
 8002c48:	ffff0208 	.word	0xffff0208

08002c4c <vsiprintf>:
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	460a      	mov	r2, r1
 8002c50:	4601      	mov	r1, r0
 8002c52:	4802      	ldr	r0, [pc, #8]	@ (8002c5c <vsiprintf+0x10>)
 8002c54:	6800      	ldr	r0, [r0, #0]
 8002c56:	f7ff bfe3 	b.w	8002c20 <_vsiprintf_r>
 8002c5a:	bf00      	nop
 8002c5c:	20000004 	.word	0x20000004

08002c60 <__errno>:
 8002c60:	4b01      	ldr	r3, [pc, #4]	@ (8002c68 <__errno+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000004 	.word	0x20000004

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ca4 <__libc_init_array+0x38>)
 8002c70:	4c0d      	ldr	r4, [pc, #52]	@ (8002ca8 <__libc_init_array+0x3c>)
 8002c72:	1b64      	subs	r4, r4, r5
 8002c74:	10a4      	asrs	r4, r4, #2
 8002c76:	2600      	movs	r6, #0
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8002cac <__libc_init_array+0x40>)
 8002c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002cb0 <__libc_init_array+0x44>)
 8002c80:	f000 fce2 	bl	8003648 <_init>
 8002c84:	1b64      	subs	r4, r4, r5
 8002c86:	10a4      	asrs	r4, r4, #2
 8002c88:	2600      	movs	r6, #0
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	080036b4 	.word	0x080036b4
 8002ca8:	080036b4 	.word	0x080036b4
 8002cac:	080036b4 	.word	0x080036b4
 8002cb0:	080036b8 	.word	0x080036b8

08002cb4 <__retarget_lock_acquire_recursive>:
 8002cb4:	4770      	bx	lr

08002cb6 <__retarget_lock_release_recursive>:
 8002cb6:	4770      	bx	lr

08002cb8 <_free_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4605      	mov	r5, r0
 8002cbc:	2900      	cmp	r1, #0
 8002cbe:	d041      	beq.n	8002d44 <_free_r+0x8c>
 8002cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc4:	1f0c      	subs	r4, r1, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bfb8      	it	lt
 8002cca:	18e4      	addlt	r4, r4, r3
 8002ccc:	f000 f8e0 	bl	8002e90 <__malloc_lock>
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <_free_r+0x90>)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	b933      	cbnz	r3, 8002ce4 <_free_r+0x2c>
 8002cd6:	6063      	str	r3, [r4, #4]
 8002cd8:	6014      	str	r4, [r2, #0]
 8002cda:	4628      	mov	r0, r5
 8002cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ce0:	f000 b8dc 	b.w	8002e9c <__malloc_unlock>
 8002ce4:	42a3      	cmp	r3, r4
 8002ce6:	d908      	bls.n	8002cfa <_free_r+0x42>
 8002ce8:	6820      	ldr	r0, [r4, #0]
 8002cea:	1821      	adds	r1, r4, r0
 8002cec:	428b      	cmp	r3, r1
 8002cee:	bf01      	itttt	eq
 8002cf0:	6819      	ldreq	r1, [r3, #0]
 8002cf2:	685b      	ldreq	r3, [r3, #4]
 8002cf4:	1809      	addeq	r1, r1, r0
 8002cf6:	6021      	streq	r1, [r4, #0]
 8002cf8:	e7ed      	b.n	8002cd6 <_free_r+0x1e>
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	b10b      	cbz	r3, 8002d04 <_free_r+0x4c>
 8002d00:	42a3      	cmp	r3, r4
 8002d02:	d9fa      	bls.n	8002cfa <_free_r+0x42>
 8002d04:	6811      	ldr	r1, [r2, #0]
 8002d06:	1850      	adds	r0, r2, r1
 8002d08:	42a0      	cmp	r0, r4
 8002d0a:	d10b      	bne.n	8002d24 <_free_r+0x6c>
 8002d0c:	6820      	ldr	r0, [r4, #0]
 8002d0e:	4401      	add	r1, r0
 8002d10:	1850      	adds	r0, r2, r1
 8002d12:	4283      	cmp	r3, r0
 8002d14:	6011      	str	r1, [r2, #0]
 8002d16:	d1e0      	bne.n	8002cda <_free_r+0x22>
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	6053      	str	r3, [r2, #4]
 8002d1e:	4408      	add	r0, r1
 8002d20:	6010      	str	r0, [r2, #0]
 8002d22:	e7da      	b.n	8002cda <_free_r+0x22>
 8002d24:	d902      	bls.n	8002d2c <_free_r+0x74>
 8002d26:	230c      	movs	r3, #12
 8002d28:	602b      	str	r3, [r5, #0]
 8002d2a:	e7d6      	b.n	8002cda <_free_r+0x22>
 8002d2c:	6820      	ldr	r0, [r4, #0]
 8002d2e:	1821      	adds	r1, r4, r0
 8002d30:	428b      	cmp	r3, r1
 8002d32:	bf04      	itt	eq
 8002d34:	6819      	ldreq	r1, [r3, #0]
 8002d36:	685b      	ldreq	r3, [r3, #4]
 8002d38:	6063      	str	r3, [r4, #4]
 8002d3a:	bf04      	itt	eq
 8002d3c:	1809      	addeq	r1, r1, r0
 8002d3e:	6021      	streq	r1, [r4, #0]
 8002d40:	6054      	str	r4, [r2, #4]
 8002d42:	e7ca      	b.n	8002cda <_free_r+0x22>
 8002d44:	bd38      	pop	{r3, r4, r5, pc}
 8002d46:	bf00      	nop
 8002d48:	200001f8 	.word	0x200001f8

08002d4c <sbrk_aligned>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8002d8c <sbrk_aligned+0x40>)
 8002d50:	460c      	mov	r4, r1
 8002d52:	6831      	ldr	r1, [r6, #0]
 8002d54:	4605      	mov	r5, r0
 8002d56:	b911      	cbnz	r1, 8002d5e <sbrk_aligned+0x12>
 8002d58:	f000 fba6 	bl	80034a8 <_sbrk_r>
 8002d5c:	6030      	str	r0, [r6, #0]
 8002d5e:	4621      	mov	r1, r4
 8002d60:	4628      	mov	r0, r5
 8002d62:	f000 fba1 	bl	80034a8 <_sbrk_r>
 8002d66:	1c43      	adds	r3, r0, #1
 8002d68:	d103      	bne.n	8002d72 <sbrk_aligned+0x26>
 8002d6a:	f04f 34ff 	mov.w	r4, #4294967295
 8002d6e:	4620      	mov	r0, r4
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
 8002d72:	1cc4      	adds	r4, r0, #3
 8002d74:	f024 0403 	bic.w	r4, r4, #3
 8002d78:	42a0      	cmp	r0, r4
 8002d7a:	d0f8      	beq.n	8002d6e <sbrk_aligned+0x22>
 8002d7c:	1a21      	subs	r1, r4, r0
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f000 fb92 	bl	80034a8 <_sbrk_r>
 8002d84:	3001      	adds	r0, #1
 8002d86:	d1f2      	bne.n	8002d6e <sbrk_aligned+0x22>
 8002d88:	e7ef      	b.n	8002d6a <sbrk_aligned+0x1e>
 8002d8a:	bf00      	nop
 8002d8c:	200001f4 	.word	0x200001f4

08002d90 <_malloc_r>:
 8002d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d94:	1ccd      	adds	r5, r1, #3
 8002d96:	f025 0503 	bic.w	r5, r5, #3
 8002d9a:	3508      	adds	r5, #8
 8002d9c:	2d0c      	cmp	r5, #12
 8002d9e:	bf38      	it	cc
 8002da0:	250c      	movcc	r5, #12
 8002da2:	2d00      	cmp	r5, #0
 8002da4:	4606      	mov	r6, r0
 8002da6:	db01      	blt.n	8002dac <_malloc_r+0x1c>
 8002da8:	42a9      	cmp	r1, r5
 8002daa:	d904      	bls.n	8002db6 <_malloc_r+0x26>
 8002dac:	230c      	movs	r3, #12
 8002dae:	6033      	str	r3, [r6, #0]
 8002db0:	2000      	movs	r0, #0
 8002db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e8c <_malloc_r+0xfc>
 8002dba:	f000 f869 	bl	8002e90 <__malloc_lock>
 8002dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8002dc2:	461c      	mov	r4, r3
 8002dc4:	bb44      	cbnz	r4, 8002e18 <_malloc_r+0x88>
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f7ff ffbf 	bl	8002d4c <sbrk_aligned>
 8002dce:	1c43      	adds	r3, r0, #1
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	d158      	bne.n	8002e86 <_malloc_r+0xf6>
 8002dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8002dd8:	4627      	mov	r7, r4
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d143      	bne.n	8002e66 <_malloc_r+0xd6>
 8002dde:	2c00      	cmp	r4, #0
 8002de0:	d04b      	beq.n	8002e7a <_malloc_r+0xea>
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	4639      	mov	r1, r7
 8002de6:	4630      	mov	r0, r6
 8002de8:	eb04 0903 	add.w	r9, r4, r3
 8002dec:	f000 fb5c 	bl	80034a8 <_sbrk_r>
 8002df0:	4581      	cmp	r9, r0
 8002df2:	d142      	bne.n	8002e7a <_malloc_r+0xea>
 8002df4:	6821      	ldr	r1, [r4, #0]
 8002df6:	1a6d      	subs	r5, r5, r1
 8002df8:	4629      	mov	r1, r5
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f7ff ffa6 	bl	8002d4c <sbrk_aligned>
 8002e00:	3001      	adds	r0, #1
 8002e02:	d03a      	beq.n	8002e7a <_malloc_r+0xea>
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	442b      	add	r3, r5
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	bb62      	cbnz	r2, 8002e6c <_malloc_r+0xdc>
 8002e12:	f8c8 7000 	str.w	r7, [r8]
 8002e16:	e00f      	b.n	8002e38 <_malloc_r+0xa8>
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	1b52      	subs	r2, r2, r5
 8002e1c:	d420      	bmi.n	8002e60 <_malloc_r+0xd0>
 8002e1e:	2a0b      	cmp	r2, #11
 8002e20:	d917      	bls.n	8002e52 <_malloc_r+0xc2>
 8002e22:	1961      	adds	r1, r4, r5
 8002e24:	42a3      	cmp	r3, r4
 8002e26:	6025      	str	r5, [r4, #0]
 8002e28:	bf18      	it	ne
 8002e2a:	6059      	strne	r1, [r3, #4]
 8002e2c:	6863      	ldr	r3, [r4, #4]
 8002e2e:	bf08      	it	eq
 8002e30:	f8c8 1000 	streq.w	r1, [r8]
 8002e34:	5162      	str	r2, [r4, r5]
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	4630      	mov	r0, r6
 8002e3a:	f000 f82f 	bl	8002e9c <__malloc_unlock>
 8002e3e:	f104 000b 	add.w	r0, r4, #11
 8002e42:	1d23      	adds	r3, r4, #4
 8002e44:	f020 0007 	bic.w	r0, r0, #7
 8002e48:	1ac2      	subs	r2, r0, r3
 8002e4a:	bf1c      	itt	ne
 8002e4c:	1a1b      	subne	r3, r3, r0
 8002e4e:	50a3      	strne	r3, [r4, r2]
 8002e50:	e7af      	b.n	8002db2 <_malloc_r+0x22>
 8002e52:	6862      	ldr	r2, [r4, #4]
 8002e54:	42a3      	cmp	r3, r4
 8002e56:	bf0c      	ite	eq
 8002e58:	f8c8 2000 	streq.w	r2, [r8]
 8002e5c:	605a      	strne	r2, [r3, #4]
 8002e5e:	e7eb      	b.n	8002e38 <_malloc_r+0xa8>
 8002e60:	4623      	mov	r3, r4
 8002e62:	6864      	ldr	r4, [r4, #4]
 8002e64:	e7ae      	b.n	8002dc4 <_malloc_r+0x34>
 8002e66:	463c      	mov	r4, r7
 8002e68:	687f      	ldr	r7, [r7, #4]
 8002e6a:	e7b6      	b.n	8002dda <_malloc_r+0x4a>
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	42a3      	cmp	r3, r4
 8002e72:	d1fb      	bne.n	8002e6c <_malloc_r+0xdc>
 8002e74:	2300      	movs	r3, #0
 8002e76:	6053      	str	r3, [r2, #4]
 8002e78:	e7de      	b.n	8002e38 <_malloc_r+0xa8>
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	6033      	str	r3, [r6, #0]
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f000 f80c 	bl	8002e9c <__malloc_unlock>
 8002e84:	e794      	b.n	8002db0 <_malloc_r+0x20>
 8002e86:	6005      	str	r5, [r0, #0]
 8002e88:	e7d6      	b.n	8002e38 <_malloc_r+0xa8>
 8002e8a:	bf00      	nop
 8002e8c:	200001f8 	.word	0x200001f8

08002e90 <__malloc_lock>:
 8002e90:	4801      	ldr	r0, [pc, #4]	@ (8002e98 <__malloc_lock+0x8>)
 8002e92:	f7ff bf0f 	b.w	8002cb4 <__retarget_lock_acquire_recursive>
 8002e96:	bf00      	nop
 8002e98:	200001f0 	.word	0x200001f0

08002e9c <__malloc_unlock>:
 8002e9c:	4801      	ldr	r0, [pc, #4]	@ (8002ea4 <__malloc_unlock+0x8>)
 8002e9e:	f7ff bf0a 	b.w	8002cb6 <__retarget_lock_release_recursive>
 8002ea2:	bf00      	nop
 8002ea4:	200001f0 	.word	0x200001f0

08002ea8 <__ssputs_r>:
 8002ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eac:	688e      	ldr	r6, [r1, #8]
 8002eae:	461f      	mov	r7, r3
 8002eb0:	42be      	cmp	r6, r7
 8002eb2:	680b      	ldr	r3, [r1, #0]
 8002eb4:	4682      	mov	sl, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	4690      	mov	r8, r2
 8002eba:	d82d      	bhi.n	8002f18 <__ssputs_r+0x70>
 8002ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ec0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ec4:	d026      	beq.n	8002f14 <__ssputs_r+0x6c>
 8002ec6:	6965      	ldr	r5, [r4, #20]
 8002ec8:	6909      	ldr	r1, [r1, #16]
 8002eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ece:	eba3 0901 	sub.w	r9, r3, r1
 8002ed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ed6:	1c7b      	adds	r3, r7, #1
 8002ed8:	444b      	add	r3, r9
 8002eda:	106d      	asrs	r5, r5, #1
 8002edc:	429d      	cmp	r5, r3
 8002ede:	bf38      	it	cc
 8002ee0:	461d      	movcc	r5, r3
 8002ee2:	0553      	lsls	r3, r2, #21
 8002ee4:	d527      	bpl.n	8002f36 <__ssputs_r+0x8e>
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7ff ff52 	bl	8002d90 <_malloc_r>
 8002eec:	4606      	mov	r6, r0
 8002eee:	b360      	cbz	r0, 8002f4a <__ssputs_r+0xa2>
 8002ef0:	6921      	ldr	r1, [r4, #16]
 8002ef2:	464a      	mov	r2, r9
 8002ef4:	f000 fae8 	bl	80034c8 <memcpy>
 8002ef8:	89a3      	ldrh	r3, [r4, #12]
 8002efa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f02:	81a3      	strh	r3, [r4, #12]
 8002f04:	6126      	str	r6, [r4, #16]
 8002f06:	6165      	str	r5, [r4, #20]
 8002f08:	444e      	add	r6, r9
 8002f0a:	eba5 0509 	sub.w	r5, r5, r9
 8002f0e:	6026      	str	r6, [r4, #0]
 8002f10:	60a5      	str	r5, [r4, #8]
 8002f12:	463e      	mov	r6, r7
 8002f14:	42be      	cmp	r6, r7
 8002f16:	d900      	bls.n	8002f1a <__ssputs_r+0x72>
 8002f18:	463e      	mov	r6, r7
 8002f1a:	6820      	ldr	r0, [r4, #0]
 8002f1c:	4632      	mov	r2, r6
 8002f1e:	4641      	mov	r1, r8
 8002f20:	f000 faa8 	bl	8003474 <memmove>
 8002f24:	68a3      	ldr	r3, [r4, #8]
 8002f26:	1b9b      	subs	r3, r3, r6
 8002f28:	60a3      	str	r3, [r4, #8]
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	4433      	add	r3, r6
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	2000      	movs	r0, #0
 8002f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f36:	462a      	mov	r2, r5
 8002f38:	f000 fad4 	bl	80034e4 <_realloc_r>
 8002f3c:	4606      	mov	r6, r0
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d1e0      	bne.n	8002f04 <__ssputs_r+0x5c>
 8002f42:	6921      	ldr	r1, [r4, #16]
 8002f44:	4650      	mov	r0, sl
 8002f46:	f7ff feb7 	bl	8002cb8 <_free_r>
 8002f4a:	230c      	movs	r3, #12
 8002f4c:	f8ca 3000 	str.w	r3, [sl]
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f56:	81a3      	strh	r3, [r4, #12]
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	e7e9      	b.n	8002f32 <__ssputs_r+0x8a>
	...

08002f60 <_svfiprintf_r>:
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	4698      	mov	r8, r3
 8002f66:	898b      	ldrh	r3, [r1, #12]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	b09d      	sub	sp, #116	@ 0x74
 8002f6c:	4607      	mov	r7, r0
 8002f6e:	460d      	mov	r5, r1
 8002f70:	4614      	mov	r4, r2
 8002f72:	d510      	bpl.n	8002f96 <_svfiprintf_r+0x36>
 8002f74:	690b      	ldr	r3, [r1, #16]
 8002f76:	b973      	cbnz	r3, 8002f96 <_svfiprintf_r+0x36>
 8002f78:	2140      	movs	r1, #64	@ 0x40
 8002f7a:	f7ff ff09 	bl	8002d90 <_malloc_r>
 8002f7e:	6028      	str	r0, [r5, #0]
 8002f80:	6128      	str	r0, [r5, #16]
 8002f82:	b930      	cbnz	r0, 8002f92 <_svfiprintf_r+0x32>
 8002f84:	230c      	movs	r3, #12
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	b01d      	add	sp, #116	@ 0x74
 8002f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f92:	2340      	movs	r3, #64	@ 0x40
 8002f94:	616b      	str	r3, [r5, #20]
 8002f96:	2300      	movs	r3, #0
 8002f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fa4:	2330      	movs	r3, #48	@ 0x30
 8002fa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003144 <_svfiprintf_r+0x1e4>
 8002faa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fae:	f04f 0901 	mov.w	r9, #1
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	469a      	mov	sl, r3
 8002fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fba:	b10a      	cbz	r2, 8002fc0 <_svfiprintf_r+0x60>
 8002fbc:	2a25      	cmp	r2, #37	@ 0x25
 8002fbe:	d1f9      	bne.n	8002fb4 <_svfiprintf_r+0x54>
 8002fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8002fc4:	d00b      	beq.n	8002fde <_svfiprintf_r+0x7e>
 8002fc6:	465b      	mov	r3, fp
 8002fc8:	4622      	mov	r2, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4638      	mov	r0, r7
 8002fce:	f7ff ff6b 	bl	8002ea8 <__ssputs_r>
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	f000 80a7 	beq.w	8003126 <_svfiprintf_r+0x1c6>
 8002fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002fda:	445a      	add	r2, fp
 8002fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002fde:	f89a 3000 	ldrb.w	r3, [sl]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 809f 	beq.w	8003126 <_svfiprintf_r+0x1c6>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295
 8002fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ff2:	f10a 0a01 	add.w	sl, sl, #1
 8002ff6:	9304      	str	r3, [sp, #16]
 8002ff8:	9307      	str	r3, [sp, #28]
 8002ffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003000:	4654      	mov	r4, sl
 8003002:	2205      	movs	r2, #5
 8003004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003008:	484e      	ldr	r0, [pc, #312]	@ (8003144 <_svfiprintf_r+0x1e4>)
 800300a:	f7fd f8e9 	bl	80001e0 <memchr>
 800300e:	9a04      	ldr	r2, [sp, #16]
 8003010:	b9d8      	cbnz	r0, 800304a <_svfiprintf_r+0xea>
 8003012:	06d0      	lsls	r0, r2, #27
 8003014:	bf44      	itt	mi
 8003016:	2320      	movmi	r3, #32
 8003018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800301c:	0711      	lsls	r1, r2, #28
 800301e:	bf44      	itt	mi
 8003020:	232b      	movmi	r3, #43	@ 0x2b
 8003022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003026:	f89a 3000 	ldrb.w	r3, [sl]
 800302a:	2b2a      	cmp	r3, #42	@ 0x2a
 800302c:	d015      	beq.n	800305a <_svfiprintf_r+0xfa>
 800302e:	9a07      	ldr	r2, [sp, #28]
 8003030:	4654      	mov	r4, sl
 8003032:	2000      	movs	r0, #0
 8003034:	f04f 0c0a 	mov.w	ip, #10
 8003038:	4621      	mov	r1, r4
 800303a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800303e:	3b30      	subs	r3, #48	@ 0x30
 8003040:	2b09      	cmp	r3, #9
 8003042:	d94b      	bls.n	80030dc <_svfiprintf_r+0x17c>
 8003044:	b1b0      	cbz	r0, 8003074 <_svfiprintf_r+0x114>
 8003046:	9207      	str	r2, [sp, #28]
 8003048:	e014      	b.n	8003074 <_svfiprintf_r+0x114>
 800304a:	eba0 0308 	sub.w	r3, r0, r8
 800304e:	fa09 f303 	lsl.w	r3, r9, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	9304      	str	r3, [sp, #16]
 8003056:	46a2      	mov	sl, r4
 8003058:	e7d2      	b.n	8003000 <_svfiprintf_r+0xa0>
 800305a:	9b03      	ldr	r3, [sp, #12]
 800305c:	1d19      	adds	r1, r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	9103      	str	r1, [sp, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	bfbb      	ittet	lt
 8003066:	425b      	neglt	r3, r3
 8003068:	f042 0202 	orrlt.w	r2, r2, #2
 800306c:	9307      	strge	r3, [sp, #28]
 800306e:	9307      	strlt	r3, [sp, #28]
 8003070:	bfb8      	it	lt
 8003072:	9204      	strlt	r2, [sp, #16]
 8003074:	7823      	ldrb	r3, [r4, #0]
 8003076:	2b2e      	cmp	r3, #46	@ 0x2e
 8003078:	d10a      	bne.n	8003090 <_svfiprintf_r+0x130>
 800307a:	7863      	ldrb	r3, [r4, #1]
 800307c:	2b2a      	cmp	r3, #42	@ 0x2a
 800307e:	d132      	bne.n	80030e6 <_svfiprintf_r+0x186>
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	1d1a      	adds	r2, r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800308c:	3402      	adds	r4, #2
 800308e:	9305      	str	r3, [sp, #20]
 8003090:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003154 <_svfiprintf_r+0x1f4>
 8003094:	7821      	ldrb	r1, [r4, #0]
 8003096:	2203      	movs	r2, #3
 8003098:	4650      	mov	r0, sl
 800309a:	f7fd f8a1 	bl	80001e0 <memchr>
 800309e:	b138      	cbz	r0, 80030b0 <_svfiprintf_r+0x150>
 80030a0:	9b04      	ldr	r3, [sp, #16]
 80030a2:	eba0 000a 	sub.w	r0, r0, sl
 80030a6:	2240      	movs	r2, #64	@ 0x40
 80030a8:	4082      	lsls	r2, r0
 80030aa:	4313      	orrs	r3, r2
 80030ac:	3401      	adds	r4, #1
 80030ae:	9304      	str	r3, [sp, #16]
 80030b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b4:	4824      	ldr	r0, [pc, #144]	@ (8003148 <_svfiprintf_r+0x1e8>)
 80030b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030ba:	2206      	movs	r2, #6
 80030bc:	f7fd f890 	bl	80001e0 <memchr>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d036      	beq.n	8003132 <_svfiprintf_r+0x1d2>
 80030c4:	4b21      	ldr	r3, [pc, #132]	@ (800314c <_svfiprintf_r+0x1ec>)
 80030c6:	bb1b      	cbnz	r3, 8003110 <_svfiprintf_r+0x1b0>
 80030c8:	9b03      	ldr	r3, [sp, #12]
 80030ca:	3307      	adds	r3, #7
 80030cc:	f023 0307 	bic.w	r3, r3, #7
 80030d0:	3308      	adds	r3, #8
 80030d2:	9303      	str	r3, [sp, #12]
 80030d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030d6:	4433      	add	r3, r6
 80030d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80030da:	e76a      	b.n	8002fb2 <_svfiprintf_r+0x52>
 80030dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80030e0:	460c      	mov	r4, r1
 80030e2:	2001      	movs	r0, #1
 80030e4:	e7a8      	b.n	8003038 <_svfiprintf_r+0xd8>
 80030e6:	2300      	movs	r3, #0
 80030e8:	3401      	adds	r4, #1
 80030ea:	9305      	str	r3, [sp, #20]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f04f 0c0a 	mov.w	ip, #10
 80030f2:	4620      	mov	r0, r4
 80030f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030f8:	3a30      	subs	r2, #48	@ 0x30
 80030fa:	2a09      	cmp	r2, #9
 80030fc:	d903      	bls.n	8003106 <_svfiprintf_r+0x1a6>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0c6      	beq.n	8003090 <_svfiprintf_r+0x130>
 8003102:	9105      	str	r1, [sp, #20]
 8003104:	e7c4      	b.n	8003090 <_svfiprintf_r+0x130>
 8003106:	fb0c 2101 	mla	r1, ip, r1, r2
 800310a:	4604      	mov	r4, r0
 800310c:	2301      	movs	r3, #1
 800310e:	e7f0      	b.n	80030f2 <_svfiprintf_r+0x192>
 8003110:	ab03      	add	r3, sp, #12
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	462a      	mov	r2, r5
 8003116:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <_svfiprintf_r+0x1f0>)
 8003118:	a904      	add	r1, sp, #16
 800311a:	4638      	mov	r0, r7
 800311c:	f3af 8000 	nop.w
 8003120:	1c42      	adds	r2, r0, #1
 8003122:	4606      	mov	r6, r0
 8003124:	d1d6      	bne.n	80030d4 <_svfiprintf_r+0x174>
 8003126:	89ab      	ldrh	r3, [r5, #12]
 8003128:	065b      	lsls	r3, r3, #25
 800312a:	f53f af2d 	bmi.w	8002f88 <_svfiprintf_r+0x28>
 800312e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003130:	e72c      	b.n	8002f8c <_svfiprintf_r+0x2c>
 8003132:	ab03      	add	r3, sp, #12
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	462a      	mov	r2, r5
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <_svfiprintf_r+0x1f0>)
 800313a:	a904      	add	r1, sp, #16
 800313c:	4638      	mov	r0, r7
 800313e:	f000 f879 	bl	8003234 <_printf_i>
 8003142:	e7ed      	b.n	8003120 <_svfiprintf_r+0x1c0>
 8003144:	08003678 	.word	0x08003678
 8003148:	08003682 	.word	0x08003682
 800314c:	00000000 	.word	0x00000000
 8003150:	08002ea9 	.word	0x08002ea9
 8003154:	0800367e 	.word	0x0800367e

08003158 <_printf_common>:
 8003158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800315c:	4616      	mov	r6, r2
 800315e:	4698      	mov	r8, r3
 8003160:	688a      	ldr	r2, [r1, #8]
 8003162:	690b      	ldr	r3, [r1, #16]
 8003164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003168:	4293      	cmp	r3, r2
 800316a:	bfb8      	it	lt
 800316c:	4613      	movlt	r3, r2
 800316e:	6033      	str	r3, [r6, #0]
 8003170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003174:	4607      	mov	r7, r0
 8003176:	460c      	mov	r4, r1
 8003178:	b10a      	cbz	r2, 800317e <_printf_common+0x26>
 800317a:	3301      	adds	r3, #1
 800317c:	6033      	str	r3, [r6, #0]
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	0699      	lsls	r1, r3, #26
 8003182:	bf42      	ittt	mi
 8003184:	6833      	ldrmi	r3, [r6, #0]
 8003186:	3302      	addmi	r3, #2
 8003188:	6033      	strmi	r3, [r6, #0]
 800318a:	6825      	ldr	r5, [r4, #0]
 800318c:	f015 0506 	ands.w	r5, r5, #6
 8003190:	d106      	bne.n	80031a0 <_printf_common+0x48>
 8003192:	f104 0a19 	add.w	sl, r4, #25
 8003196:	68e3      	ldr	r3, [r4, #12]
 8003198:	6832      	ldr	r2, [r6, #0]
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	42ab      	cmp	r3, r5
 800319e:	dc26      	bgt.n	80031ee <_printf_common+0x96>
 80031a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	3b00      	subs	r3, #0
 80031a8:	bf18      	it	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	0692      	lsls	r2, r2, #26
 80031ae:	d42b      	bmi.n	8003208 <_printf_common+0xb0>
 80031b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031b4:	4641      	mov	r1, r8
 80031b6:	4638      	mov	r0, r7
 80031b8:	47c8      	blx	r9
 80031ba:	3001      	adds	r0, #1
 80031bc:	d01e      	beq.n	80031fc <_printf_common+0xa4>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	6922      	ldr	r2, [r4, #16]
 80031c2:	f003 0306 	and.w	r3, r3, #6
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	bf02      	ittt	eq
 80031ca:	68e5      	ldreq	r5, [r4, #12]
 80031cc:	6833      	ldreq	r3, [r6, #0]
 80031ce:	1aed      	subeq	r5, r5, r3
 80031d0:	68a3      	ldr	r3, [r4, #8]
 80031d2:	bf0c      	ite	eq
 80031d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031d8:	2500      	movne	r5, #0
 80031da:	4293      	cmp	r3, r2
 80031dc:	bfc4      	itt	gt
 80031de:	1a9b      	subgt	r3, r3, r2
 80031e0:	18ed      	addgt	r5, r5, r3
 80031e2:	2600      	movs	r6, #0
 80031e4:	341a      	adds	r4, #26
 80031e6:	42b5      	cmp	r5, r6
 80031e8:	d11a      	bne.n	8003220 <_printf_common+0xc8>
 80031ea:	2000      	movs	r0, #0
 80031ec:	e008      	b.n	8003200 <_printf_common+0xa8>
 80031ee:	2301      	movs	r3, #1
 80031f0:	4652      	mov	r2, sl
 80031f2:	4641      	mov	r1, r8
 80031f4:	4638      	mov	r0, r7
 80031f6:	47c8      	blx	r9
 80031f8:	3001      	adds	r0, #1
 80031fa:	d103      	bne.n	8003204 <_printf_common+0xac>
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003204:	3501      	adds	r5, #1
 8003206:	e7c6      	b.n	8003196 <_printf_common+0x3e>
 8003208:	18e1      	adds	r1, r4, r3
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	2030      	movs	r0, #48	@ 0x30
 800320e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003212:	4422      	add	r2, r4
 8003214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800321c:	3302      	adds	r3, #2
 800321e:	e7c7      	b.n	80031b0 <_printf_common+0x58>
 8003220:	2301      	movs	r3, #1
 8003222:	4622      	mov	r2, r4
 8003224:	4641      	mov	r1, r8
 8003226:	4638      	mov	r0, r7
 8003228:	47c8      	blx	r9
 800322a:	3001      	adds	r0, #1
 800322c:	d0e6      	beq.n	80031fc <_printf_common+0xa4>
 800322e:	3601      	adds	r6, #1
 8003230:	e7d9      	b.n	80031e6 <_printf_common+0x8e>
	...

08003234 <_printf_i>:
 8003234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003238:	7e0f      	ldrb	r7, [r1, #24]
 800323a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800323c:	2f78      	cmp	r7, #120	@ 0x78
 800323e:	4691      	mov	r9, r2
 8003240:	4680      	mov	r8, r0
 8003242:	460c      	mov	r4, r1
 8003244:	469a      	mov	sl, r3
 8003246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800324a:	d807      	bhi.n	800325c <_printf_i+0x28>
 800324c:	2f62      	cmp	r7, #98	@ 0x62
 800324e:	d80a      	bhi.n	8003266 <_printf_i+0x32>
 8003250:	2f00      	cmp	r7, #0
 8003252:	f000 80d2 	beq.w	80033fa <_printf_i+0x1c6>
 8003256:	2f58      	cmp	r7, #88	@ 0x58
 8003258:	f000 80b9 	beq.w	80033ce <_printf_i+0x19a>
 800325c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003264:	e03a      	b.n	80032dc <_printf_i+0xa8>
 8003266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800326a:	2b15      	cmp	r3, #21
 800326c:	d8f6      	bhi.n	800325c <_printf_i+0x28>
 800326e:	a101      	add	r1, pc, #4	@ (adr r1, 8003274 <_printf_i+0x40>)
 8003270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003274:	080032cd 	.word	0x080032cd
 8003278:	080032e1 	.word	0x080032e1
 800327c:	0800325d 	.word	0x0800325d
 8003280:	0800325d 	.word	0x0800325d
 8003284:	0800325d 	.word	0x0800325d
 8003288:	0800325d 	.word	0x0800325d
 800328c:	080032e1 	.word	0x080032e1
 8003290:	0800325d 	.word	0x0800325d
 8003294:	0800325d 	.word	0x0800325d
 8003298:	0800325d 	.word	0x0800325d
 800329c:	0800325d 	.word	0x0800325d
 80032a0:	080033e1 	.word	0x080033e1
 80032a4:	0800330b 	.word	0x0800330b
 80032a8:	0800339b 	.word	0x0800339b
 80032ac:	0800325d 	.word	0x0800325d
 80032b0:	0800325d 	.word	0x0800325d
 80032b4:	08003403 	.word	0x08003403
 80032b8:	0800325d 	.word	0x0800325d
 80032bc:	0800330b 	.word	0x0800330b
 80032c0:	0800325d 	.word	0x0800325d
 80032c4:	0800325d 	.word	0x0800325d
 80032c8:	080033a3 	.word	0x080033a3
 80032cc:	6833      	ldr	r3, [r6, #0]
 80032ce:	1d1a      	adds	r2, r3, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6032      	str	r2, [r6, #0]
 80032d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032dc:	2301      	movs	r3, #1
 80032de:	e09d      	b.n	800341c <_printf_i+0x1e8>
 80032e0:	6833      	ldr	r3, [r6, #0]
 80032e2:	6820      	ldr	r0, [r4, #0]
 80032e4:	1d19      	adds	r1, r3, #4
 80032e6:	6031      	str	r1, [r6, #0]
 80032e8:	0606      	lsls	r6, r0, #24
 80032ea:	d501      	bpl.n	80032f0 <_printf_i+0xbc>
 80032ec:	681d      	ldr	r5, [r3, #0]
 80032ee:	e003      	b.n	80032f8 <_printf_i+0xc4>
 80032f0:	0645      	lsls	r5, r0, #25
 80032f2:	d5fb      	bpl.n	80032ec <_printf_i+0xb8>
 80032f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80032f8:	2d00      	cmp	r5, #0
 80032fa:	da03      	bge.n	8003304 <_printf_i+0xd0>
 80032fc:	232d      	movs	r3, #45	@ 0x2d
 80032fe:	426d      	negs	r5, r5
 8003300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003304:	4859      	ldr	r0, [pc, #356]	@ (800346c <_printf_i+0x238>)
 8003306:	230a      	movs	r3, #10
 8003308:	e011      	b.n	800332e <_printf_i+0xfa>
 800330a:	6821      	ldr	r1, [r4, #0]
 800330c:	6833      	ldr	r3, [r6, #0]
 800330e:	0608      	lsls	r0, r1, #24
 8003310:	f853 5b04 	ldr.w	r5, [r3], #4
 8003314:	d402      	bmi.n	800331c <_printf_i+0xe8>
 8003316:	0649      	lsls	r1, r1, #25
 8003318:	bf48      	it	mi
 800331a:	b2ad      	uxthmi	r5, r5
 800331c:	2f6f      	cmp	r7, #111	@ 0x6f
 800331e:	4853      	ldr	r0, [pc, #332]	@ (800346c <_printf_i+0x238>)
 8003320:	6033      	str	r3, [r6, #0]
 8003322:	bf14      	ite	ne
 8003324:	230a      	movne	r3, #10
 8003326:	2308      	moveq	r3, #8
 8003328:	2100      	movs	r1, #0
 800332a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800332e:	6866      	ldr	r6, [r4, #4]
 8003330:	60a6      	str	r6, [r4, #8]
 8003332:	2e00      	cmp	r6, #0
 8003334:	bfa2      	ittt	ge
 8003336:	6821      	ldrge	r1, [r4, #0]
 8003338:	f021 0104 	bicge.w	r1, r1, #4
 800333c:	6021      	strge	r1, [r4, #0]
 800333e:	b90d      	cbnz	r5, 8003344 <_printf_i+0x110>
 8003340:	2e00      	cmp	r6, #0
 8003342:	d04b      	beq.n	80033dc <_printf_i+0x1a8>
 8003344:	4616      	mov	r6, r2
 8003346:	fbb5 f1f3 	udiv	r1, r5, r3
 800334a:	fb03 5711 	mls	r7, r3, r1, r5
 800334e:	5dc7      	ldrb	r7, [r0, r7]
 8003350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003354:	462f      	mov	r7, r5
 8003356:	42bb      	cmp	r3, r7
 8003358:	460d      	mov	r5, r1
 800335a:	d9f4      	bls.n	8003346 <_printf_i+0x112>
 800335c:	2b08      	cmp	r3, #8
 800335e:	d10b      	bne.n	8003378 <_printf_i+0x144>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	07df      	lsls	r7, r3, #31
 8003364:	d508      	bpl.n	8003378 <_printf_i+0x144>
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	6861      	ldr	r1, [r4, #4]
 800336a:	4299      	cmp	r1, r3
 800336c:	bfde      	ittt	le
 800336e:	2330      	movle	r3, #48	@ 0x30
 8003370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003374:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003378:	1b92      	subs	r2, r2, r6
 800337a:	6122      	str	r2, [r4, #16]
 800337c:	f8cd a000 	str.w	sl, [sp]
 8003380:	464b      	mov	r3, r9
 8003382:	aa03      	add	r2, sp, #12
 8003384:	4621      	mov	r1, r4
 8003386:	4640      	mov	r0, r8
 8003388:	f7ff fee6 	bl	8003158 <_printf_common>
 800338c:	3001      	adds	r0, #1
 800338e:	d14a      	bne.n	8003426 <_printf_i+0x1f2>
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	b004      	add	sp, #16
 8003396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	4833      	ldr	r0, [pc, #204]	@ (8003470 <_printf_i+0x23c>)
 80033a4:	2778      	movs	r7, #120	@ 0x78
 80033a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	6831      	ldr	r1, [r6, #0]
 80033ae:	061f      	lsls	r7, r3, #24
 80033b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80033b4:	d402      	bmi.n	80033bc <_printf_i+0x188>
 80033b6:	065f      	lsls	r7, r3, #25
 80033b8:	bf48      	it	mi
 80033ba:	b2ad      	uxthmi	r5, r5
 80033bc:	6031      	str	r1, [r6, #0]
 80033be:	07d9      	lsls	r1, r3, #31
 80033c0:	bf44      	itt	mi
 80033c2:	f043 0320 	orrmi.w	r3, r3, #32
 80033c6:	6023      	strmi	r3, [r4, #0]
 80033c8:	b11d      	cbz	r5, 80033d2 <_printf_i+0x19e>
 80033ca:	2310      	movs	r3, #16
 80033cc:	e7ac      	b.n	8003328 <_printf_i+0xf4>
 80033ce:	4827      	ldr	r0, [pc, #156]	@ (800346c <_printf_i+0x238>)
 80033d0:	e7e9      	b.n	80033a6 <_printf_i+0x172>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f023 0320 	bic.w	r3, r3, #32
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	e7f6      	b.n	80033ca <_printf_i+0x196>
 80033dc:	4616      	mov	r6, r2
 80033de:	e7bd      	b.n	800335c <_printf_i+0x128>
 80033e0:	6833      	ldr	r3, [r6, #0]
 80033e2:	6825      	ldr	r5, [r4, #0]
 80033e4:	6961      	ldr	r1, [r4, #20]
 80033e6:	1d18      	adds	r0, r3, #4
 80033e8:	6030      	str	r0, [r6, #0]
 80033ea:	062e      	lsls	r6, r5, #24
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	d501      	bpl.n	80033f4 <_printf_i+0x1c0>
 80033f0:	6019      	str	r1, [r3, #0]
 80033f2:	e002      	b.n	80033fa <_printf_i+0x1c6>
 80033f4:	0668      	lsls	r0, r5, #25
 80033f6:	d5fb      	bpl.n	80033f0 <_printf_i+0x1bc>
 80033f8:	8019      	strh	r1, [r3, #0]
 80033fa:	2300      	movs	r3, #0
 80033fc:	6123      	str	r3, [r4, #16]
 80033fe:	4616      	mov	r6, r2
 8003400:	e7bc      	b.n	800337c <_printf_i+0x148>
 8003402:	6833      	ldr	r3, [r6, #0]
 8003404:	1d1a      	adds	r2, r3, #4
 8003406:	6032      	str	r2, [r6, #0]
 8003408:	681e      	ldr	r6, [r3, #0]
 800340a:	6862      	ldr	r2, [r4, #4]
 800340c:	2100      	movs	r1, #0
 800340e:	4630      	mov	r0, r6
 8003410:	f7fc fee6 	bl	80001e0 <memchr>
 8003414:	b108      	cbz	r0, 800341a <_printf_i+0x1e6>
 8003416:	1b80      	subs	r0, r0, r6
 8003418:	6060      	str	r0, [r4, #4]
 800341a:	6863      	ldr	r3, [r4, #4]
 800341c:	6123      	str	r3, [r4, #16]
 800341e:	2300      	movs	r3, #0
 8003420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003424:	e7aa      	b.n	800337c <_printf_i+0x148>
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	4632      	mov	r2, r6
 800342a:	4649      	mov	r1, r9
 800342c:	4640      	mov	r0, r8
 800342e:	47d0      	blx	sl
 8003430:	3001      	adds	r0, #1
 8003432:	d0ad      	beq.n	8003390 <_printf_i+0x15c>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	079b      	lsls	r3, r3, #30
 8003438:	d413      	bmi.n	8003462 <_printf_i+0x22e>
 800343a:	68e0      	ldr	r0, [r4, #12]
 800343c:	9b03      	ldr	r3, [sp, #12]
 800343e:	4298      	cmp	r0, r3
 8003440:	bfb8      	it	lt
 8003442:	4618      	movlt	r0, r3
 8003444:	e7a6      	b.n	8003394 <_printf_i+0x160>
 8003446:	2301      	movs	r3, #1
 8003448:	4632      	mov	r2, r6
 800344a:	4649      	mov	r1, r9
 800344c:	4640      	mov	r0, r8
 800344e:	47d0      	blx	sl
 8003450:	3001      	adds	r0, #1
 8003452:	d09d      	beq.n	8003390 <_printf_i+0x15c>
 8003454:	3501      	adds	r5, #1
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	9903      	ldr	r1, [sp, #12]
 800345a:	1a5b      	subs	r3, r3, r1
 800345c:	42ab      	cmp	r3, r5
 800345e:	dcf2      	bgt.n	8003446 <_printf_i+0x212>
 8003460:	e7eb      	b.n	800343a <_printf_i+0x206>
 8003462:	2500      	movs	r5, #0
 8003464:	f104 0619 	add.w	r6, r4, #25
 8003468:	e7f5      	b.n	8003456 <_printf_i+0x222>
 800346a:	bf00      	nop
 800346c:	08003689 	.word	0x08003689
 8003470:	0800369a 	.word	0x0800369a

08003474 <memmove>:
 8003474:	4288      	cmp	r0, r1
 8003476:	b510      	push	{r4, lr}
 8003478:	eb01 0402 	add.w	r4, r1, r2
 800347c:	d902      	bls.n	8003484 <memmove+0x10>
 800347e:	4284      	cmp	r4, r0
 8003480:	4623      	mov	r3, r4
 8003482:	d807      	bhi.n	8003494 <memmove+0x20>
 8003484:	1e43      	subs	r3, r0, #1
 8003486:	42a1      	cmp	r1, r4
 8003488:	d008      	beq.n	800349c <memmove+0x28>
 800348a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800348e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003492:	e7f8      	b.n	8003486 <memmove+0x12>
 8003494:	4402      	add	r2, r0
 8003496:	4601      	mov	r1, r0
 8003498:	428a      	cmp	r2, r1
 800349a:	d100      	bne.n	800349e <memmove+0x2a>
 800349c:	bd10      	pop	{r4, pc}
 800349e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034a6:	e7f7      	b.n	8003498 <memmove+0x24>

080034a8 <_sbrk_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4d06      	ldr	r5, [pc, #24]	@ (80034c4 <_sbrk_r+0x1c>)
 80034ac:	2300      	movs	r3, #0
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	f7fe fcce 	bl	8001e54 <_sbrk>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_sbrk_r+0x1a>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_sbrk_r+0x1a>
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	200001ec 	.word	0x200001ec

080034c8 <memcpy>:
 80034c8:	440a      	add	r2, r1
 80034ca:	4291      	cmp	r1, r2
 80034cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80034d0:	d100      	bne.n	80034d4 <memcpy+0xc>
 80034d2:	4770      	bx	lr
 80034d4:	b510      	push	{r4, lr}
 80034d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034de:	4291      	cmp	r1, r2
 80034e0:	d1f9      	bne.n	80034d6 <memcpy+0xe>
 80034e2:	bd10      	pop	{r4, pc}

080034e4 <_realloc_r>:
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	4680      	mov	r8, r0
 80034ea:	4615      	mov	r5, r2
 80034ec:	460c      	mov	r4, r1
 80034ee:	b921      	cbnz	r1, 80034fa <_realloc_r+0x16>
 80034f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f4:	4611      	mov	r1, r2
 80034f6:	f7ff bc4b 	b.w	8002d90 <_malloc_r>
 80034fa:	b92a      	cbnz	r2, 8003508 <_realloc_r+0x24>
 80034fc:	f7ff fbdc 	bl	8002cb8 <_free_r>
 8003500:	2400      	movs	r4, #0
 8003502:	4620      	mov	r0, r4
 8003504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003508:	f000 f81a 	bl	8003540 <_malloc_usable_size_r>
 800350c:	4285      	cmp	r5, r0
 800350e:	4606      	mov	r6, r0
 8003510:	d802      	bhi.n	8003518 <_realloc_r+0x34>
 8003512:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003516:	d8f4      	bhi.n	8003502 <_realloc_r+0x1e>
 8003518:	4629      	mov	r1, r5
 800351a:	4640      	mov	r0, r8
 800351c:	f7ff fc38 	bl	8002d90 <_malloc_r>
 8003520:	4607      	mov	r7, r0
 8003522:	2800      	cmp	r0, #0
 8003524:	d0ec      	beq.n	8003500 <_realloc_r+0x1c>
 8003526:	42b5      	cmp	r5, r6
 8003528:	462a      	mov	r2, r5
 800352a:	4621      	mov	r1, r4
 800352c:	bf28      	it	cs
 800352e:	4632      	movcs	r2, r6
 8003530:	f7ff ffca 	bl	80034c8 <memcpy>
 8003534:	4621      	mov	r1, r4
 8003536:	4640      	mov	r0, r8
 8003538:	f7ff fbbe 	bl	8002cb8 <_free_r>
 800353c:	463c      	mov	r4, r7
 800353e:	e7e0      	b.n	8003502 <_realloc_r+0x1e>

08003540 <_malloc_usable_size_r>:
 8003540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003544:	1f18      	subs	r0, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfbc      	itt	lt
 800354a:	580b      	ldrlt	r3, [r1, r0]
 800354c:	18c0      	addlt	r0, r0, r3
 800354e:	4770      	bx	lr

08003550 <ceil>:
 8003550:	ec51 0b10 	vmov	r0, r1, d0
 8003554:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8003560:	2e13      	cmp	r6, #19
 8003562:	460c      	mov	r4, r1
 8003564:	4605      	mov	r5, r0
 8003566:	4680      	mov	r8, r0
 8003568:	dc2e      	bgt.n	80035c8 <ceil+0x78>
 800356a:	2e00      	cmp	r6, #0
 800356c:	da11      	bge.n	8003592 <ceil+0x42>
 800356e:	a332      	add	r3, pc, #200	@ (adr r3, 8003638 <ceil+0xe8>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fc fe8a 	bl	800028c <__adddf3>
 8003578:	2200      	movs	r2, #0
 800357a:	2300      	movs	r3, #0
 800357c:	f7fd facc 	bl	8000b18 <__aeabi_dcmpgt>
 8003580:	b120      	cbz	r0, 800358c <ceil+0x3c>
 8003582:	2c00      	cmp	r4, #0
 8003584:	db4f      	blt.n	8003626 <ceil+0xd6>
 8003586:	4325      	orrs	r5, r4
 8003588:	d151      	bne.n	800362e <ceil+0xde>
 800358a:	462c      	mov	r4, r5
 800358c:	4621      	mov	r1, r4
 800358e:	4628      	mov	r0, r5
 8003590:	e023      	b.n	80035da <ceil+0x8a>
 8003592:	4f2b      	ldr	r7, [pc, #172]	@ (8003640 <ceil+0xf0>)
 8003594:	4137      	asrs	r7, r6
 8003596:	ea01 0307 	and.w	r3, r1, r7
 800359a:	4303      	orrs	r3, r0
 800359c:	d01d      	beq.n	80035da <ceil+0x8a>
 800359e:	a326      	add	r3, pc, #152	@ (adr r3, 8003638 <ceil+0xe8>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f7fc fe72 	bl	800028c <__adddf3>
 80035a8:	2200      	movs	r2, #0
 80035aa:	2300      	movs	r3, #0
 80035ac:	f7fd fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d0eb      	beq.n	800358c <ceil+0x3c>
 80035b4:	2c00      	cmp	r4, #0
 80035b6:	bfc2      	ittt	gt
 80035b8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80035bc:	4133      	asrgt	r3, r6
 80035be:	18e4      	addgt	r4, r4, r3
 80035c0:	ea24 0407 	bic.w	r4, r4, r7
 80035c4:	2500      	movs	r5, #0
 80035c6:	e7e1      	b.n	800358c <ceil+0x3c>
 80035c8:	2e33      	cmp	r6, #51	@ 0x33
 80035ca:	dd0a      	ble.n	80035e2 <ceil+0x92>
 80035cc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80035d0:	d103      	bne.n	80035da <ceil+0x8a>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	f7fc fe59 	bl	800028c <__adddf3>
 80035da:	ec41 0b10 	vmov	d0, r0, r1
 80035de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80035e6:	f04f 37ff 	mov.w	r7, #4294967295
 80035ea:	40df      	lsrs	r7, r3
 80035ec:	4238      	tst	r0, r7
 80035ee:	d0f4      	beq.n	80035da <ceil+0x8a>
 80035f0:	a311      	add	r3, pc, #68	@ (adr r3, 8003638 <ceil+0xe8>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f7fc fe49 	bl	800028c <__adddf3>
 80035fa:	2200      	movs	r2, #0
 80035fc:	2300      	movs	r3, #0
 80035fe:	f7fd fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8003602:	2800      	cmp	r0, #0
 8003604:	d0c2      	beq.n	800358c <ceil+0x3c>
 8003606:	2c00      	cmp	r4, #0
 8003608:	dd0a      	ble.n	8003620 <ceil+0xd0>
 800360a:	2e14      	cmp	r6, #20
 800360c:	d101      	bne.n	8003612 <ceil+0xc2>
 800360e:	3401      	adds	r4, #1
 8003610:	e006      	b.n	8003620 <ceil+0xd0>
 8003612:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003616:	2301      	movs	r3, #1
 8003618:	40b3      	lsls	r3, r6
 800361a:	441d      	add	r5, r3
 800361c:	45a8      	cmp	r8, r5
 800361e:	d8f6      	bhi.n	800360e <ceil+0xbe>
 8003620:	ea25 0507 	bic.w	r5, r5, r7
 8003624:	e7b2      	b.n	800358c <ceil+0x3c>
 8003626:	2500      	movs	r5, #0
 8003628:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800362c:	e7ae      	b.n	800358c <ceil+0x3c>
 800362e:	4c05      	ldr	r4, [pc, #20]	@ (8003644 <ceil+0xf4>)
 8003630:	2500      	movs	r5, #0
 8003632:	e7ab      	b.n	800358c <ceil+0x3c>
 8003634:	f3af 8000 	nop.w
 8003638:	8800759c 	.word	0x8800759c
 800363c:	7e37e43c 	.word	0x7e37e43c
 8003640:	000fffff 	.word	0x000fffff
 8003644:	3ff00000 	.word	0x3ff00000

08003648 <_init>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr

08003654 <_fini>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr
