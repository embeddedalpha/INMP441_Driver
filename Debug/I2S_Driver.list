
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b18  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb0  08002cb0  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  08002cb0  08002cb0  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cb0  08002cb0  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb0  08002cb0  00003cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cb4  08002cb4  00003cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002cb8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004004  2**0
                  CONTENTS
 10 .bss          0000005c  20000004  20000004  00004004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00004004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007506  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c6f  00000000  00000000  0000b53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  0000c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a9  00000000  00000000  0000c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0f6  00000000  00000000  0000c5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004cbc  00000000  00000000  00026697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008edfc  00000000  00000000  0002b353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ba14f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ad8  00000000  00000000  000ba194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000bac6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c88 	.word	0x08002c88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002c88 	.word	0x08002c88

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2lz>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	460d      	mov	r5, r1
 8000ace:	f7ff ffa9 	bl	8000a24 <__aeabi_dcmplt>
 8000ad2:	b928      	cbnz	r0, 8000ae0 <__aeabi_d2lz+0x1c>
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000adc:	f000 b80a 	b.w	8000af4 <__aeabi_d2ulz>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ae6:	f000 f805 	bl	8000af4 <__aeabi_d2ulz>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2ulz>:
 8000af4:	b5d0      	push	{r4, r6, r7, lr}
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__aeabi_d2ulz+0x34>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4606      	mov	r6, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	f7ff fd1f 	bl	8000540 <__aeabi_dmul>
 8000b02:	f000 f815 	bl	8000b30 <__aeabi_d2uiz>
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fca0 	bl	800044c <__aeabi_ui2d>
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <__aeabi_d2ulz+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f7ff fd16 	bl	8000540 <__aeabi_dmul>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4630      	mov	r0, r6
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	f7ff fb58 	bl	80001d0 <__aeabi_dsub>
 8000b20:	f000 f806 	bl	8000b30 <__aeabi_d2uiz>
 8000b24:	4621      	mov	r1, r4
 8000b26:	bdd0      	pop	{r4, r6, r7, pc}
 8000b28:	3df00000 	.word	0x3df00000
 8000b2c:	41f00000 	.word	0x41f00000

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 8000b7a:	480e      	ldr	r0, [pc, #56]	@ (8000bb4 <Console_Init+0x44>)
 8000b7c:	f001 fa15 	bl	8001faa <USART_Config_Reset>
	 serial.Port = USART1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <Console_Init+0x44>)
 8000b82:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <Console_Init+0x48>)
 8000b84:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <Console_Init+0x44>)
 8000b8a:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <Console_Init+0x44>)
 8000b90:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <Console_Init+0x44>)
 8000b98:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <Console_Init+0x44>)
 8000b9e:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <Console_Init+0x44>)
 8000ba4:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8000ba6:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <Console_Init+0x44>)
 8000ba8:	f001 ff1e 	bl	80029e8 <USART_Init>


}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000020 	.word	0x20000020
 8000bb8:	40011000 	.word	0x40011000

08000bbc <GPIO_Pin_Low>:
	Port -> ODR = 1 << pin;
}


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	43d2      	mvns	r2, r2
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	615a      	str	r2, [r3, #20]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a25      	ldr	r2, [pc, #148]	@ (8000c88 <GPIO_Clock_Enable+0xa0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d106      	bne.n	8000c06 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	4a23      	ldr	r2, [pc, #140]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c04:	e039      	b.n	8000c7a <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <GPIO_Clock_Enable+0xa8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	e02e      	b.n	8000c7a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c94 <GPIO_Clock_Enable+0xac>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8000c24:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	4a18      	ldr	r2, [pc, #96]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c30:	e023      	b.n	8000c7a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <GPIO_Clock_Enable+0xb0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d106      	bne.n	8000c48 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	e018      	b.n	8000c7a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <GPIO_Clock_Enable+0xb4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5c:	e00d      	b.n	8000c7a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <GPIO_Clock_Enable+0xb8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d106      	bne.n	8000c74 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <GPIO_Clock_Enable+0xa4>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	e002      	b.n	8000c7a <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e000      	b.n	8000c7c <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40021c00 	.word	0x40021c00

08000ca4 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	70fb      	strb	r3, [r7, #3]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	70bb      	strb	r3, [r7, #2]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff92 	bl	8000be8 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	78b9      	ldrb	r1, [r7, #2]
 8000cca:	78fa      	ldrb	r2, [r7, #3]
 8000ccc:	0052      	lsls	r2, r2, #1
 8000cce:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	7879      	ldrb	r1, [r7, #1]
 8000cde:	78fa      	ldrb	r2, [r7, #3]
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	7c39      	ldrb	r1, [r7, #16]
 8000cf0:	78fa      	ldrb	r2, [r7, #3]
 8000cf2:	0052      	lsls	r2, r2, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	7d39      	ldrb	r1, [r7, #20]
 8000d04:	78fa      	ldrb	r2, [r7, #3]
 8000d06:	0052      	lsls	r2, r2, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	d80a      	bhi.n	8000d2e <GPIO_Pin_Init+0x8a>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	7e39      	ldrb	r1, [r7, #24]
 8000d1e:	78fa      	ldrb	r2, [r7, #3]
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	fa01 f202 	lsl.w	r2, r1, r2
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8000d2c:	e00a      	b.n	8000d44 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d32:	7e39      	ldrb	r1, [r7, #24]
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	3a08      	subs	r2, #8
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <SCK_PIN_INIT2>:




static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10) || (config->Half_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10)){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2315      	movs	r3, #21
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d006      	beq.n	8000d70 <SCK_PIN_INIT2+0x24>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2315      	movs	r3, #21
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d10e      	bne.n	8000d8e <SCK_PIN_INIT2+0x42>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2EXT);
 8000d70:	2002      	movs	r0, #2
 8000d72:	2400      	movs	r4, #0
 8000d74:	2303      	movs	r3, #3
 8000d76:	2202      	movs	r2, #2
 8000d78:	2105      	movs	r1, #5
 8000d7a:	9102      	str	r1, [sp, #8]
 8000d7c:	9201      	str	r2, [sp, #4]
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	4623      	mov	r3, r4
 8000d82:	4602      	mov	r2, r0
 8000d84:	210a      	movs	r1, #10
 8000d86:	4816      	ldr	r0, [pc, #88]	@ (8000de0 <SCK_PIN_INIT2+0x94>)
 8000d88:	f7ff ff8c 	bl	8000ca4 <GPIO_Pin_Init>
 8000d8c:	e022      	b.n	8000dd4 <SCK_PIN_INIT2+0x88>
	}
	else if((config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13) || (config->Half_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13)){
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000d94:	461a      	mov	r2, r3
 8000d96:	2318      	movs	r3, #24
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d006      	beq.n	8000daa <SCK_PIN_INIT2+0x5e>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000da2:	461a      	mov	r2, r3
 8000da4:	2318      	movs	r3, #24
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d10e      	bne.n	8000dc8 <SCK_PIN_INIT2+0x7c>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2EXT);
 8000daa:	2002      	movs	r0, #2
 8000dac:	2400      	movs	r4, #0
 8000dae:	2303      	movs	r3, #3
 8000db0:	2202      	movs	r2, #2
 8000db2:	2105      	movs	r1, #5
 8000db4:	9102      	str	r1, [sp, #8]
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4623      	mov	r3, r4
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	210d      	movs	r1, #13
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <SCK_PIN_INIT2+0x94>)
 8000dc2:	f7ff ff6f 	bl	8000ca4 <GPIO_Pin_Init>
 8000dc6:	e005      	b.n	8000dd4 <SCK_PIN_INIT2+0x88>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	77da      	strb	r2, [r3, #31]
		return -1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e000      	b.n	8000dd6 <SCK_PIN_INIT2+0x8a>
	}
	return 1;
 8000dd4:	2301      	movs	r3, #1
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40020400 	.word	0x40020400

08000de4 <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09) || (config->Half_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09)){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000df2:	461a      	mov	r2, r3
 8000df4:	231d      	movs	r3, #29
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d006      	beq.n	8000e08 <WS_PIN_INIT2+0x24>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8000e00:	461a      	mov	r2, r3
 8000e02:	231d      	movs	r3, #29
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d10e      	bne.n	8000e26 <WS_PIN_INIT2+0x42>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	9102      	str	r1, [sp, #8]
 8000e14:	9201      	str	r2, [sp, #4]
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	4623      	mov	r3, r4
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	2109      	movs	r1, #9
 8000e1e:	4816      	ldr	r0, [pc, #88]	@ (8000e78 <WS_PIN_INIT2+0x94>)
 8000e20:	f7ff ff40 	bl	8000ca4 <GPIO_Pin_Init>
 8000e24:	e022      	b.n	8000e6c <WS_PIN_INIT2+0x88>
	}
	else if((config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12) || (config->Half_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12)){
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	2317      	movs	r3, #23
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d006      	beq.n	8000e42 <WS_PIN_INIT2+0x5e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2317      	movs	r3, #23
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d10e      	bne.n	8000e60 <WS_PIN_INIT2+0x7c>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000e42:	2002      	movs	r0, #2
 8000e44:	2400      	movs	r4, #0
 8000e46:	2303      	movs	r3, #3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	9102      	str	r1, [sp, #8]
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4623      	mov	r3, r4
 8000e54:	4602      	mov	r2, r0
 8000e56:	210c      	movs	r1, #12
 8000e58:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <WS_PIN_INIT2+0x94>)
 8000e5a:	f7ff ff23 	bl	8000ca4 <GPIO_Pin_Init>
 8000e5e:	e005      	b.n	8000e6c <WS_PIN_INIT2+0x88>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	779a      	strb	r2, [r3, #30]
		return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e000      	b.n	8000e6e <WS_PIN_INIT2+0x8a>
	}
	return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40020400 	.word	0x40020400

08000e7c <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af04      	add	r7, sp, #16
 8000e82:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15) || (config->Half_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15)){
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	2316      	movs	r3, #22
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d006      	beq.n	8000ea0 <SD_PIN_Init2+0x24>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2316      	movs	r3, #22
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d10e      	bne.n	8000ebe <SD_PIN_Init2+0x42>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2EXT);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	9102      	str	r1, [sp, #8]
 8000eac:	9201      	str	r2, [sp, #4]
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	4623      	mov	r3, r4
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	4816      	ldr	r0, [pc, #88]	@ (8000f10 <SD_PIN_Init2+0x94>)
 8000eb8:	f7ff fef4 	bl	8000ca4 <GPIO_Pin_Init>
 8000ebc:	e022      	b.n	8000f04 <SD_PIN_Init2+0x88>
	}
	else if((config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03) || (config->Half_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03)){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2319      	movs	r3, #25
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d006      	beq.n	8000eda <SD_PIN_Init2+0x5e>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2319      	movs	r3, #25
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d10e      	bne.n	8000ef8 <SD_PIN_Init2+0x7c>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Down, Alternate_Functions.I2S_2EXT);
 8000eda:	2002      	movs	r0, #2
 8000edc:	2400      	movs	r4, #0
 8000ede:	2303      	movs	r3, #3
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	9102      	str	r1, [sp, #8]
 8000ee6:	9201      	str	r2, [sp, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	4623      	mov	r3, r4
 8000eec:	4602      	mov	r2, r0
 8000eee:	2103      	movs	r1, #3
 8000ef0:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <SD_PIN_Init2+0x98>)
 8000ef2:	f7ff fed7 	bl	8000ca4 <GPIO_Pin_Init>
 8000ef6:	e005      	b.n	8000f04 <SD_PIN_Init2+0x88>
	}
	else{
		config->Error.SD_Pin_Error = true;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	775a      	strb	r2, [r3, #29]
		return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e000      	b.n	8000f06 <SD_PIN_Init2+0x8a>
	}
	return 1;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020800 	.word	0x40020800

08000f18 <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable) || (config->Half_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8000f26:	461a      	mov	r2, r3
 8000f28:	23ff      	movs	r3, #255	@ 0xff
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d106      	bne.n	8000f3c <MCK_PIN_Init2+0x24>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8000f34:	461a      	mov	r2, r3
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d023      	beq.n	8000f84 <MCK_PIN_Init2+0x6c>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7) || (config->Half_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8000f42:	461a      	mov	r2, r3
 8000f44:	2325      	movs	r3, #37	@ 0x25
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d006      	beq.n	8000f58 <MCK_PIN_Init2+0x40>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8000f50:	461a      	mov	r2, r3
 8000f52:	2325      	movs	r3, #37	@ 0x25
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d10e      	bne.n	8000f76 <MCK_PIN_Init2+0x5e>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	2400      	movs	r4, #0
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	9102      	str	r1, [sp, #8]
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4623      	mov	r3, r4
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <MCK_PIN_Init2+0x78>)
 8000f70:	f7ff fe98 	bl	8000ca4 <GPIO_Pin_Init>
 8000f74:	e006      	b.n	8000f84 <MCK_PIN_Init2+0x6c>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e000      	b.n	8000f86 <MCK_PIN_Init2+0x6e>
		}
	}
	return 1;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020800 	.word	0x40020800

08000f94 <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	6078      	str	r0, [r7, #4]
	if((config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14)){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	231d      	movs	r3, #29
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d10e      	bne.n	8000fc8 <EXT_SD_PIN_Init2+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000faa:	2002      	movs	r0, #2
 8000fac:	2400      	movs	r4, #0
 8000fae:	2303      	movs	r3, #3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	9102      	str	r1, [sp, #8]
 8000fb6:	9201      	str	r2, [sp, #4]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4623      	mov	r3, r4
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	210e      	movs	r1, #14
 8000fc0:	4812      	ldr	r0, [pc, #72]	@ (800100c <EXT_SD_PIN_Init2+0x78>)
 8000fc2:	f7ff fe6f 	bl	8000ca4 <GPIO_Pin_Init>
 8000fc6:	e01b      	b.n	8001000 <EXT_SD_PIN_Init2+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	231b      	movs	r3, #27
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d10e      	bne.n	8000ff4 <EXT_SD_PIN_Init2+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	2400      	movs	r4, #0
 8000fda:	2303      	movs	r3, #3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2105      	movs	r1, #5
 8000fe0:	9102      	str	r1, [sp, #8]
 8000fe2:	9201      	str	r2, [sp, #4]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4602      	mov	r2, r0
 8000fea:	2102      	movs	r1, #2
 8000fec:	4808      	ldr	r0, [pc, #32]	@ (8001010 <EXT_SD_PIN_Init2+0x7c>)
 8000fee:	f7ff fe59 	bl	8000ca4 <GPIO_Pin_Init>
 8000ff2:	e005      	b.n	8001000 <EXT_SD_PIN_Init2+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	771a      	strb	r2, [r3, #28]
		return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e000      	b.n	8001002 <EXT_SD_PIN_Init2+0x6e>
	}
	return 1;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	bf00      	nop
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800

08001014 <SCK_PIN_INIT3>:


static int8_t SCK_PIN_INIT3(I2S_Config *config)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b087      	sub	sp, #28
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001022:	461a      	mov	r2, r3
 8001024:	2315      	movs	r3, #21
 8001026:	429a      	cmp	r2, r3
 8001028:	d10e      	bne.n	8001048 <SCK_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800102a:	2002      	movs	r0, #2
 800102c:	2400      	movs	r4, #0
 800102e:	2303      	movs	r3, #3
 8001030:	2200      	movs	r2, #0
 8001032:	2105      	movs	r1, #5
 8001034:	9102      	str	r1, [sp, #8]
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	4623      	mov	r3, r4
 800103c:	4602      	mov	r2, r0
 800103e:	210a      	movs	r1, #10
 8001040:	4812      	ldr	r0, [pc, #72]	@ (800108c <SCK_PIN_INIT3+0x78>)
 8001042:	f7ff fe2f 	bl	8000ca4 <GPIO_Pin_Init>
 8001046:	e01b      	b.n	8001080 <SCK_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800104e:	461a      	mov	r2, r3
 8001050:	2318      	movs	r3, #24
 8001052:	429a      	cmp	r2, r3
 8001054:	d10e      	bne.n	8001074 <SCK_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8001056:	2002      	movs	r0, #2
 8001058:	2400      	movs	r4, #0
 800105a:	2303      	movs	r3, #3
 800105c:	2200      	movs	r2, #0
 800105e:	2105      	movs	r1, #5
 8001060:	9102      	str	r1, [sp, #8]
 8001062:	9201      	str	r2, [sp, #4]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	4602      	mov	r2, r0
 800106a:	210d      	movs	r1, #13
 800106c:	4807      	ldr	r0, [pc, #28]	@ (800108c <SCK_PIN_INIT3+0x78>)
 800106e:	f7ff fe19 	bl	8000ca4 <GPIO_Pin_Init>
 8001072:	e005      	b.n	8001080 <SCK_PIN_INIT3+0x6c>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	77da      	strb	r2, [r3, #31]
		return -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e000      	b.n	8001082 <SCK_PIN_INIT3+0x6e>
	}
	return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400

08001090 <WS_PIN_INIT3>:
static int8_t WS_PIN_INIT3(I2S_Config *config)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b087      	sub	sp, #28
 8001094:	af04      	add	r7, sp, #16
 8001096:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800109e:	461a      	mov	r2, r3
 80010a0:	231d      	movs	r3, #29
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d10e      	bne.n	80010c4 <WS_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80010a6:	2002      	movs	r0, #2
 80010a8:	2400      	movs	r4, #0
 80010aa:	2303      	movs	r3, #3
 80010ac:	2200      	movs	r2, #0
 80010ae:	2105      	movs	r1, #5
 80010b0:	9102      	str	r1, [sp, #8]
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	4623      	mov	r3, r4
 80010b8:	4602      	mov	r2, r0
 80010ba:	2109      	movs	r1, #9
 80010bc:	4812      	ldr	r0, [pc, #72]	@ (8001108 <WS_PIN_INIT3+0x78>)
 80010be:	f7ff fdf1 	bl	8000ca4 <GPIO_Pin_Init>
 80010c2:	e01b      	b.n	80010fc <WS_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2317      	movs	r3, #23
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d10e      	bne.n	80010f0 <WS_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80010d2:	2002      	movs	r0, #2
 80010d4:	2400      	movs	r4, #0
 80010d6:	2303      	movs	r3, #3
 80010d8:	2200      	movs	r2, #0
 80010da:	2105      	movs	r1, #5
 80010dc:	9102      	str	r1, [sp, #8]
 80010de:	9201      	str	r2, [sp, #4]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4623      	mov	r3, r4
 80010e4:	4602      	mov	r2, r0
 80010e6:	210c      	movs	r1, #12
 80010e8:	4807      	ldr	r0, [pc, #28]	@ (8001108 <WS_PIN_INIT3+0x78>)
 80010ea:	f7ff fddb 	bl	8000ca4 <GPIO_Pin_Init>
 80010ee:	e005      	b.n	80010fc <WS_PIN_INIT3+0x6c>
	}
	else{
		config->Error.WS_Pin_Error = true;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	779a      	strb	r2, [r3, #30]
		return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e000      	b.n	80010fe <WS_PIN_INIT3+0x6e>
	}
	return 1;
 80010fc:	2301      	movs	r3, #1
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	bf00      	nop
 8001108:	40020400 	.word	0x40020400

0800110c <SD_PIN_Init3>:
static int8_t SD_PIN_Init3(I2S_Config *config)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800111a:	461a      	mov	r2, r3
 800111c:	2316      	movs	r3, #22
 800111e:	429a      	cmp	r2, r3
 8001120:	d10e      	bne.n	8001140 <SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8001122:	2002      	movs	r0, #2
 8001124:	2400      	movs	r4, #0
 8001126:	2303      	movs	r3, #3
 8001128:	2200      	movs	r2, #0
 800112a:	2105      	movs	r1, #5
 800112c:	9102      	str	r1, [sp, #8]
 800112e:	9201      	str	r2, [sp, #4]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4623      	mov	r3, r4
 8001134:	4602      	mov	r2, r0
 8001136:	210f      	movs	r1, #15
 8001138:	4812      	ldr	r0, [pc, #72]	@ (8001184 <SD_PIN_Init3+0x78>)
 800113a:	f7ff fdb3 	bl	8000ca4 <GPIO_Pin_Init>
 800113e:	e01b      	b.n	8001178 <SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001146:	461a      	mov	r2, r3
 8001148:	2319      	movs	r3, #25
 800114a:	429a      	cmp	r2, r3
 800114c:	d10e      	bne.n	800116c <SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800114e:	2002      	movs	r0, #2
 8001150:	2400      	movs	r4, #0
 8001152:	2303      	movs	r3, #3
 8001154:	2200      	movs	r2, #0
 8001156:	2105      	movs	r1, #5
 8001158:	9102      	str	r1, [sp, #8]
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	4623      	mov	r3, r4
 8001160:	4602      	mov	r2, r0
 8001162:	2103      	movs	r1, #3
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <SD_PIN_Init3+0x7c>)
 8001166:	f7ff fd9d 	bl	8000ca4 <GPIO_Pin_Init>
 800116a:	e005      	b.n	8001178 <SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.SD_Pin_Error = true;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	775a      	strb	r2, [r3, #29]
		return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e000      	b.n	800117a <SD_PIN_Init3+0x6e>
	}
	return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800

0800118c <MCK_PIN_Init3>:
static int8_t MCK_PIN_Init3(I2S_Config *config)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b087      	sub	sp, #28
 8001190:	af04      	add	r7, sp, #16
 8001192:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800119a:	461a      	mov	r2, r3
 800119c:	23ff      	movs	r3, #255	@ 0xff
 800119e:	429a      	cmp	r2, r3
 80011a0:	d01c      	beq.n	80011dc <MCK_PIN_Init3+0x50>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2325      	movs	r3, #37	@ 0x25
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10e      	bne.n	80011ce <MCK_PIN_Init3+0x42>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 80011b0:	2002      	movs	r0, #2
 80011b2:	2400      	movs	r4, #0
 80011b4:	2303      	movs	r3, #3
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	9102      	str	r1, [sp, #8]
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4623      	mov	r3, r4
 80011c2:	4602      	mov	r2, r0
 80011c4:	2107      	movs	r1, #7
 80011c6:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MCK_PIN_Init3+0x5c>)
 80011c8:	f7ff fd6c 	bl	8000ca4 <GPIO_Pin_Init>
 80011cc:	e006      	b.n	80011dc <MCK_PIN_Init3+0x50>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e000      	b.n	80011de <MCK_PIN_Init3+0x52>
		}
	}
	return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020800 	.word	0x40020800

080011ec <EXT_SD_PIN_Init3>:
static int8_t EXT_SD_PIN_Init3(I2S_Config *config)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f993 3013 	ldrsb.w	r3, [r3, #19]
 80011fa:	461a      	mov	r2, r3
 80011fc:	231d      	movs	r3, #29
 80011fe:	429a      	cmp	r2, r3
 8001200:	d10e      	bne.n	8001220 <EXT_SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8001202:	2002      	movs	r0, #2
 8001204:	2400      	movs	r4, #0
 8001206:	2303      	movs	r3, #3
 8001208:	2200      	movs	r2, #0
 800120a:	2105      	movs	r1, #5
 800120c:	9102      	str	r1, [sp, #8]
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	4623      	mov	r3, r4
 8001214:	4602      	mov	r2, r0
 8001216:	210e      	movs	r1, #14
 8001218:	4812      	ldr	r0, [pc, #72]	@ (8001264 <EXT_SD_PIN_Init3+0x78>)
 800121a:	f7ff fd43 	bl	8000ca4 <GPIO_Pin_Init>
 800121e:	e01b      	b.n	8001258 <EXT_SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8001226:	461a      	mov	r2, r3
 8001228:	231b      	movs	r3, #27
 800122a:	429a      	cmp	r2, r3
 800122c:	d10e      	bne.n	800124c <EXT_SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800122e:	2002      	movs	r0, #2
 8001230:	2400      	movs	r4, #0
 8001232:	2303      	movs	r3, #3
 8001234:	2200      	movs	r2, #0
 8001236:	2105      	movs	r1, #5
 8001238:	9102      	str	r1, [sp, #8]
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4623      	mov	r3, r4
 8001240:	4602      	mov	r2, r0
 8001242:	2102      	movs	r1, #2
 8001244:	4808      	ldr	r0, [pc, #32]	@ (8001268 <EXT_SD_PIN_Init3+0x7c>)
 8001246:	f7ff fd2d 	bl	8000ca4 <GPIO_Pin_Init>
 800124a:	e005      	b.n	8001258 <EXT_SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	771a      	strb	r2, [r3, #28]
		return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	e000      	b.n	800125a <EXT_SD_PIN_Init3+0x6e>
	}
	return 1;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800

0800126c <I2S_DeInit>:


/********************************************************************************************************/
void I2S_DeInit(I2S_Config *config)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if(config->Port != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <I2S_DeInit+0x1c>
	{
		RCC->APB1ENR &= ~(RCC_APB1ENR_SPI2EN | RCC_APB1ENR_SPI3EN);
 800127c:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <I2S_DeInit+0xc4>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a2b      	ldr	r2, [pc, #172]	@ (8001330 <I2S_DeInit+0xc4>)
 8001282:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	config->Port->I2SCFGR &= ~0xFFFF;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	0c1b      	lsrs	r3, r3, #16
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	61d3      	str	r3, [r2, #28]
	config->Port->I2SPR &= ~0xFFFF;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	0c1b      	lsrs	r3, r3, #16
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	6213      	str	r3, [r2, #32]
	config->Audio_Frequency = -1;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	731a      	strb	r2, [r3, #12]
	config->Channel_Length = -1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	22ff      	movs	r2, #255	@ 0xff
 80012b2:	72da      	strb	r2, [r3, #11]
	config->Data_Length = -1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	22ff      	movs	r2, #255	@ 0xff
 80012b8:	729a      	strb	r2, [r3, #10]
	config->LR_Pin_Number = -1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	22ff      	movs	r2, #255	@ 0xff
 80012be:	721a      	strb	r2, [r3, #8]

	config->Standard = -1;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	22ff      	movs	r2, #255	@ 0xff
 80012c4:	725a      	strb	r2, [r3, #9]
	config->Full_Duplex.EXT_SD = -1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	22ff      	movs	r2, #255	@ 0xff
 80012ca:	74da      	strb	r2, [r3, #19]
	config->Full_Duplex.MCK_Pin = -1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	22ff      	movs	r2, #255	@ 0xff
 80012d0:	73da      	strb	r2, [r3, #15]
	config->Full_Duplex.SCK_Pin = -1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	22ff      	movs	r2, #255	@ 0xff
 80012d6:	741a      	strb	r2, [r3, #16]
	config->Full_Duplex.SD_Pin = -1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	22ff      	movs	r2, #255	@ 0xff
 80012dc:	745a      	strb	r2, [r3, #17]
	config->Full_Duplex.WS_Pin = -1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	22ff      	movs	r2, #255	@ 0xff
 80012e2:	749a      	strb	r2, [r3, #18]
	config->Full_Duplex.mode = -1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	22ff      	movs	r2, #255	@ 0xff
 80012e8:	739a      	strb	r2, [r3, #14]
	config->Full_Duplex.Enable = 0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	735a      	strb	r2, [r3, #13]
	config->Half_Duplex.MCK_Pin = -1;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	759a      	strb	r2, [r3, #22]
	config->Half_Duplex.SCK_Pin = -1;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	22ff      	movs	r2, #255	@ 0xff
 80012fa:	75da      	strb	r2, [r3, #23]
	config->Half_Duplex.SD_Pin = -1;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	22ff      	movs	r2, #255	@ 0xff
 8001300:	761a      	strb	r2, [r3, #24]
	config->Half_Duplex.WS_Pin = -1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	22ff      	movs	r2, #255	@ 0xff
 8001306:	765a      	strb	r2, [r3, #25]
	config->Half_Duplex.mode = -1;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	22ff      	movs	r2, #255	@ 0xff
 800130c:	755a      	strb	r2, [r3, #21]
	config->Half_Duplex.Enable = 0;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	751a      	strb	r2, [r3, #20]
	config->LR_Pin_Port = NULL;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
	I2S_Start(config);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fb6c 	bl	80019f8 <I2S_Start>
	config->Port = NULL;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <I2S_Init>:

/********************************************************************************************************/
int8_t I2S_Init(I2S_Config *config)
{
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b089      	sub	sp, #36	@ 0x24
 8001338:	af04      	add	r7, sp, #16
 800133a:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a9b      	ldr	r2, [pc, #620]	@ (80015b0 <I2S_Init+0x27c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d122      	bne.n	800138c <I2S_Init+0x58>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001346:	4b9b      	ldr	r3, [pc, #620]	@ (80015b4 <I2S_Init+0x280>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a9a      	ldr	r2, [pc, #616]	@ (80015b4 <I2S_Init+0x280>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7d1b      	ldrb	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <I2S_Init+0x2e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7b5b      	ldrb	r3, [r3, #13]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00c      	beq.n	800137c <I2S_Init+0x48>
		{
			SD_PIN_Init2(config);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd8a 	bl	8000e7c <SD_PIN_Init2>
			WS_PIN_INIT2(config);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fd3b 	bl	8000de4 <WS_PIN_INIT2>
			SCK_PIN_INIT2(config);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fcec 	bl	8000d4c <SCK_PIN_INIT2>
			MCK_PIN_Init2(config);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fdcf 	bl	8000f18 <MCK_PIN_Init2>
 800137a:	e032      	b.n	80013e2 <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7b5b      	ldrb	r3, [r3, #13]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d02e      	beq.n	80013e2 <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init2(config);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fe05 	bl	8000f94 <EXT_SD_PIN_Init2>
 800138a:	e02a      	b.n	80013e2 <I2S_Init+0xae>
		}
	}
	else if(config->Port == I2S_Port.I2S3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a89      	ldr	r2, [pc, #548]	@ (80015b8 <I2S_Init+0x284>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d122      	bne.n	80013dc <I2S_Init+0xa8>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001396:	4b87      	ldr	r3, [pc, #540]	@ (80015b4 <I2S_Init+0x280>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a86      	ldr	r2, [pc, #536]	@ (80015b4 <I2S_Init+0x280>)
 800139c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7d1b      	ldrb	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <I2S_Init+0x7e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7b5b      	ldrb	r3, [r3, #13]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00c      	beq.n	80013cc <I2S_Init+0x98>
		{
			SD_PIN_Init3(config);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff feaa 	bl	800110c <SD_PIN_Init3>
			WS_PIN_INIT3(config);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fe69 	bl	8001090 <WS_PIN_INIT3>
			SCK_PIN_INIT3(config);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fe28 	bl	8001014 <SCK_PIN_INIT3>
			MCK_PIN_Init3(config);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fee1 	bl	800118c <MCK_PIN_Init3>
 80013ca:	e00a      	b.n	80013e2 <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7b5b      	ldrb	r3, [r3, #13]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init3(config);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff09 	bl	80011ec <EXT_SD_PIN_Init3>
 80013da:	e002      	b.n	80013e2 <I2S_Init+0xae>
		}
	}
	else
	{

		config->Error.Port_Error = true;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	769a      	strb	r2, [r3, #26]
	}

	GPIO_Pin_Init(config->LR_Pin_Port, config->LR_Pin_Number, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6858      	ldr	r0, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80013ec:	b2d9      	uxtb	r1, r3
 80013ee:	2501      	movs	r5, #1
 80013f0:	2600      	movs	r6, #0
 80013f2:	2303      	movs	r3, #3
 80013f4:	2200      	movs	r2, #0
 80013f6:	2400      	movs	r4, #0
 80013f8:	9402      	str	r4, [sp, #8]
 80013fa:	9201      	str	r2, [sp, #4]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	4633      	mov	r3, r6
 8001400:	462a      	mov	r2, r5
 8001402:	f7ff fc4f 	bl	8000ca4 <GPIO_Pin_Init>


	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	69da      	ldr	r2, [r3, #28]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001414:	61da      	str	r2, [r3, #28]
	config->Port->I2SCFGR |= SPI_I2SCFGR_I2SMOD;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001424:	61da      	str	r2, [r3, #28]

	I2S_Stop(config);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 faf8 	bl	8001a1c <I2S_Stop>


	// I2S Mode
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	69da      	ldr	r2, [r3, #28]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800143a:	61da      	str	r2, [r3, #28]

	if((config->Full_Duplex.mode == I2S_Mode.Master.Transmit) || (config->Half_Duplex.mode == I2S_Mode.Master.Transmit)){
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001442:	461a      	mov	r2, r3
 8001444:	2301      	movs	r3, #1
 8001446:	429a      	cmp	r2, r3
 8001448:	d006      	beq.n	8001458 <I2S_Init+0x124>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001450:	461a      	mov	r2, r3
 8001452:	2301      	movs	r3, #1
 8001454:	429a      	cmp	r2, r3
 8001456:	d108      	bne.n	800146a <I2S_Init+0x136>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001466:	61da      	str	r2, [r3, #28]
 8001468:	e043      	b.n	80014f2 <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Master.Receive) || (config->Half_Duplex.mode == I2S_Mode.Master.Receive)){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001470:	461a      	mov	r2, r3
 8001472:	2302      	movs	r3, #2
 8001474:	429a      	cmp	r2, r3
 8001476:	d006      	beq.n	8001486 <I2S_Init+0x152>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800147e:	461a      	mov	r2, r3
 8001480:	2302      	movs	r3, #2
 8001482:	429a      	cmp	r2, r3
 8001484:	d108      	bne.n	8001498 <I2S_Init+0x164>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001494:	61da      	str	r2, [r3, #28]
 8001496:	e02c      	b.n	80014f2 <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Slave.Transmit) || (config->Half_Duplex.mode == I2S_Mode.Slave.Transmit)){
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800149e:	461a      	mov	r2, r3
 80014a0:	2303      	movs	r3, #3
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d006      	beq.n	80014b4 <I2S_Init+0x180>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2303      	movs	r3, #3
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d108      	bne.n	80014c6 <I2S_Init+0x192>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80014c2:	61da      	str	r2, [r3, #28]
 80014c4:	e015      	b.n	80014f2 <I2S_Init+0x1be>
	}else if((config->Full_Duplex.mode == I2S_Mode.Slave.Receive) || (config->Half_Duplex.mode == I2S_Mode.Slave.Receive)){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80014cc:	461a      	mov	r2, r3
 80014ce:	2304      	movs	r3, #4
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d006      	beq.n	80014e2 <I2S_Init+0x1ae>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80014da:	461a      	mov	r2, r3
 80014dc:	2304      	movs	r3, #4
 80014de:	429a      	cmp	r2, r3
 80014e0:	d107      	bne.n	80014f2 <I2S_Init+0x1be>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014f0:	61da      	str	r2, [r3, #28]
	}

	// Standard
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SSTD;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69da      	ldr	r2, [r3, #28]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8001500:	61da      	str	r2, [r3, #28]
	if(config->Standard == I2S_Standard.Standard_Philips){
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001508:	2201      	movs	r2, #1
 800150a:	4293      	cmp	r3, r2
 800150c:	d108      	bne.n	8001520 <I2S_Init+0x1ec>
		config->Port->I2SCFGR &= ~(SPI_I2SCFGR_I2SSTD);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800151c:	61da      	str	r2, [r3, #28]
 800151e:	e030      	b.n	8001582 <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001526:	2202      	movs	r2, #2
 8001528:	4293      	cmp	r3, r2
 800152a:	d108      	bne.n	800153e <I2S_Init+0x20a>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0210 	orr.w	r2, r2, #16
 800153a:	61da      	str	r2, [r3, #28]
 800153c:	e021      	b.n	8001582 <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001544:	2203      	movs	r2, #3
 8001546:	4293      	cmp	r3, r2
 8001548:	d108      	bne.n	800155c <I2S_Init+0x228>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	69da      	ldr	r2, [r3, #28]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0220 	orr.w	r2, r2, #32
 8001558:	61da      	str	r2, [r3, #28]
 800155a:	e012      	b.n	8001582 <I2S_Init+0x24e>
	}else if(config->Standard == I2S_Standard.PCM){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001562:	2204      	movs	r2, #4
 8001564:	4293      	cmp	r3, r2
 8001566:	d108      	bne.n	800157a <I2S_Init+0x246>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8001576:	61da      	str	r2, [r3, #28]
 8001578:	e003      	b.n	8001582 <I2S_Init+0x24e>
	}else{
		config->Error.Standard_Error  = true;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}

	// Data Length
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0206 	bic.w	r2, r2, #6
 8001590:	61da      	str	r2, [r3, #28]
	if(config->Data_Length == I2S_Data_Length._16_bit){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001598:	2201      	movs	r2, #1
 800159a:	4293      	cmp	r3, r2
 800159c:	d10e      	bne.n	80015bc <I2S_Init+0x288>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0206 	bic.w	r2, r2, #6
 80015ac:	61da      	str	r2, [r3, #28]
 80015ae:	e027      	b.n	8001600 <I2S_Init+0x2cc>
 80015b0:	40003800 	.word	0x40003800
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40003c00 	.word	0x40003c00
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d108      	bne.n	80015da <I2S_Init+0x2a6>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0202 	orr.w	r2, r2, #2
 80015d6:	61da      	str	r2, [r3, #28]
 80015d8:	e012      	b.n	8001600 <I2S_Init+0x2cc>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015e0:	2203      	movs	r2, #3
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d108      	bne.n	80015f8 <I2S_Init+0x2c4>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_1;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0204 	orr.w	r2, r2, #4
 80015f4:	61da      	str	r2, [r3, #28]
 80015f6:	e003      	b.n	8001600 <I2S_Init+0x2cc>
	}else{
		config->Error.Data_Len_Error = true;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	61da      	str	r2, [r3, #28]
	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001616:	2201      	movs	r2, #1
 8001618:	4293      	cmp	r3, r2
 800161a:	d108      	bne.n	800162e <I2S_Init+0x2fa>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	61da      	str	r2, [r3, #28]
 800162c:	e012      	b.n	8001654 <I2S_Init+0x320>
	}else if(config->Channel_Length == I2S_Channel_Length._32_bit){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001634:	2203      	movs	r2, #3
 8001636:	4293      	cmp	r3, r2
 8001638:	d108      	bne.n	800164c <I2S_Init+0x318>
		config->Port->I2SCFGR |=  SPI_I2SCFGR_CHLEN;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	61da      	str	r2, [r3, #28]
 800164a:	e003      	b.n	8001654 <I2S_Init+0x320>
	}else{
		config->Error.Channel_Length_Error = true;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}


	int plli2s_n = 128;
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	60fb      	str	r3, [r7, #12]
	int plli2s_r = 5;
 8001658:	2305      	movs	r3, #5
 800165a:	60bb      	str	r3, [r7, #8]
	if(config->Audio_Frequency == I2S_Audio_Frequency._8000Hz)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001662:	461a      	mov	r2, r3
 8001664:	2301      	movs	r3, #1
 8001666:	429a      	cmp	r2, r3
 8001668:	d121      	bne.n	80016ae <I2S_Init+0x37a>
	{
		//
		  plli2s_n = 64;
 800166a:	2340      	movs	r3, #64	@ 0x40
 800166c:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 800166e:	2305      	movs	r3, #5
 8001670:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	019a      	lsls	r2, r3, #6
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	071b      	lsls	r3, r3, #28
 800167a:	431a      	orrs	r2, r3
 800167c:	4ba1      	ldr	r3, [pc, #644]	@ (8001904 <I2S_Init+0x5d0>)
 800167e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001682:	4ba0      	ldr	r3, [pc, #640]	@ (8001904 <I2S_Init+0x5d0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a9f      	ldr	r2, [pc, #636]	@ (8001904 <I2S_Init+0x5d0>)
 8001688:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800168c:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 800168e:	bf00      	nop
 8001690:	4b9c      	ldr	r3, [pc, #624]	@ (8001904 <I2S_Init+0x5d0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f9      	beq.n	8001690 <I2S_Init+0x35c>
		config->Port->I2SPR |= 50;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 80016aa:	621a      	str	r2, [r3, #32]
 80016ac:	e18f      	b.n	80019ce <I2S_Init+0x69a>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._16000Hz)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80016b4:	461a      	mov	r2, r3
 80016b6:	2302      	movs	r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d121      	bne.n	8001700 <I2S_Init+0x3cc>
	{
		//
		  plli2s_n = 128;
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 80016c0:	2305      	movs	r3, #5
 80016c2:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	019a      	lsls	r2, r3, #6
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	071b      	lsls	r3, r3, #28
 80016cc:	431a      	orrs	r2, r3
 80016ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001904 <I2S_Init+0x5d0>)
 80016d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80016d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001904 <I2S_Init+0x5d0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a8a      	ldr	r2, [pc, #552]	@ (8001904 <I2S_Init+0x5d0>)
 80016da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016de:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80016e0:	bf00      	nop
 80016e2:	4b88      	ldr	r3, [pc, #544]	@ (8001904 <I2S_Init+0x5d0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f9      	beq.n	80016e2 <I2S_Init+0x3ae>
		config->Port->I2SPR |= 50;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 80016fc:	621a      	str	r2, [r3, #32]
 80016fe:	e166      	b.n	80019ce <I2S_Init+0x69a>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._22050Hz)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001706:	461a      	mov	r2, r3
 8001708:	2303      	movs	r3, #3
 800170a:	429a      	cmp	r2, r3
 800170c:	d121      	bne.n	8001752 <I2S_Init+0x41e>
	{
		//
		 plli2s_n = 141;
 800170e:	238d      	movs	r3, #141	@ 0x8d
 8001710:	60fb      	str	r3, [r7, #12]
		 plli2s_r = 5;
 8001712:	2305      	movs	r3, #5
 8001714:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	019a      	lsls	r2, r3, #6
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	071b      	lsls	r3, r3, #28
 800171e:	431a      	orrs	r2, r3
 8001720:	4b78      	ldr	r3, [pc, #480]	@ (8001904 <I2S_Init+0x5d0>)
 8001722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001726:	4b77      	ldr	r3, [pc, #476]	@ (8001904 <I2S_Init+0x5d0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a76      	ldr	r2, [pc, #472]	@ (8001904 <I2S_Init+0x5d0>)
 800172c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001730:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001732:	bf00      	nop
 8001734:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <I2S_Init+0x5d0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f9      	beq.n	8001734 <I2S_Init+0x400>
		config->Port->I2SPR |= 40 | SPI_I2SPR_ODD;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a1a      	ldr	r2, [r3, #32]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7294 	orr.w	r2, r2, #296	@ 0x128
 800174e:	621a      	str	r2, [r3, #32]
 8001750:	e13d      	b.n	80019ce <I2S_Init+0x69a>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._32000Hz)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001758:	461a      	mov	r2, r3
 800175a:	2304      	movs	r3, #4
 800175c:	429a      	cmp	r2, r3
 800175e:	d121      	bne.n	80017a4 <I2S_Init+0x470>
	{
		//
		  plli2s_n = 64;
 8001760:	2340      	movs	r3, #64	@ 0x40
 8001762:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8001764:	2305      	movs	r3, #5
 8001766:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	019a      	lsls	r2, r3, #6
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	071b      	lsls	r3, r3, #28
 8001770:	431a      	orrs	r2, r3
 8001772:	4b64      	ldr	r3, [pc, #400]	@ (8001904 <I2S_Init+0x5d0>)
 8001774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001778:	4b62      	ldr	r3, [pc, #392]	@ (8001904 <I2S_Init+0x5d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a61      	ldr	r2, [pc, #388]	@ (8001904 <I2S_Init+0x5d0>)
 800177e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001782:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001784:	bf00      	nop
 8001786:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <I2S_Init+0x5d0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f9      	beq.n	8001786 <I2S_Init+0x452>
		config->Port->I2SPR |= 12;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 020c 	orr.w	r2, r2, #12
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	e114      	b.n	80019ce <I2S_Init+0x69a>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._44100Hz)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80017aa:	461a      	mov	r2, r3
 80017ac:	2305      	movs	r3, #5
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d121      	bne.n	80017f6 <I2S_Init+0x4c2>
	{
		//
		  plli2s_n = 50;
 80017b2:	2332      	movs	r3, #50	@ 0x32
 80017b4:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 6;
 80017b6:	2306      	movs	r3, #6
 80017b8:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	019a      	lsls	r2, r3, #6
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	071b      	lsls	r3, r3, #28
 80017c2:	431a      	orrs	r2, r3
 80017c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001904 <I2S_Init+0x5d0>)
 80017c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80017ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001904 <I2S_Init+0x5d0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001904 <I2S_Init+0x5d0>)
 80017d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017d4:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80017d6:	bf00      	nop
 80017d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001904 <I2S_Init+0x5d0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f9      	beq.n	80017d8 <I2S_Init+0x4a4>
		config->Port->I2SPR |= 10 | SPI_I2SPR_ODD;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6a1a      	ldr	r2, [r3, #32]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 7285 	orr.w	r2, r2, #266	@ 0x10a
 80017f2:	621a      	str	r2, [r3, #32]
 80017f4:	e0eb      	b.n	80019ce <I2S_Init+0x69a>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._48000Hz)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80017fc:	461a      	mov	r2, r3
 80017fe:	2306      	movs	r3, #6
 8001800:	429a      	cmp	r2, r3
 8001802:	d150      	bne.n	80018a6 <I2S_Init+0x572>
	{
		//

		if(config->Channel_Length == I2S_Channel_Length._16_bit)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800180a:	2201      	movs	r2, #1
 800180c:	4293      	cmp	r3, r2
 800180e:	d11d      	bne.n	800184c <I2S_Init+0x518>
		{
			plli2s_n = 80;
 8001810:	2350      	movs	r3, #80	@ 0x50
 8001812:	60fb      	str	r3, [r7, #12]
			plli2s_r = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
			RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	019a      	lsls	r2, r3, #6
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	071b      	lsls	r3, r3, #28
 8001820:	431a      	orrs	r2, r3
 8001822:	4b38      	ldr	r3, [pc, #224]	@ (8001904 <I2S_Init+0x5d0>)
 8001824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			RCC -> CR |= RCC_CR_PLLI2SON;
 8001828:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <I2S_Init+0x5d0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a35      	ldr	r2, [pc, #212]	@ (8001904 <I2S_Init+0x5d0>)
 800182e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001832:	6013      	str	r3, [r2, #0]
			while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001834:	bf00      	nop
 8001836:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <I2S_Init+0x5d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f9      	beq.n	8001836 <I2S_Init+0x502>
			config->Port->I2SPR = (13);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	220d      	movs	r2, #13
 8001848:	621a      	str	r2, [r3, #32]
 800184a:	e0c0      	b.n	80019ce <I2S_Init+0x69a>
//			config->Port->I2SPR |= SPI_I2SPR_ODD;
		}
		else if(config->Channel_Length == I2S_Channel_Length._32_bit)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001852:	2203      	movs	r2, #3
 8001854:	4293      	cmp	r3, r2
 8001856:	f040 80ba 	bne.w	80019ce <I2S_Init+0x69a>
		{
			plli2s_n = 80;
 800185a:	2350      	movs	r3, #80	@ 0x50
 800185c:	60fb      	str	r3, [r7, #12]
			plli2s_r = 4;
 800185e:	2304      	movs	r3, #4
 8001860:	60bb      	str	r3, [r7, #8]
			RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	019a      	lsls	r2, r3, #6
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	071b      	lsls	r3, r3, #28
 800186a:	431a      	orrs	r2, r3
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <I2S_Init+0x5d0>)
 800186e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			RCC -> CR |= RCC_CR_PLLI2SON;
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <I2S_Init+0x5d0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a23      	ldr	r2, [pc, #140]	@ (8001904 <I2S_Init+0x5d0>)
 8001878:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800187c:	6013      	str	r3, [r2, #0]
			while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 800187e:	bf00      	nop
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <I2S_Init+0x5d0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f9      	beq.n	8001880 <I2S_Init+0x54c>
			config->Port->I2SPR = (6);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2206      	movs	r2, #6
 8001892:	621a      	str	r2, [r3, #32]
			config->Port->I2SPR |= SPI_I2SPR_ODD;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6a1a      	ldr	r2, [r3, #32]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018a2:	621a      	str	r2, [r3, #32]
 80018a4:	e093      	b.n	80019ce <I2S_Init+0x69a>
		}
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._64000Hz)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80018ac:	461a      	mov	r2, r3
 80018ae:	2307      	movs	r3, #7
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d151      	bne.n	8001958 <I2S_Init+0x624>
	{
		if(config->Channel_Length == I2S_Channel_Length._16_bit)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4293      	cmp	r3, r2
 80018be:	d123      	bne.n	8001908 <I2S_Init+0x5d4>
		{
			plli2s_n = 128;
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	60fb      	str	r3, [r7, #12]
			plli2s_r = 5;
 80018c4:	2305      	movs	r3, #5
 80018c6:	60bb      	str	r3, [r7, #8]
			RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	019a      	lsls	r2, r3, #6
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	071b      	lsls	r3, r3, #28
 80018d0:	431a      	orrs	r2, r3
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <I2S_Init+0x5d0>)
 80018d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			RCC -> CR |= RCC_CR_PLLI2SON;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <I2S_Init+0x5d0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a09      	ldr	r2, [pc, #36]	@ (8001904 <I2S_Init+0x5d0>)
 80018de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018e2:	6013      	str	r3, [r2, #0]
			while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80018e4:	bf00      	nop
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <I2S_Init+0x5d0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f9      	beq.n	80018e6 <I2S_Init+0x5b2>
			config->Port->I2SPR |= 12;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 020c 	orr.w	r2, r2, #12
 8001900:	621a      	str	r2, [r3, #32]
 8001902:	e064      	b.n	80019ce <I2S_Init+0x69a>
 8001904:	40023800 	.word	0x40023800
		}
		else if(config->Channel_Length == I2S_Channel_Length._32_bit)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800190e:	2203      	movs	r2, #3
 8001910:	4293      	cmp	r3, r2
 8001912:	d15c      	bne.n	80019ce <I2S_Init+0x69a>
		{
			plli2s_n = 128;
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	60fb      	str	r3, [r7, #12]
			plli2s_r = 5;
 8001918:	2305      	movs	r3, #5
 800191a:	60bb      	str	r3, [r7, #8]
			RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	019a      	lsls	r2, r3, #6
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	071b      	lsls	r3, r3, #28
 8001924:	431a      	orrs	r2, r3
 8001926:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <I2S_Init+0x6ac>)
 8001928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			RCC -> CR |= RCC_CR_PLLI2SON;
 800192c:	4b2c      	ldr	r3, [pc, #176]	@ (80019e0 <I2S_Init+0x6ac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2b      	ldr	r2, [pc, #172]	@ (80019e0 <I2S_Init+0x6ac>)
 8001932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001936:	6013      	str	r3, [r2, #0]
			while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001938:	bf00      	nop
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <I2S_Init+0x6ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f9      	beq.n	800193a <I2S_Init+0x606>
			config->Port->I2SPR |= 12;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6a1a      	ldr	r2, [r3, #32]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 020c 	orr.w	r2, r2, #12
 8001954:	621a      	str	r2, [r3, #32]
 8001956:	e03a      	b.n	80019ce <I2S_Init+0x69a>
		}

		//

		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._96000Hz)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800195e:	461a      	mov	r2, r3
 8001960:	2308      	movs	r3, #8
 8001962:	429a      	cmp	r2, r3
 8001964:	d121      	bne.n	80019aa <I2S_Init+0x676>
	{
		//
		  plli2s_n = 192;
 8001966:	23c0      	movs	r3, #192	@ 0xc0
 8001968:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 800196a:	2305      	movs	r3, #5
 800196c:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	019a      	lsls	r2, r3, #6
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	071b      	lsls	r3, r3, #28
 8001976:	431a      	orrs	r2, r3
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <I2S_Init+0x6ac>)
 800197a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <I2S_Init+0x6ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <I2S_Init+0x6ac>)
 8001984:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001988:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 800198a:	bf00      	nop
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <I2S_Init+0x6ac>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f9      	beq.n	800198c <I2S_Init+0x658>
		config->Port->I2SPR |= 12 ;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a1a      	ldr	r2, [r3, #32]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 020c 	orr.w	r2, r2, #12
 80019a6:	621a      	str	r2, [r3, #32]
 80019a8:	e011      	b.n	80019ce <I2S_Init+0x69a>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._192000Hz)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80019b0:	461a      	mov	r2, r3
 80019b2:	2309      	movs	r3, #9
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d00a      	beq.n	80019ce <I2S_Init+0x69a>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._384000Hz)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80019be:	461a      	mov	r2, r3
 80019c0:	230a      	movs	r3, #10
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d003      	beq.n	80019ce <I2S_Init+0x69a>
	{
		//
	}else
	{
		config->Error.Audio_Frequency_Error = true;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	//  I2S Enable
	I2S_Start(config);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f812 	bl	80019f8 <I2S_Start>

//	I2S_Mode_Set(config);

	return 1;
 80019d4:	2301      	movs	r3, #1

}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <I2S_Print_Errors>:
/********************************************************************************************************/
/********************************************************************************************************/
void I2S_Print_Errors(I2S_Config *config)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	if(config->Error.SCK_Pin_Error) printConsole("SCK_Pin_Error \r\n");
	if(config->Error.SD_Pin_Error) printConsole("SD_Pin_Error \r\n");
	if(config->Error.Standard_Error) printConsole("Standard_Error \r\n");
	if(config->Error.WS_Pin_Error) printConsole("WS_Pin_Error \r\n");
#endif
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <I2S_Start>:
/********************************************************************************************************/
void I2S_Start(I2S_Config *config)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a0e:	61da      	str	r2, [r3, #28]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <I2S_Stop>:
/********************************************************************************************************/
void I2S_Stop(I2S_Config *config)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR &= ~SPI_I2SCFGR_I2SE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a32:	61da      	str	r2, [r3, #28]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <I2S_Read_Data>:
	return retval;
}


void I2S_Read_Data(I2S_Config *config, int32_t *data)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	int32_t retval[2];
	if(config->Data_Length == I2S_Data_Length._16_bit)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d116      	bne.n	8001a84 <I2S_Read_Data+0x44>
	{
		while((config -> Port -> SR & SPI_SR_CHSIDE) != SPI_SR_CHSIDE){}
 8001a56:	bf00      	nop
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d1f8      	bne.n	8001a58 <I2S_Read_Data+0x18>
		retval[0] = config -> Port -> DR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
		retval[1] =   config -> Port -> DR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60fb      	str	r3, [r7, #12]
		*data =  ((retval[1] << 16) | retval[0]);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	601a      	str	r2, [r3, #0]
//		while((config -> Port -> SR & SPI_SR_CHSIDE) == SPI_SR_CHSIDE){}
//		retval[1] =   config -> Port -> DR;
//		*data =  ((retval[0] << 16) | retval[1]);
		*data = retval[0];
	}
}
 8001a82:	e01a      	b.n	8001aba <I2S_Read_Data+0x7a>
	else if((config->Data_Length == I2S_Channel_Length._32_bit) || (config->Data_Length == I2S_Data_Length._24_bit))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d005      	beq.n	8001a9c <I2S_Read_Data+0x5c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a96:	2202      	movs	r2, #2
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d10e      	bne.n	8001aba <I2S_Read_Data+0x7a>
		while((config -> Port -> SR & SPI_SR_CHSIDE) == SPI_SR_CHSIDE){}
 8001a9c:	bf00      	nop
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d0f8      	beq.n	8001a9e <I2S_Read_Data+0x5e>
		retval[0] = config -> Port -> DR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	60bb      	str	r3, [r7, #8]
		*data = retval[0];
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <I2S_Select_Left_Channel>:

void I2S_Select_Left_Channel(I2S_Config *config)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->LR_Pin_Port, config->LR_Pin_Number);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7ff f86e 	bl	8000bbc <GPIO_Pin_Low>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	@ (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	@ (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ffc2 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	uint8_t pll_m = 8;
 8001b86:	2308      	movs	r3, #8
 8001b88:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8001b8a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001b8e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8001b94:	2307      	movs	r3, #7
 8001b96:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8001b98:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001baa:	bf00      	nop
 8001bac:	4b37      	ldr	r3, [pc, #220]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f9      	beq.n	8001bac <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001bb8:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	4a33      	ldr	r2, [pc, #204]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001bc4:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <MCU_Clock_Setup+0x110>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	@ (8001c90 <MCU_Clock_Setup+0x110>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bce:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001bd0:	4b30      	ldr	r3, [pc, #192]	@ (8001c94 <MCU_Clock_Setup+0x114>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8001c94 <MCU_Clock_Setup+0x114>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bda:	f043 0305 	orr.w	r3, r3, #5
 8001bde:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001be0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	78ba      	ldrb	r2, [r7, #2]
 8001be6:	0611      	lsls	r1, r2, #24
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	0412      	lsls	r2, r2, #16
 8001bec:	4311      	orrs	r1, r2
 8001bee:	88ba      	ldrh	r2, [r7, #4]
 8001bf0:	0192      	lsls	r2, r2, #6
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4a24      	ldr	r2, [pc, #144]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c0a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c1a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001c1e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c2a:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001c38:	bf00      	nop
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f9      	beq.n	8001c3a <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001c52:	bf00      	nop
 8001c54:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d1f9      	bne.n	8001c54 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 8001c60:	f000 f8d4 	bl	8001e0c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MCU_Clock_Setup+0x118>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c9c <MCU_Clock_Setup+0x11c>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff62 	bl	8001b3c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	4a03      	ldr	r2, [pc, #12]	@ (8001c8c <MCU_Clock_Setup+0x10c>)
 8001c7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c82:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	40023c00 	.word	0x40023c00
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	18618619 	.word	0x18618619

08001ca0 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <Delay_Config+0x2c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <Delay_Config+0x2c>)
 8001cac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001cb0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <Delay_Config+0x2c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001cb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <Delay_Config+0x2c>)
 8001cba:	2205      	movs	r2, #5
 8001cbc:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8001cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cde:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001d24 <Delay_ms+0x54>
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cea:	ee17 3a90 	vmov	r3, s15
 8001cee:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <Delay_ms+0x58>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <Delay_ms+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <Delay_ms+0x58>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <Delay_ms+0x58>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8001d08:	bf00      	nop
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <Delay_ms+0x58>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f9      	beq.n	8001d0a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	48241000 	.word	0x48241000
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8001d32:	f7ff ff25 	bl	8001b80 <MCU_Clock_Setup>
	Delay_Config();
 8001d36:	f7ff ffb3 	bl	8001ca0 <Delay_Config>
	Console_Init(USART1, 230400);
 8001d3a:	f44f 3161 	mov.w	r1, #230400	@ 0x38400
 8001d3e:	4825      	ldr	r0, [pc, #148]	@ (8001dd4 <main+0xa8>)
 8001d40:	f7fe ff16 	bl	8000b70 <Console_Init>


	I2S_DeInit(&INMP441_I2S);
 8001d44:	4824      	ldr	r0, [pc, #144]	@ (8001dd8 <main+0xac>)
 8001d46:	f7ff fa91 	bl	800126c <I2S_DeInit>


	INMP441_I2S.Port = I2S_Port.I2S2;
 8001d4a:	4a24      	ldr	r2, [pc, #144]	@ (8001ddc <main+0xb0>)
 8001d4c:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <main+0xac>)
 8001d4e:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 8001d50:	2306      	movs	r3, #6
 8001d52:	b25a      	sxtb	r2, r3
 8001d54:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <main+0xac>)
 8001d56:	731a      	strb	r2, [r3, #12]
	INMP441_I2S.Channel_Length = I2S_Channel_Length._32_bit;
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <main+0xac>)
 8001d5c:	72da      	strb	r2, [r3, #11]
	INMP441_I2S.Data_Length = I2S_Data_Length._24_bit;
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <main+0xac>)
 8001d62:	729a      	strb	r2, [r3, #10]
	INMP441_I2S.LR_Pin_Port = GPIOB;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <main+0xac>)
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <main+0xb4>)
 8001d68:	605a      	str	r2, [r3, #4]
	INMP441_I2S.LR_Pin_Number = 11;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <main+0xac>)
 8001d6c:	220b      	movs	r2, #11
 8001d6e:	721a      	strb	r2, [r3, #8]
	INMP441_I2S.Standard = I2S_Standard.Standard_Philips;
 8001d70:	2201      	movs	r2, #1
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <main+0xac>)
 8001d74:	725a      	strb	r2, [r3, #9]
	INMP441_I2S.Half_Duplex.Enable = true;
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <main+0xac>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	751a      	strb	r2, [r3, #20]
	INMP441_I2S.Half_Duplex.mode = I2S_Mode.Master.Receive;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	b25a      	sxtb	r2, r3
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <main+0xac>)
 8001d82:	755a      	strb	r2, [r3, #21]
	INMP441_I2S.Half_Duplex.WS_Pin = I2S_Pin.WS.I2S2.PB12;
 8001d84:	2317      	movs	r3, #23
 8001d86:	b25a      	sxtb	r2, r3
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <main+0xac>)
 8001d8a:	765a      	strb	r2, [r3, #25]
	INMP441_I2S.Half_Duplex.SD_Pin = I2S_Pin.SD.I2S2.PB15;
 8001d8c:	2316      	movs	r3, #22
 8001d8e:	b25a      	sxtb	r2, r3
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <main+0xac>)
 8001d92:	761a      	strb	r2, [r3, #24]
	INMP441_I2S.Half_Duplex.SCK_Pin = I2S_Pin.SCK.I2S2.PB10;
 8001d94:	2315      	movs	r3, #21
 8001d96:	b25a      	sxtb	r2, r3
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <main+0xac>)
 8001d9a:	75da      	strb	r2, [r3, #23]
	INMP441_I2S.Half_Duplex.MCK_Pin = I2S_Pin.MCK.I2S2.Disable;
 8001d9c:	23ff      	movs	r3, #255	@ 0xff
 8001d9e:	b25a      	sxtb	r2, r3
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <main+0xac>)
 8001da2:	759a      	strb	r2, [r3, #22]

	if(I2S_Init(&INMP441_I2S)) I2S_Print_Errors(&INMP441_I2S);
 8001da4:	480c      	ldr	r0, [pc, #48]	@ (8001dd8 <main+0xac>)
 8001da6:	f7ff fac5 	bl	8001334 <I2S_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <main+0x8a>
 8001db0:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <main+0xac>)
 8001db2:	f7ff fe17 	bl	80019e4 <I2S_Print_Errors>



	I2S_Select_Left_Channel(&INMP441_I2S);
 8001db6:	4808      	ldr	r0, [pc, #32]	@ (8001dd8 <main+0xac>)
 8001db8:	f7ff fe85 	bl	8001ac6 <I2S_Select_Left_Channel>
	int32_t x = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]

	Delay_ms(200);
 8001dc0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001de4 <main+0xb8>
 8001dc4:	f7ff ff84 	bl	8001cd0 <Delay_ms>


	for(;;)
	{
		I2S_Read_Data(&INMP441_I2S,&x);
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <main+0xac>)
 8001dce:	f7ff fe37 	bl	8001a40 <I2S_Read_Data>
 8001dd2:	e7f9      	b.n	8001dc8 <main+0x9c>
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	20000038 	.word	0x20000038
 8001ddc:	40003800 	.word	0x40003800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	43480000 	.word	0x43480000

08001de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <SystemInit+0x20>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <SystemInit+0x20>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	2302      	movs	r3, #2
 8001e24:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001e26:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <SystemCoreClockUpdate+0xec>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d011      	beq.n	8001e5a <SystemCoreClockUpdate+0x4e>
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d844      	bhi.n	8001ec6 <SystemCoreClockUpdate+0xba>
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <SystemCoreClockUpdate+0x3e>
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d004      	beq.n	8001e52 <SystemCoreClockUpdate+0x46>
 8001e48:	e03d      	b.n	8001ec6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001efc <SystemCoreClockUpdate+0xf0>)
 8001e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f00 <SystemCoreClockUpdate+0xf4>)
 8001e4e:	601a      	str	r2, [r3, #0]
      break;
 8001e50:	e03d      	b.n	8001ece <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001e52:	4b2a      	ldr	r3, [pc, #168]	@ (8001efc <SystemCoreClockUpdate+0xf0>)
 8001e54:	4a2b      	ldr	r2, [pc, #172]	@ (8001f04 <SystemCoreClockUpdate+0xf8>)
 8001e56:	601a      	str	r2, [r3, #0]
      break;
 8001e58:	e039      	b.n	8001ece <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <SystemCoreClockUpdate+0xec>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0d9b      	lsrs	r3, r3, #22
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e66:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <SystemCoreClockUpdate+0xec>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e6e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <SystemCoreClockUpdate+0xf8>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <SystemCoreClockUpdate+0xec>)
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	0992      	lsrs	r2, r2, #6
 8001e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e00b      	b.n	8001ea8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001e90:	4a1b      	ldr	r2, [pc, #108]	@ (8001f00 <SystemCoreClockUpdate+0xf4>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <SystemCoreClockUpdate+0xec>)
 8001e9a:	6852      	ldr	r2, [r2, #4]
 8001e9c:	0992      	lsrs	r2, r2, #6
 8001e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <SystemCoreClockUpdate+0xec>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <SystemCoreClockUpdate+0xf0>)
 8001ec2:	6013      	str	r3, [r2, #0]
      break;
 8001ec4:	e003      	b.n	8001ece <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <SystemCoreClockUpdate+0xf0>)
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <SystemCoreClockUpdate+0xf4>)
 8001eca:	601a      	str	r2, [r3, #0]
      break;
 8001ecc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <SystemCoreClockUpdate+0xec>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <SystemCoreClockUpdate+0xfc>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <SystemCoreClockUpdate+0xf0>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <SystemCoreClockUpdate+0xf0>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	20000000 	.word	0x20000000
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200
 8001f08:	08002ca0 	.word	0x08002ca0

08001f0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f0c:	480d      	ldr	r0, [pc, #52]	@ (8001f44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f10:	f7ff ff6a 	bl	8001de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	@ (8001f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <LoopForever+0xe>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f58 <LoopForever+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f3a:	f000 fe05 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f3e:	f7ff fef5 	bl	8001d2c <main>

08001f42 <LoopForever>:

LoopForever:
  b LoopForever
 8001f42:	e7fe      	b.n	8001f42 <LoopForever>
  ldr   r0, =_estack
 8001f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001f50:	08002cb8 	.word	0x08002cb8
  ldr r2, =_sbss
 8001f54:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001f58:	20000060 	.word	0x20000060

08001f5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>

08001f5e <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8001f6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f70:	f7fe fda8 	bl	8000ac4 <__aeabi_d2lz>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fab2 	bl	80004e4 <__aeabi_l2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f94:	f7fe f91c 	bl	80001d0 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8001fb8:	2200      	movs	r2, #0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fca:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 8001fcc:	2203      	movs	r2, #3
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	749a      	strb	r2, [r3, #18]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a47      	ldr	r2, [pc, #284]	@ (8002118 <USART_Clock_Enable+0x12c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d112      	bne.n	8002024 <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	791b      	ldrb	r3, [r3, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	4293      	cmp	r3, r2
 8002006:	d106      	bne.n	8002016 <USART_Clock_Enable+0x2a>
 8002008:	4b44      	ldr	r3, [pc, #272]	@ (800211c <USART_Clock_Enable+0x130>)
 800200a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800200c:	4a43      	ldr	r2, [pc, #268]	@ (800211c <USART_Clock_Enable+0x130>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6653      	str	r3, [r2, #100]	@ 0x64
 8002014:	e079      	b.n	800210a <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8002016:	4b41      	ldr	r3, [pc, #260]	@ (800211c <USART_Clock_Enable+0x130>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	4a40      	ldr	r2, [pc, #256]	@ (800211c <USART_Clock_Enable+0x130>)
 800201c:	f043 0310 	orr.w	r3, r3, #16
 8002020:	6453      	str	r3, [r2, #68]	@ 0x44
 8002022:	e072      	b.n	800210a <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3d      	ldr	r2, [pc, #244]	@ (8002120 <USART_Clock_Enable+0x134>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d112      	bne.n	8002054 <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	4293      	cmp	r3, r2
 8002036:	d106      	bne.n	8002046 <USART_Clock_Enable+0x5a>
 8002038:	4b38      	ldr	r3, [pc, #224]	@ (800211c <USART_Clock_Enable+0x130>)
 800203a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203c:	4a37      	ldr	r2, [pc, #220]	@ (800211c <USART_Clock_Enable+0x130>)
 800203e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002042:	6613      	str	r3, [r2, #96]	@ 0x60
 8002044:	e061      	b.n	800210a <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8002046:	4b35      	ldr	r3, [pc, #212]	@ (800211c <USART_Clock_Enable+0x130>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	4a34      	ldr	r2, [pc, #208]	@ (800211c <USART_Clock_Enable+0x130>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	6413      	str	r3, [r2, #64]	@ 0x40
 8002052:	e05a      	b.n	800210a <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a32      	ldr	r2, [pc, #200]	@ (8002124 <USART_Clock_Enable+0x138>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d112      	bne.n	8002084 <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	4293      	cmp	r3, r2
 8002066:	d106      	bne.n	8002076 <USART_Clock_Enable+0x8a>
 8002068:	4b2c      	ldr	r3, [pc, #176]	@ (800211c <USART_Clock_Enable+0x130>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206c:	4a2b      	ldr	r2, [pc, #172]	@ (800211c <USART_Clock_Enable+0x130>)
 800206e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002072:	6613      	str	r3, [r2, #96]	@ 0x60
 8002074:	e049      	b.n	800210a <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8002076:	4b29      	ldr	r3, [pc, #164]	@ (800211c <USART_Clock_Enable+0x130>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a28      	ldr	r2, [pc, #160]	@ (800211c <USART_Clock_Enable+0x130>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	e042      	b.n	800210a <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a27      	ldr	r2, [pc, #156]	@ (8002128 <USART_Clock_Enable+0x13c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10e      	bne.n	80020ac <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	4293      	cmp	r3, r2
 8002096:	d102      	bne.n	800209e <USART_Clock_Enable+0xb2>
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	e036      	b.n	800210c <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <USART_Clock_Enable+0x130>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a1e      	ldr	r2, [pc, #120]	@ (800211c <USART_Clock_Enable+0x130>)
 80020a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	e02e      	b.n	800210a <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	@ (800212c <USART_Clock_Enable+0x140>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10e      	bne.n	80020d4 <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	791b      	ldrb	r3, [r3, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <USART_Clock_Enable+0xda>
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	e022      	b.n	800210c <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <USART_Clock_Enable+0x130>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a14      	ldr	r2, [pc, #80]	@ (800211c <USART_Clock_Enable+0x130>)
 80020cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d2:	e01a      	b.n	800210a <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a15      	ldr	r2, [pc, #84]	@ (8002130 <USART_Clock_Enable+0x144>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d112      	bne.n	8002104 <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	791b      	ldrb	r3, [r3, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d106      	bne.n	80020f6 <USART_Clock_Enable+0x10a>
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <USART_Clock_Enable+0x130>)
 80020ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020ec:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <USART_Clock_Enable+0x130>)
 80020ee:	f043 0320 	orr.w	r3, r3, #32
 80020f2:	6653      	str	r3, [r2, #100]	@ 0x64
 80020f4:	e009      	b.n	800210a <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <USART_Clock_Enable+0x130>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <USART_Clock_Enable+0x130>)
 80020fc:	f043 0320 	orr.w	r3, r3, #32
 8002100:	6453      	str	r3, [r2, #68]	@ 0x44
 8002102:	e002      	b.n	800210a <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	e000      	b.n	800210c <USART_Clock_Enable+0x120>
	}
	return 1;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40011000 	.word	0x40011000
 800211c:	40023800 	.word	0x40023800
 8002120:	40004400 	.word	0x40004400
 8002124:	40004800 	.word	0x40004800
 8002128:	40004c00 	.word	0x40004c00
 800212c:	40005000 	.word	0x40005000
 8002130:	40011400 	.word	0x40011400

08002134 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af04      	add	r7, sp, #16
 800213a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4aa0      	ldr	r2, [pc, #640]	@ (80023c4 <PIN_Setup+0x290>)
 8002142:	4293      	cmp	r3, r2
 8002144:	f040 810d 	bne.w	8002362 <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	4293      	cmp	r3, r2
 8002150:	d00f      	beq.n	8002172 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b1b      	ldrb	r3, [r3, #12]
 8002156:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002158:	4293      	cmp	r3, r2
 800215a:	d00a      	beq.n	8002172 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7b1b      	ldrb	r3, [r3, #12]
 8002160:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002162:	4293      	cmp	r3, r2
 8002164:	d005      	beq.n	8002172 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7b1b      	ldrb	r3, [r3, #12]
 800216a:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 800216c:	4293      	cmp	r3, r2
 800216e:	f040 80be 	bne.w	80022ee <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7b5b      	ldrb	r3, [r3, #13]
 8002176:	2209      	movs	r2, #9
 8002178:	4293      	cmp	r3, r2
 800217a:	d10f      	bne.n	800219c <PIN_Setup+0x68>
 800217c:	2009      	movs	r0, #9
 800217e:	2402      	movs	r4, #2
 8002180:	2500      	movs	r5, #0
 8002182:	2302      	movs	r3, #2
 8002184:	2200      	movs	r2, #0
 8002186:	2107      	movs	r1, #7
 8002188:	9102      	str	r1, [sp, #8]
 800218a:	9201      	str	r2, [sp, #4]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	462b      	mov	r3, r5
 8002190:	4622      	mov	r2, r4
 8002192:	4601      	mov	r1, r0
 8002194:	488c      	ldr	r0, [pc, #560]	@ (80023c8 <PIN_Setup+0x294>)
 8002196:	f7fe fd85 	bl	8000ca4 <GPIO_Pin_Init>
 800219a:	e013      	b.n	80021c4 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7b5b      	ldrb	r3, [r3, #13]
 80021a0:	2206      	movs	r2, #6
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10e      	bne.n	80021c4 <PIN_Setup+0x90>
 80021a6:	2006      	movs	r0, #6
 80021a8:	2402      	movs	r4, #2
 80021aa:	2500      	movs	r5, #0
 80021ac:	2302      	movs	r3, #2
 80021ae:	2200      	movs	r2, #0
 80021b0:	2107      	movs	r1, #7
 80021b2:	9102      	str	r1, [sp, #8]
 80021b4:	9201      	str	r2, [sp, #4]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	462b      	mov	r3, r5
 80021ba:	4622      	mov	r2, r4
 80021bc:	4601      	mov	r1, r0
 80021be:	4883      	ldr	r0, [pc, #524]	@ (80023cc <PIN_Setup+0x298>)
 80021c0:	f7fe fd70 	bl	8000ca4 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b9b      	ldrb	r3, [r3, #14]
 80021c8:	220a      	movs	r2, #10
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10f      	bne.n	80021ee <PIN_Setup+0xba>
 80021ce:	200a      	movs	r0, #10
 80021d0:	2402      	movs	r4, #2
 80021d2:	2500      	movs	r5, #0
 80021d4:	2302      	movs	r3, #2
 80021d6:	2200      	movs	r2, #0
 80021d8:	2107      	movs	r1, #7
 80021da:	9102      	str	r1, [sp, #8]
 80021dc:	9201      	str	r2, [sp, #4]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	462b      	mov	r3, r5
 80021e2:	4622      	mov	r2, r4
 80021e4:	4601      	mov	r1, r0
 80021e6:	4878      	ldr	r0, [pc, #480]	@ (80023c8 <PIN_Setup+0x294>)
 80021e8:	f7fe fd5c 	bl	8000ca4 <GPIO_Pin_Init>
 80021ec:	e013      	b.n	8002216 <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7b9b      	ldrb	r3, [r3, #14]
 80021f2:	2207      	movs	r2, #7
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d10e      	bne.n	8002216 <PIN_Setup+0xe2>
 80021f8:	2007      	movs	r0, #7
 80021fa:	2402      	movs	r4, #2
 80021fc:	2500      	movs	r5, #0
 80021fe:	2302      	movs	r3, #2
 8002200:	2200      	movs	r2, #0
 8002202:	2107      	movs	r1, #7
 8002204:	9102      	str	r1, [sp, #8]
 8002206:	9201      	str	r2, [sp, #4]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	462b      	mov	r3, r5
 800220c:	4622      	mov	r2, r4
 800220e:	4601      	mov	r1, r0
 8002210:	486e      	ldr	r0, [pc, #440]	@ (80023cc <PIN_Setup+0x298>)
 8002212:	f7fe fd47 	bl	8000ca4 <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7b1b      	ldrb	r3, [r3, #12]
 800221a:	2202      	movs	r2, #2
 800221c:	4293      	cmp	r3, r2
 800221e:	d113      	bne.n	8002248 <PIN_Setup+0x114>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7bdb      	ldrb	r3, [r3, #15]
 8002224:	2208      	movs	r2, #8
 8002226:	4293      	cmp	r3, r2
 8002228:	d10e      	bne.n	8002248 <PIN_Setup+0x114>
 800222a:	2008      	movs	r0, #8
 800222c:	2402      	movs	r4, #2
 800222e:	2500      	movs	r5, #0
 8002230:	2302      	movs	r3, #2
 8002232:	2200      	movs	r2, #0
 8002234:	2107      	movs	r1, #7
 8002236:	9102      	str	r1, [sp, #8]
 8002238:	9201      	str	r2, [sp, #4]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	462b      	mov	r3, r5
 800223e:	4622      	mov	r2, r4
 8002240:	4601      	mov	r1, r0
 8002242:	4861      	ldr	r0, [pc, #388]	@ (80023c8 <PIN_Setup+0x294>)
 8002244:	f7fe fd2e 	bl	8000ca4 <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7cdb      	ldrb	r3, [r3, #19]
 800224c:	2200      	movs	r2, #0
 800224e:	4293      	cmp	r3, r2
 8002250:	f000 83bb 	beq.w	80029ca <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7cdb      	ldrb	r3, [r3, #19]
 8002258:	2201      	movs	r2, #1
 800225a:	4293      	cmp	r3, r2
 800225c:	d10e      	bne.n	800227c <PIN_Setup+0x148>
 800225e:	200b      	movs	r0, #11
 8002260:	2402      	movs	r4, #2
 8002262:	2500      	movs	r5, #0
 8002264:	2302      	movs	r3, #2
 8002266:	2200      	movs	r2, #0
 8002268:	2107      	movs	r1, #7
 800226a:	9102      	str	r1, [sp, #8]
 800226c:	9201      	str	r2, [sp, #4]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	462b      	mov	r3, r5
 8002272:	4622      	mov	r2, r4
 8002274:	4601      	mov	r1, r0
 8002276:	4854      	ldr	r0, [pc, #336]	@ (80023c8 <PIN_Setup+0x294>)
 8002278:	f7fe fd14 	bl	8000ca4 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7cdb      	ldrb	r3, [r3, #19]
 8002280:	2202      	movs	r2, #2
 8002282:	4293      	cmp	r3, r2
 8002284:	d10e      	bne.n	80022a4 <PIN_Setup+0x170>
 8002286:	200c      	movs	r0, #12
 8002288:	2402      	movs	r4, #2
 800228a:	2500      	movs	r5, #0
 800228c:	2302      	movs	r3, #2
 800228e:	2200      	movs	r2, #0
 8002290:	2107      	movs	r1, #7
 8002292:	9102      	str	r1, [sp, #8]
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	462b      	mov	r3, r5
 800229a:	4622      	mov	r2, r4
 800229c:	4601      	mov	r1, r0
 800229e:	484a      	ldr	r0, [pc, #296]	@ (80023c8 <PIN_Setup+0x294>)
 80022a0:	f7fe fd00 	bl	8000ca4 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7cdb      	ldrb	r3, [r3, #19]
 80022a8:	2203      	movs	r2, #3
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f040 838d 	bne.w	80029ca <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80022b0:	200b      	movs	r0, #11
 80022b2:	2402      	movs	r4, #2
 80022b4:	2500      	movs	r5, #0
 80022b6:	2302      	movs	r3, #2
 80022b8:	2200      	movs	r2, #0
 80022ba:	2107      	movs	r1, #7
 80022bc:	9102      	str	r1, [sp, #8]
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	462b      	mov	r3, r5
 80022c4:	4622      	mov	r2, r4
 80022c6:	4601      	mov	r1, r0
 80022c8:	483f      	ldr	r0, [pc, #252]	@ (80023c8 <PIN_Setup+0x294>)
 80022ca:	f7fe fceb 	bl	8000ca4 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80022ce:	200c      	movs	r0, #12
 80022d0:	2402      	movs	r4, #2
 80022d2:	2500      	movs	r5, #0
 80022d4:	2302      	movs	r3, #2
 80022d6:	2200      	movs	r2, #0
 80022d8:	2107      	movs	r1, #7
 80022da:	9102      	str	r1, [sp, #8]
 80022dc:	9201      	str	r2, [sp, #4]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	462b      	mov	r3, r5
 80022e2:	4622      	mov	r2, r4
 80022e4:	4601      	mov	r1, r0
 80022e6:	4838      	ldr	r0, [pc, #224]	@ (80023c8 <PIN_Setup+0x294>)
 80022e8:	f7fe fcdc 	bl	8000ca4 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80022ec:	e36d      	b.n	80029ca <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7b1b      	ldrb	r3, [r3, #12]
 80022f2:	2206      	movs	r2, #6
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00a      	beq.n	800230e <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7b1b      	ldrb	r3, [r3, #12]
 80022fc:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80022fe:	4293      	cmp	r3, r2
 8002300:	d005      	beq.n	800230e <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7b1b      	ldrb	r3, [r3, #12]
 8002306:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002308:	4293      	cmp	r3, r2
 800230a:	f040 8363 	bne.w	80029d4 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7b5b      	ldrb	r3, [r3, #13]
 8002312:	2209      	movs	r2, #9
 8002314:	4293      	cmp	r3, r2
 8002316:	d10e      	bne.n	8002336 <PIN_Setup+0x202>
 8002318:	2009      	movs	r0, #9
 800231a:	2402      	movs	r4, #2
 800231c:	2500      	movs	r5, #0
 800231e:	2302      	movs	r3, #2
 8002320:	2200      	movs	r2, #0
 8002322:	2107      	movs	r1, #7
 8002324:	9102      	str	r1, [sp, #8]
 8002326:	9201      	str	r2, [sp, #4]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	462b      	mov	r3, r5
 800232c:	4622      	mov	r2, r4
 800232e:	4601      	mov	r1, r0
 8002330:	4825      	ldr	r0, [pc, #148]	@ (80023c8 <PIN_Setup+0x294>)
 8002332:	f7fe fcb7 	bl	8000ca4 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	2207      	movs	r2, #7
 800233c:	4293      	cmp	r3, r2
 800233e:	f040 8349 	bne.w	80029d4 <PIN_Setup+0x8a0>
 8002342:	2008      	movs	r0, #8
 8002344:	2402      	movs	r4, #2
 8002346:	2500      	movs	r5, #0
 8002348:	2302      	movs	r3, #2
 800234a:	2200      	movs	r2, #0
 800234c:	2107      	movs	r1, #7
 800234e:	9102      	str	r1, [sp, #8]
 8002350:	9201      	str	r2, [sp, #4]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	462b      	mov	r3, r5
 8002356:	4622      	mov	r2, r4
 8002358:	4601      	mov	r1, r0
 800235a:	481b      	ldr	r0, [pc, #108]	@ (80023c8 <PIN_Setup+0x294>)
 800235c:	f7fe fca2 	bl	8000ca4 <GPIO_Pin_Init>
//
//		}
//	}


}
 8002360:	e338      	b.n	80029d4 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <PIN_Setup+0x29c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	f040 817b 	bne.w	8002664 <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7b1b      	ldrb	r3, [r3, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	4293      	cmp	r3, r2
 8002376:	d00f      	beq.n	8002398 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7b1b      	ldrb	r3, [r3, #12]
 800237c:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 800237e:	4293      	cmp	r3, r2
 8002380:	d00a      	beq.n	8002398 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7b1b      	ldrb	r3, [r3, #12]
 8002386:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002388:	4293      	cmp	r3, r2
 800238a:	d005      	beq.n	8002398 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
 8002390:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002392:	4293      	cmp	r3, r2
 8002394:	f040 80f8 	bne.w	8002588 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7b5b      	ldrb	r3, [r3, #13]
 800239c:	2202      	movs	r2, #2
 800239e:	4293      	cmp	r3, r2
 80023a0:	d118      	bne.n	80023d4 <PIN_Setup+0x2a0>
 80023a2:	2002      	movs	r0, #2
 80023a4:	2402      	movs	r4, #2
 80023a6:	2500      	movs	r5, #0
 80023a8:	2302      	movs	r3, #2
 80023aa:	2200      	movs	r2, #0
 80023ac:	2107      	movs	r1, #7
 80023ae:	9102      	str	r1, [sp, #8]
 80023b0:	9201      	str	r2, [sp, #4]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	462b      	mov	r3, r5
 80023b6:	4622      	mov	r2, r4
 80023b8:	4601      	mov	r1, r0
 80023ba:	4803      	ldr	r0, [pc, #12]	@ (80023c8 <PIN_Setup+0x294>)
 80023bc:	f7fe fc72 	bl	8000ca4 <GPIO_Pin_Init>
 80023c0:	e01c      	b.n	80023fc <PIN_Setup+0x2c8>
 80023c2:	bf00      	nop
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7b5b      	ldrb	r3, [r3, #13]
 80023d8:	2205      	movs	r2, #5
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10e      	bne.n	80023fc <PIN_Setup+0x2c8>
 80023de:	2005      	movs	r0, #5
 80023e0:	2402      	movs	r4, #2
 80023e2:	2500      	movs	r5, #0
 80023e4:	2302      	movs	r3, #2
 80023e6:	2200      	movs	r2, #0
 80023e8:	2107      	movs	r1, #7
 80023ea:	9102      	str	r1, [sp, #8]
 80023ec:	9201      	str	r2, [sp, #4]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	462b      	mov	r3, r5
 80023f2:	4622      	mov	r2, r4
 80023f4:	4601      	mov	r1, r0
 80023f6:	4899      	ldr	r0, [pc, #612]	@ (800265c <PIN_Setup+0x528>)
 80023f8:	f7fe fc54 	bl	8000ca4 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7b9b      	ldrb	r3, [r3, #14]
 8002400:	2203      	movs	r2, #3
 8002402:	4293      	cmp	r3, r2
 8002404:	d10f      	bne.n	8002426 <PIN_Setup+0x2f2>
 8002406:	2003      	movs	r0, #3
 8002408:	2402      	movs	r4, #2
 800240a:	2500      	movs	r5, #0
 800240c:	2302      	movs	r3, #2
 800240e:	2200      	movs	r2, #0
 8002410:	2107      	movs	r1, #7
 8002412:	9102      	str	r1, [sp, #8]
 8002414:	9201      	str	r2, [sp, #4]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	462b      	mov	r3, r5
 800241a:	4622      	mov	r2, r4
 800241c:	4601      	mov	r1, r0
 800241e:	4890      	ldr	r0, [pc, #576]	@ (8002660 <PIN_Setup+0x52c>)
 8002420:	f7fe fc40 	bl	8000ca4 <GPIO_Pin_Init>
 8002424:	e013      	b.n	800244e <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7b9b      	ldrb	r3, [r3, #14]
 800242a:	2206      	movs	r2, #6
 800242c:	4293      	cmp	r3, r2
 800242e:	d10e      	bne.n	800244e <PIN_Setup+0x31a>
 8002430:	2006      	movs	r0, #6
 8002432:	2402      	movs	r4, #2
 8002434:	2500      	movs	r5, #0
 8002436:	2302      	movs	r3, #2
 8002438:	2200      	movs	r2, #0
 800243a:	2107      	movs	r1, #7
 800243c:	9102      	str	r1, [sp, #8]
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	462b      	mov	r3, r5
 8002444:	4622      	mov	r2, r4
 8002446:	4601      	mov	r1, r0
 8002448:	4884      	ldr	r0, [pc, #528]	@ (800265c <PIN_Setup+0x528>)
 800244a:	f7fe fc2b 	bl	8000ca4 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7b1b      	ldrb	r3, [r3, #12]
 8002452:	2202      	movs	r2, #2
 8002454:	4293      	cmp	r3, r2
 8002456:	d128      	bne.n	80024aa <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7bdb      	ldrb	r3, [r3, #15]
 800245c:	2204      	movs	r2, #4
 800245e:	4293      	cmp	r3, r2
 8002460:	d10f      	bne.n	8002482 <PIN_Setup+0x34e>
 8002462:	2004      	movs	r0, #4
 8002464:	2402      	movs	r4, #2
 8002466:	2500      	movs	r5, #0
 8002468:	2302      	movs	r3, #2
 800246a:	2200      	movs	r2, #0
 800246c:	2107      	movs	r1, #7
 800246e:	9102      	str	r1, [sp, #8]
 8002470:	9201      	str	r2, [sp, #4]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	462b      	mov	r3, r5
 8002476:	4622      	mov	r2, r4
 8002478:	4601      	mov	r1, r0
 800247a:	4879      	ldr	r0, [pc, #484]	@ (8002660 <PIN_Setup+0x52c>)
 800247c:	f7fe fc12 	bl	8000ca4 <GPIO_Pin_Init>
 8002480:	e013      	b.n	80024aa <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7bdb      	ldrb	r3, [r3, #15]
 8002486:	2207      	movs	r2, #7
 8002488:	4293      	cmp	r3, r2
 800248a:	d10e      	bne.n	80024aa <PIN_Setup+0x376>
 800248c:	2007      	movs	r0, #7
 800248e:	2402      	movs	r4, #2
 8002490:	2500      	movs	r5, #0
 8002492:	2302      	movs	r3, #2
 8002494:	2200      	movs	r2, #0
 8002496:	2107      	movs	r1, #7
 8002498:	9102      	str	r1, [sp, #8]
 800249a:	9201      	str	r2, [sp, #4]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	462b      	mov	r3, r5
 80024a0:	4622      	mov	r2, r4
 80024a2:	4601      	mov	r1, r0
 80024a4:	486e      	ldr	r0, [pc, #440]	@ (8002660 <PIN_Setup+0x52c>)
 80024a6:	f7fe fbfd 	bl	8000ca4 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7cdb      	ldrb	r3, [r3, #19]
 80024ae:	2200      	movs	r2, #0
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d105      	bne.n	80024c0 <PIN_Setup+0x38c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7cdb      	ldrb	r3, [r3, #19]
 80024b8:	2203      	movs	r2, #3
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f040 8287 	bne.w	80029ce <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7cdb      	ldrb	r3, [r3, #19]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d128      	bne.n	800251c <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7bdb      	ldrb	r3, [r3, #15]
 80024ce:	2200      	movs	r2, #0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10f      	bne.n	80024f4 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80024d4:	2000      	movs	r0, #0
 80024d6:	2402      	movs	r4, #2
 80024d8:	2500      	movs	r5, #0
 80024da:	2302      	movs	r3, #2
 80024dc:	2200      	movs	r2, #0
 80024de:	2107      	movs	r1, #7
 80024e0:	9102      	str	r1, [sp, #8]
 80024e2:	9201      	str	r2, [sp, #4]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	462b      	mov	r3, r5
 80024e8:	4622      	mov	r2, r4
 80024ea:	4601      	mov	r1, r0
 80024ec:	485c      	ldr	r0, [pc, #368]	@ (8002660 <PIN_Setup+0x52c>)
 80024ee:	f7fe fbd9 	bl	8000ca4 <GPIO_Pin_Init>
 80024f2:	e013      	b.n	800251c <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7bdb      	ldrb	r3, [r3, #15]
 80024f8:	2203      	movs	r2, #3
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10e      	bne.n	800251c <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80024fe:	2003      	movs	r0, #3
 8002500:	2402      	movs	r4, #2
 8002502:	2500      	movs	r5, #0
 8002504:	2302      	movs	r3, #2
 8002506:	2200      	movs	r2, #0
 8002508:	2107      	movs	r1, #7
 800250a:	9102      	str	r1, [sp, #8]
 800250c:	9201      	str	r2, [sp, #4]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	462b      	mov	r3, r5
 8002512:	4622      	mov	r2, r4
 8002514:	4601      	mov	r1, r0
 8002516:	4851      	ldr	r0, [pc, #324]	@ (800265c <PIN_Setup+0x528>)
 8002518:	f7fe fbc4 	bl	8000ca4 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7cdb      	ldrb	r3, [r3, #19]
 8002520:	2202      	movs	r2, #2
 8002522:	4293      	cmp	r3, r2
 8002524:	d005      	beq.n	8002532 <PIN_Setup+0x3fe>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7cdb      	ldrb	r3, [r3, #19]
 800252a:	2203      	movs	r2, #3
 800252c:	4293      	cmp	r3, r2
 800252e:	f040 824e 	bne.w	80029ce <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7bdb      	ldrb	r3, [r3, #15]
 8002536:	2201      	movs	r2, #1
 8002538:	4293      	cmp	r3, r2
 800253a:	d10f      	bne.n	800255c <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800253c:	2001      	movs	r0, #1
 800253e:	2402      	movs	r4, #2
 8002540:	2500      	movs	r5, #0
 8002542:	2302      	movs	r3, #2
 8002544:	2200      	movs	r2, #0
 8002546:	2107      	movs	r1, #7
 8002548:	9102      	str	r1, [sp, #8]
 800254a:	9201      	str	r2, [sp, #4]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	462b      	mov	r3, r5
 8002550:	4622      	mov	r2, r4
 8002552:	4601      	mov	r1, r0
 8002554:	4842      	ldr	r0, [pc, #264]	@ (8002660 <PIN_Setup+0x52c>)
 8002556:	f7fe fba5 	bl	8000ca4 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800255a:	e238      	b.n	80029ce <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7bdb      	ldrb	r3, [r3, #15]
 8002560:	2204      	movs	r2, #4
 8002562:	4293      	cmp	r3, r2
 8002564:	f040 8233 	bne.w	80029ce <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002568:	2004      	movs	r0, #4
 800256a:	2402      	movs	r4, #2
 800256c:	2500      	movs	r5, #0
 800256e:	2302      	movs	r3, #2
 8002570:	2200      	movs	r2, #0
 8002572:	2107      	movs	r1, #7
 8002574:	9102      	str	r1, [sp, #8]
 8002576:	9201      	str	r2, [sp, #4]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	462b      	mov	r3, r5
 800257c:	4622      	mov	r2, r4
 800257e:	4601      	mov	r1, r0
 8002580:	4836      	ldr	r0, [pc, #216]	@ (800265c <PIN_Setup+0x528>)
 8002582:	f7fe fb8f 	bl	8000ca4 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002586:	e222      	b.n	80029ce <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7b1b      	ldrb	r3, [r3, #12]
 800258c:	2206      	movs	r2, #6
 800258e:	4293      	cmp	r3, r2
 8002590:	d00a      	beq.n	80025a8 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7b1b      	ldrb	r3, [r3, #12]
 8002596:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002598:	4293      	cmp	r3, r2
 800259a:	d005      	beq.n	80025a8 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7b1b      	ldrb	r3, [r3, #12]
 80025a0:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f040 8216 	bne.w	80029d4 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7b5b      	ldrb	r3, [r3, #13]
 80025ac:	2202      	movs	r2, #2
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10f      	bne.n	80025d2 <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025b2:	2002      	movs	r0, #2
 80025b4:	2402      	movs	r4, #2
 80025b6:	2500      	movs	r5, #0
 80025b8:	2302      	movs	r3, #2
 80025ba:	2200      	movs	r2, #0
 80025bc:	2107      	movs	r1, #7
 80025be:	9102      	str	r1, [sp, #8]
 80025c0:	9201      	str	r2, [sp, #4]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	462b      	mov	r3, r5
 80025c6:	4622      	mov	r2, r4
 80025c8:	4601      	mov	r1, r0
 80025ca:	4825      	ldr	r0, [pc, #148]	@ (8002660 <PIN_Setup+0x52c>)
 80025cc:	f7fe fb6a 	bl	8000ca4 <GPIO_Pin_Init>
 80025d0:	e013      	b.n	80025fa <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7b5b      	ldrb	r3, [r3, #13]
 80025d6:	2205      	movs	r2, #5
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10e      	bne.n	80025fa <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80025dc:	2005      	movs	r0, #5
 80025de:	2402      	movs	r4, #2
 80025e0:	2500      	movs	r5, #0
 80025e2:	2302      	movs	r3, #2
 80025e4:	2200      	movs	r2, #0
 80025e6:	2107      	movs	r1, #7
 80025e8:	9102      	str	r1, [sp, #8]
 80025ea:	9201      	str	r2, [sp, #4]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	462b      	mov	r3, r5
 80025f0:	4622      	mov	r2, r4
 80025f2:	4601      	mov	r1, r0
 80025f4:	4819      	ldr	r0, [pc, #100]	@ (800265c <PIN_Setup+0x528>)
 80025f6:	f7fe fb55 	bl	8000ca4 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7b1b      	ldrb	r3, [r3, #12]
 80025fe:	2207      	movs	r2, #7
 8002600:	4293      	cmp	r3, r2
 8002602:	f040 81e7 	bne.w	80029d4 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7bdb      	ldrb	r3, [r3, #15]
 800260a:	2204      	movs	r2, #4
 800260c:	4293      	cmp	r3, r2
 800260e:	d10f      	bne.n	8002630 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002610:	2004      	movs	r0, #4
 8002612:	2402      	movs	r4, #2
 8002614:	2500      	movs	r5, #0
 8002616:	2302      	movs	r3, #2
 8002618:	2200      	movs	r2, #0
 800261a:	2107      	movs	r1, #7
 800261c:	9102      	str	r1, [sp, #8]
 800261e:	9201      	str	r2, [sp, #4]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	462b      	mov	r3, r5
 8002624:	4622      	mov	r2, r4
 8002626:	4601      	mov	r1, r0
 8002628:	480d      	ldr	r0, [pc, #52]	@ (8002660 <PIN_Setup+0x52c>)
 800262a:	f7fe fb3b 	bl	8000ca4 <GPIO_Pin_Init>
}
 800262e:	e1d1      	b.n	80029d4 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7bdb      	ldrb	r3, [r3, #15]
 8002634:	2207      	movs	r2, #7
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 81cc 	bne.w	80029d4 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800263c:	2007      	movs	r0, #7
 800263e:	2402      	movs	r4, #2
 8002640:	2500      	movs	r5, #0
 8002642:	2302      	movs	r3, #2
 8002644:	2200      	movs	r2, #0
 8002646:	2107      	movs	r1, #7
 8002648:	9102      	str	r1, [sp, #8]
 800264a:	9201      	str	r2, [sp, #4]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	462b      	mov	r3, r5
 8002650:	4622      	mov	r2, r4
 8002652:	4601      	mov	r1, r0
 8002654:	4802      	ldr	r0, [pc, #8]	@ (8002660 <PIN_Setup+0x52c>)
 8002656:	f7fe fb25 	bl	8000ca4 <GPIO_Pin_Init>
}
 800265a:	e1bb      	b.n	80029d4 <PIN_Setup+0x8a0>
 800265c:	40020c00 	.word	0x40020c00
 8002660:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4aaa      	ldr	r2, [pc, #680]	@ (8002914 <PIN_Setup+0x7e0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	f040 81b2 	bne.w	80029d4 <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7b1b      	ldrb	r3, [r3, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	4293      	cmp	r3, r2
 8002678:	d00f      	beq.n	800269a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7b1b      	ldrb	r3, [r3, #12]
 800267e:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002680:	4293      	cmp	r3, r2
 8002682:	d00a      	beq.n	800269a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7b1b      	ldrb	r3, [r3, #12]
 8002688:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 800268a:	4293      	cmp	r3, r2
 800268c:	d005      	beq.n	800269a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7b1b      	ldrb	r3, [r3, #12]
 8002692:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002694:	4293      	cmp	r3, r2
 8002696:	f040 8119 	bne.w	80028cc <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7b5b      	ldrb	r3, [r3, #13]
 800269e:	220b      	movs	r2, #11
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10f      	bne.n	80026c4 <PIN_Setup+0x590>
 80026a4:	200b      	movs	r0, #11
 80026a6:	2402      	movs	r4, #2
 80026a8:	2500      	movs	r5, #0
 80026aa:	2302      	movs	r3, #2
 80026ac:	2200      	movs	r2, #0
 80026ae:	2107      	movs	r1, #7
 80026b0:	9102      	str	r1, [sp, #8]
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	462b      	mov	r3, r5
 80026b8:	4622      	mov	r2, r4
 80026ba:	4601      	mov	r1, r0
 80026bc:	4896      	ldr	r0, [pc, #600]	@ (8002918 <PIN_Setup+0x7e4>)
 80026be:	f7fe faf1 	bl	8000ca4 <GPIO_Pin_Init>
 80026c2:	e028      	b.n	8002716 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7b5b      	ldrb	r3, [r3, #13]
 80026c8:	220a      	movs	r2, #10
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10f      	bne.n	80026ee <PIN_Setup+0x5ba>
 80026ce:	200a      	movs	r0, #10
 80026d0:	2402      	movs	r4, #2
 80026d2:	2500      	movs	r5, #0
 80026d4:	2302      	movs	r3, #2
 80026d6:	2200      	movs	r2, #0
 80026d8:	2107      	movs	r1, #7
 80026da:	9102      	str	r1, [sp, #8]
 80026dc:	9201      	str	r2, [sp, #4]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	462b      	mov	r3, r5
 80026e2:	4622      	mov	r2, r4
 80026e4:	4601      	mov	r1, r0
 80026e6:	488d      	ldr	r0, [pc, #564]	@ (800291c <PIN_Setup+0x7e8>)
 80026e8:	f7fe fadc 	bl	8000ca4 <GPIO_Pin_Init>
 80026ec:	e013      	b.n	8002716 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7b5b      	ldrb	r3, [r3, #13]
 80026f2:	2208      	movs	r2, #8
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10e      	bne.n	8002716 <PIN_Setup+0x5e2>
 80026f8:	2008      	movs	r0, #8
 80026fa:	2402      	movs	r4, #2
 80026fc:	2500      	movs	r5, #0
 80026fe:	2302      	movs	r3, #2
 8002700:	2200      	movs	r2, #0
 8002702:	2107      	movs	r1, #7
 8002704:	9102      	str	r1, [sp, #8]
 8002706:	9201      	str	r2, [sp, #4]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	462b      	mov	r3, r5
 800270c:	4622      	mov	r2, r4
 800270e:	4601      	mov	r1, r0
 8002710:	4882      	ldr	r0, [pc, #520]	@ (800291c <PIN_Setup+0x7e8>)
 8002712:	f7fe fac7 	bl	8000ca4 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7b9b      	ldrb	r3, [r3, #14]
 800271a:	220a      	movs	r2, #10
 800271c:	4293      	cmp	r3, r2
 800271e:	d10f      	bne.n	8002740 <PIN_Setup+0x60c>
 8002720:	200a      	movs	r0, #10
 8002722:	2402      	movs	r4, #2
 8002724:	2500      	movs	r5, #0
 8002726:	2302      	movs	r3, #2
 8002728:	2200      	movs	r2, #0
 800272a:	2107      	movs	r1, #7
 800272c:	9102      	str	r1, [sp, #8]
 800272e:	9201      	str	r2, [sp, #4]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	462b      	mov	r3, r5
 8002734:	4622      	mov	r2, r4
 8002736:	4601      	mov	r1, r0
 8002738:	4877      	ldr	r0, [pc, #476]	@ (8002918 <PIN_Setup+0x7e4>)
 800273a:	f7fe fab3 	bl	8000ca4 <GPIO_Pin_Init>
 800273e:	e028      	b.n	8002792 <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7b9b      	ldrb	r3, [r3, #14]
 8002744:	220b      	movs	r2, #11
 8002746:	4293      	cmp	r3, r2
 8002748:	d10f      	bne.n	800276a <PIN_Setup+0x636>
 800274a:	200b      	movs	r0, #11
 800274c:	2402      	movs	r4, #2
 800274e:	2500      	movs	r5, #0
 8002750:	2302      	movs	r3, #2
 8002752:	2200      	movs	r2, #0
 8002754:	2107      	movs	r1, #7
 8002756:	9102      	str	r1, [sp, #8]
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	462b      	mov	r3, r5
 800275e:	4622      	mov	r2, r4
 8002760:	4601      	mov	r1, r0
 8002762:	486e      	ldr	r0, [pc, #440]	@ (800291c <PIN_Setup+0x7e8>)
 8002764:	f7fe fa9e 	bl	8000ca4 <GPIO_Pin_Init>
 8002768:	e013      	b.n	8002792 <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7b5b      	ldrb	r3, [r3, #13]
 800276e:	2208      	movs	r2, #8
 8002770:	4293      	cmp	r3, r2
 8002772:	d10e      	bne.n	8002792 <PIN_Setup+0x65e>
 8002774:	2008      	movs	r0, #8
 8002776:	2402      	movs	r4, #2
 8002778:	2500      	movs	r5, #0
 800277a:	2302      	movs	r3, #2
 800277c:	2200      	movs	r2, #0
 800277e:	2107      	movs	r1, #7
 8002780:	9102      	str	r1, [sp, #8]
 8002782:	9201      	str	r2, [sp, #4]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	462b      	mov	r3, r5
 8002788:	4622      	mov	r2, r4
 800278a:	4601      	mov	r1, r0
 800278c:	4863      	ldr	r0, [pc, #396]	@ (800291c <PIN_Setup+0x7e8>)
 800278e:	f7fe fa89 	bl	8000ca4 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7b1b      	ldrb	r3, [r3, #12]
 8002796:	2202      	movs	r2, #2
 8002798:	4293      	cmp	r3, r2
 800279a:	d128      	bne.n	80027ee <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7bdb      	ldrb	r3, [r3, #15]
 80027a0:	220c      	movs	r2, #12
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10f      	bne.n	80027c6 <PIN_Setup+0x692>
 80027a6:	200c      	movs	r0, #12
 80027a8:	2402      	movs	r4, #2
 80027aa:	2500      	movs	r5, #0
 80027ac:	2302      	movs	r3, #2
 80027ae:	2200      	movs	r2, #0
 80027b0:	2107      	movs	r1, #7
 80027b2:	9102      	str	r1, [sp, #8]
 80027b4:	9201      	str	r2, [sp, #4]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	462b      	mov	r3, r5
 80027ba:	4622      	mov	r2, r4
 80027bc:	4601      	mov	r1, r0
 80027be:	4857      	ldr	r0, [pc, #348]	@ (800291c <PIN_Setup+0x7e8>)
 80027c0:	f7fe fa70 	bl	8000ca4 <GPIO_Pin_Init>
 80027c4:	e013      	b.n	80027ee <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7bdb      	ldrb	r3, [r3, #15]
 80027ca:	220a      	movs	r2, #10
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10e      	bne.n	80027ee <PIN_Setup+0x6ba>
 80027d0:	200a      	movs	r0, #10
 80027d2:	2402      	movs	r4, #2
 80027d4:	2500      	movs	r5, #0
 80027d6:	2302      	movs	r3, #2
 80027d8:	2200      	movs	r2, #0
 80027da:	2107      	movs	r1, #7
 80027dc:	9102      	str	r1, [sp, #8]
 80027de:	9201      	str	r2, [sp, #4]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	462b      	mov	r3, r5
 80027e4:	4622      	mov	r2, r4
 80027e6:	4601      	mov	r1, r0
 80027e8:	484d      	ldr	r0, [pc, #308]	@ (8002920 <PIN_Setup+0x7ec>)
 80027ea:	f7fe fa5b 	bl	8000ca4 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7cdb      	ldrb	r3, [r3, #19]
 80027f2:	2200      	movs	r2, #0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	f000 80ec 	beq.w	80029d2 <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7cdb      	ldrb	r3, [r3, #19]
 80027fe:	2201      	movs	r2, #1
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <PIN_Setup+0x6da>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7cdb      	ldrb	r3, [r3, #19]
 8002808:	2203      	movs	r2, #3
 800280a:	4293      	cmp	r3, r2
 800280c:	d128      	bne.n	8002860 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7bdb      	ldrb	r3, [r3, #15]
 8002812:	2200      	movs	r2, #0
 8002814:	4293      	cmp	r3, r2
 8002816:	d10f      	bne.n	8002838 <PIN_Setup+0x704>
 8002818:	2000      	movs	r0, #0
 800281a:	2402      	movs	r4, #2
 800281c:	2500      	movs	r5, #0
 800281e:	2302      	movs	r3, #2
 8002820:	2200      	movs	r2, #0
 8002822:	2107      	movs	r1, #7
 8002824:	9102      	str	r1, [sp, #8]
 8002826:	9201      	str	r2, [sp, #4]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	462b      	mov	r3, r5
 800282c:	4622      	mov	r2, r4
 800282e:	4601      	mov	r1, r0
 8002830:	483a      	ldr	r0, [pc, #232]	@ (800291c <PIN_Setup+0x7e8>)
 8002832:	f7fe fa37 	bl	8000ca4 <GPIO_Pin_Init>
 8002836:	e013      	b.n	8002860 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7bdb      	ldrb	r3, [r3, #15]
 800283c:	2203      	movs	r2, #3
 800283e:	4293      	cmp	r3, r2
 8002840:	d10e      	bne.n	8002860 <PIN_Setup+0x72c>
 8002842:	2003      	movs	r0, #3
 8002844:	2402      	movs	r4, #2
 8002846:	2500      	movs	r5, #0
 8002848:	2302      	movs	r3, #2
 800284a:	2200      	movs	r2, #0
 800284c:	2107      	movs	r1, #7
 800284e:	9102      	str	r1, [sp, #8]
 8002850:	9201      	str	r2, [sp, #4]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	462b      	mov	r3, r5
 8002856:	4622      	mov	r2, r4
 8002858:	4601      	mov	r1, r0
 800285a:	4831      	ldr	r0, [pc, #196]	@ (8002920 <PIN_Setup+0x7ec>)
 800285c:	f7fe fa22 	bl	8000ca4 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7cdb      	ldrb	r3, [r3, #19]
 8002864:	2202      	movs	r2, #2
 8002866:	4293      	cmp	r3, r2
 8002868:	d005      	beq.n	8002876 <PIN_Setup+0x742>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7cdb      	ldrb	r3, [r3, #19]
 800286e:	2203      	movs	r2, #3
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 80ae 	bne.w	80029d2 <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7bdb      	ldrb	r3, [r3, #15]
 800287a:	2201      	movs	r2, #1
 800287c:	4293      	cmp	r3, r2
 800287e:	d10f      	bne.n	80028a0 <PIN_Setup+0x76c>
 8002880:	2001      	movs	r0, #1
 8002882:	2402      	movs	r4, #2
 8002884:	2500      	movs	r5, #0
 8002886:	2302      	movs	r3, #2
 8002888:	2200      	movs	r2, #0
 800288a:	2107      	movs	r1, #7
 800288c:	9102      	str	r1, [sp, #8]
 800288e:	9201      	str	r2, [sp, #4]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	462b      	mov	r3, r5
 8002894:	4622      	mov	r2, r4
 8002896:	4601      	mov	r1, r0
 8002898:	4820      	ldr	r0, [pc, #128]	@ (800291c <PIN_Setup+0x7e8>)
 800289a:	f7fe fa03 	bl	8000ca4 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800289e:	e098      	b.n	80029d2 <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7bdb      	ldrb	r3, [r3, #15]
 80028a4:	2204      	movs	r2, #4
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f040 8093 	bne.w	80029d2 <PIN_Setup+0x89e>
 80028ac:	2004      	movs	r0, #4
 80028ae:	2402      	movs	r4, #2
 80028b0:	2500      	movs	r5, #0
 80028b2:	2302      	movs	r3, #2
 80028b4:	2200      	movs	r2, #0
 80028b6:	2107      	movs	r1, #7
 80028b8:	9102      	str	r1, [sp, #8]
 80028ba:	9201      	str	r2, [sp, #4]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	462b      	mov	r3, r5
 80028c0:	4622      	mov	r2, r4
 80028c2:	4601      	mov	r1, r0
 80028c4:	4816      	ldr	r0, [pc, #88]	@ (8002920 <PIN_Setup+0x7ec>)
 80028c6:	f7fe f9ed 	bl	8000ca4 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80028ca:	e082      	b.n	80029d2 <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7b1b      	ldrb	r3, [r3, #12]
 80028d0:	2206      	movs	r2, #6
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7b1b      	ldrb	r3, [r3, #12]
 80028da:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7b1b      	ldrb	r3, [r3, #12]
 80028e4:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d174      	bne.n	80029d4 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7b5b      	ldrb	r3, [r3, #13]
 80028ee:	220b      	movs	r2, #11
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d117      	bne.n	8002924 <PIN_Setup+0x7f0>
 80028f4:	200b      	movs	r0, #11
 80028f6:	2402      	movs	r4, #2
 80028f8:	2500      	movs	r5, #0
 80028fa:	2302      	movs	r3, #2
 80028fc:	2200      	movs	r2, #0
 80028fe:	2107      	movs	r1, #7
 8002900:	9102      	str	r1, [sp, #8]
 8002902:	9201      	str	r2, [sp, #4]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	462b      	mov	r3, r5
 8002908:	4622      	mov	r2, r4
 800290a:	4601      	mov	r1, r0
 800290c:	4802      	ldr	r0, [pc, #8]	@ (8002918 <PIN_Setup+0x7e4>)
 800290e:	f7fe f9c9 	bl	8000ca4 <GPIO_Pin_Init>
 8002912:	e030      	b.n	8002976 <PIN_Setup+0x842>
 8002914:	40004800 	.word	0x40004800
 8002918:	40020000 	.word	0x40020000
 800291c:	40020400 	.word	0x40020400
 8002920:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7b5b      	ldrb	r3, [r3, #13]
 8002928:	220a      	movs	r2, #10
 800292a:	4293      	cmp	r3, r2
 800292c:	d10f      	bne.n	800294e <PIN_Setup+0x81a>
 800292e:	200a      	movs	r0, #10
 8002930:	2402      	movs	r4, #2
 8002932:	2500      	movs	r5, #0
 8002934:	2302      	movs	r3, #2
 8002936:	2200      	movs	r2, #0
 8002938:	2107      	movs	r1, #7
 800293a:	9102      	str	r1, [sp, #8]
 800293c:	9201      	str	r2, [sp, #4]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	462b      	mov	r3, r5
 8002942:	4622      	mov	r2, r4
 8002944:	4601      	mov	r1, r0
 8002946:	4825      	ldr	r0, [pc, #148]	@ (80029dc <PIN_Setup+0x8a8>)
 8002948:	f7fe f9ac 	bl	8000ca4 <GPIO_Pin_Init>
 800294c:	e013      	b.n	8002976 <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7b5b      	ldrb	r3, [r3, #13]
 8002952:	2208      	movs	r2, #8
 8002954:	4293      	cmp	r3, r2
 8002956:	d10e      	bne.n	8002976 <PIN_Setup+0x842>
 8002958:	2008      	movs	r0, #8
 800295a:	2402      	movs	r4, #2
 800295c:	2500      	movs	r5, #0
 800295e:	2302      	movs	r3, #2
 8002960:	2200      	movs	r2, #0
 8002962:	2107      	movs	r1, #7
 8002964:	9102      	str	r1, [sp, #8]
 8002966:	9201      	str	r2, [sp, #4]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	462b      	mov	r3, r5
 800296c:	4622      	mov	r2, r4
 800296e:	4601      	mov	r1, r0
 8002970:	481a      	ldr	r0, [pc, #104]	@ (80029dc <PIN_Setup+0x8a8>)
 8002972:	f7fe f997 	bl	8000ca4 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7bdb      	ldrb	r3, [r3, #15]
 800297a:	220c      	movs	r2, #12
 800297c:	4293      	cmp	r3, r2
 800297e:	d10f      	bne.n	80029a0 <PIN_Setup+0x86c>
 8002980:	200c      	movs	r0, #12
 8002982:	2402      	movs	r4, #2
 8002984:	2500      	movs	r5, #0
 8002986:	2302      	movs	r3, #2
 8002988:	2200      	movs	r2, #0
 800298a:	2107      	movs	r1, #7
 800298c:	9102      	str	r1, [sp, #8]
 800298e:	9201      	str	r2, [sp, #4]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	462b      	mov	r3, r5
 8002994:	4622      	mov	r2, r4
 8002996:	4601      	mov	r1, r0
 8002998:	4810      	ldr	r0, [pc, #64]	@ (80029dc <PIN_Setup+0x8a8>)
 800299a:	f7fe f983 	bl	8000ca4 <GPIO_Pin_Init>
}
 800299e:	e019      	b.n	80029d4 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7bdb      	ldrb	r3, [r3, #15]
 80029a4:	220a      	movs	r2, #10
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d114      	bne.n	80029d4 <PIN_Setup+0x8a0>
 80029aa:	200a      	movs	r0, #10
 80029ac:	2402      	movs	r4, #2
 80029ae:	2500      	movs	r5, #0
 80029b0:	2302      	movs	r3, #2
 80029b2:	2200      	movs	r2, #0
 80029b4:	2107      	movs	r1, #7
 80029b6:	9102      	str	r1, [sp, #8]
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	462b      	mov	r3, r5
 80029be:	4622      	mov	r2, r4
 80029c0:	4601      	mov	r1, r0
 80029c2:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <PIN_Setup+0x8ac>)
 80029c4:	f7fe f96e 	bl	8000ca4 <GPIO_Pin_Init>
}
 80029c8:	e004      	b.n	80029d4 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80029ca:	bf00      	nop
 80029cc:	e002      	b.n	80029d4 <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80029d2:	bf00      	nop
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bdb0      	pop	{r4, r5, r7, pc}
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	00000000 	.word	0x00000000

080029e8 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	@ 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fafb 	bl	8001fec <USART_Clock_Enable>
	PIN_Setup(config);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fb9c 	bl	8002134 <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd23 	bl	800044c <__aeabi_ui2d>
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b40 <USART_Init+0x158>)
 8002a0c:	f7fd fd98 	bl	8000540 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	a148      	add	r1, pc, #288	@ (adr r1, 8002b38 <USART_Init+0x150>)
 8002a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a1a:	f7fd febb 	bl	8000794 <__aeabi_ddiv>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8002a26:	f107 0208 	add.w	r2, r7, #8
 8002a2a:	f107 0310 	add.w	r3, r7, #16
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	ed97 0b08 	vldr	d0, [r7, #32]
 8002a36:	f7ff fa92 	bl	8001f5e <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 8002a3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <USART_Init+0x15c>)
 8002a44:	f7fd fd7c 	bl	8000540 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	ec43 2b17 	vmov	d7, r2, r3
 8002a50:	eeb0 0a47 	vmov.f32	s0, s14
 8002a54:	eef0 0a67 	vmov.f32	s1, s15
 8002a58:	f000 f89a 	bl	8002b90 <ceil>
 8002a5c:	ec53 2b10 	vmov	r2, r3, d0
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f806 	bl	8000a74 <__aeabi_d2iz>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 8002a6c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a70:	eeb0 0a47 	vmov.f32	s0, s14
 8002a74:	eef0 0a67 	vmov.f32	s1, s15
 8002a78:	f000 f88a 	bl	8002b90 <ceil>
 8002a7c:	ec53 2b10 	vmov	r2, r3, d0
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fd fff6 	bl	8000a74 <__aeabi_d2iz>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a9a:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	011a      	lsls	r2, r3, #4
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7d9b      	ldrb	r3, [r3, #22]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7c9b      	ldrb	r3, [r3, #18]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7d1b      	ldrb	r3, [r3, #20]
 8002adc:	4619      	mov	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7b1b      	ldrb	r3, [r3, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d107      	bne.n	8002b00 <USART_Init+0x118>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0208 	orr.w	r2, r2, #8
 8002afe:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7b1b      	ldrb	r3, [r3, #12]
 8002b04:	2205      	movs	r2, #5
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d107      	bne.n	8002b1a <USART_Init+0x132>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b18:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 020c 	orr.w	r2, r2, #12
 8002b28:	60da      	str	r2, [r3, #12]

	return 1;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3728      	adds	r7, #40	@ 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	f3af 8000 	nop.w
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	41a406f4 	.word	0x41a406f4
 8002b40:	40400000 	.word	0x40400000
 8002b44:	40300000 	.word	0x40300000

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002b80 <__libc_init_array+0x38>)
 8002b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002b84 <__libc_init_array+0x3c>)
 8002b4e:	1b64      	subs	r4, r4, r5
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	2600      	movs	r6, #0
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	4d0b      	ldr	r5, [pc, #44]	@ (8002b88 <__libc_init_array+0x40>)
 8002b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002b8c <__libc_init_array+0x44>)
 8002b5c:	f000 f894 	bl	8002c88 <_init>
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	2600      	movs	r6, #0
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	08002cb0 	.word	0x08002cb0
 8002b84:	08002cb0 	.word	0x08002cb0
 8002b88:	08002cb0 	.word	0x08002cb0
 8002b8c:	08002cb4 	.word	0x08002cb4

08002b90 <ceil>:
 8002b90:	ec51 0b10 	vmov	r0, r1, d0
 8002b94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8002ba0:	2e13      	cmp	r6, #19
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	dc2e      	bgt.n	8002c08 <ceil+0x78>
 8002baa:	2e00      	cmp	r6, #0
 8002bac:	da11      	bge.n	8002bd2 <ceil+0x42>
 8002bae:	a332      	add	r3, pc, #200	@ (adr r3, 8002c78 <ceil+0xe8>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fb0e 	bl	80001d4 <__adddf3>
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f7fd ff50 	bl	8000a60 <__aeabi_dcmpgt>
 8002bc0:	b120      	cbz	r0, 8002bcc <ceil+0x3c>
 8002bc2:	2c00      	cmp	r4, #0
 8002bc4:	db4f      	blt.n	8002c66 <ceil+0xd6>
 8002bc6:	4325      	orrs	r5, r4
 8002bc8:	d151      	bne.n	8002c6e <ceil+0xde>
 8002bca:	462c      	mov	r4, r5
 8002bcc:	4621      	mov	r1, r4
 8002bce:	4628      	mov	r0, r5
 8002bd0:	e023      	b.n	8002c1a <ceil+0x8a>
 8002bd2:	4f2b      	ldr	r7, [pc, #172]	@ (8002c80 <ceil+0xf0>)
 8002bd4:	4137      	asrs	r7, r6
 8002bd6:	ea01 0307 	and.w	r3, r1, r7
 8002bda:	4303      	orrs	r3, r0
 8002bdc:	d01d      	beq.n	8002c1a <ceil+0x8a>
 8002bde:	a326      	add	r3, pc, #152	@ (adr r3, 8002c78 <ceil+0xe8>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd faf6 	bl	80001d4 <__adddf3>
 8002be8:	2200      	movs	r2, #0
 8002bea:	2300      	movs	r3, #0
 8002bec:	f7fd ff38 	bl	8000a60 <__aeabi_dcmpgt>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d0eb      	beq.n	8002bcc <ceil+0x3c>
 8002bf4:	2c00      	cmp	r4, #0
 8002bf6:	bfc2      	ittt	gt
 8002bf8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8002bfc:	4133      	asrgt	r3, r6
 8002bfe:	18e4      	addgt	r4, r4, r3
 8002c00:	ea24 0407 	bic.w	r4, r4, r7
 8002c04:	2500      	movs	r5, #0
 8002c06:	e7e1      	b.n	8002bcc <ceil+0x3c>
 8002c08:	2e33      	cmp	r6, #51	@ 0x33
 8002c0a:	dd0a      	ble.n	8002c22 <ceil+0x92>
 8002c0c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8002c10:	d103      	bne.n	8002c1a <ceil+0x8a>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	f7fd fadd 	bl	80001d4 <__adddf3>
 8002c1a:	ec41 0b10 	vmov	d0, r0, r1
 8002c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c22:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8002c26:	f04f 37ff 	mov.w	r7, #4294967295
 8002c2a:	40df      	lsrs	r7, r3
 8002c2c:	4238      	tst	r0, r7
 8002c2e:	d0f4      	beq.n	8002c1a <ceil+0x8a>
 8002c30:	a311      	add	r3, pc, #68	@ (adr r3, 8002c78 <ceil+0xe8>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f7fd facd 	bl	80001d4 <__adddf3>
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f7fd ff0f 	bl	8000a60 <__aeabi_dcmpgt>
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d0c2      	beq.n	8002bcc <ceil+0x3c>
 8002c46:	2c00      	cmp	r4, #0
 8002c48:	dd0a      	ble.n	8002c60 <ceil+0xd0>
 8002c4a:	2e14      	cmp	r6, #20
 8002c4c:	d101      	bne.n	8002c52 <ceil+0xc2>
 8002c4e:	3401      	adds	r4, #1
 8002c50:	e006      	b.n	8002c60 <ceil+0xd0>
 8002c52:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8002c56:	2301      	movs	r3, #1
 8002c58:	40b3      	lsls	r3, r6
 8002c5a:	441d      	add	r5, r3
 8002c5c:	45a8      	cmp	r8, r5
 8002c5e:	d8f6      	bhi.n	8002c4e <ceil+0xbe>
 8002c60:	ea25 0507 	bic.w	r5, r5, r7
 8002c64:	e7b2      	b.n	8002bcc <ceil+0x3c>
 8002c66:	2500      	movs	r5, #0
 8002c68:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8002c6c:	e7ae      	b.n	8002bcc <ceil+0x3c>
 8002c6e:	4c05      	ldr	r4, [pc, #20]	@ (8002c84 <ceil+0xf4>)
 8002c70:	2500      	movs	r5, #0
 8002c72:	e7ab      	b.n	8002bcc <ceil+0x3c>
 8002c74:	f3af 8000 	nop.w
 8002c78:	8800759c 	.word	0x8800759c
 8002c7c:	7e37e43c 	.word	0x7e37e43c
 8002c80:	000fffff 	.word	0x000fffff
 8002c84:	3ff00000 	.word	0x3ff00000

08002c88 <_init>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr

08002c94 <_fini>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr
