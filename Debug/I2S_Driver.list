
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800194c  0800194c  0000294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a68  08001a68  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001a68  08001a68  00002a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a70  08001a70  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a70  08001a70  00002a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a74  08001a74  00002a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001a78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          000001a8  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006698  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a70  00000000  00000000  0000971c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  0000a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000112  00000000  00000000  0000a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1d2  00000000  00000000  0000a432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003304  00000000  00000000  00024604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f0ab  00000000  00000000  00027908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b69b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009b4  00000000  00000000  000b69f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000b73ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001934 	.word	0x08001934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001934 	.word	0x08001934

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <printConsole>:
	 serial.RX_Pin = USART1_RX_Pin.PA10;
	 USART_Init(&serial);
}

 void printConsole(char *msg, ...)
{
 8000280:	b40f      	push	{r0, r1, r2, r3}
 8000282:	b580      	push	{r7, lr}
 8000284:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 800028c:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000290:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000294:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000298:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 800029c:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800029e:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002a2:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	3b14      	subs	r3, #20
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 80002b2:	f101 0120 	add.w	r1, r1, #32
 80002b6:	6809      	ldr	r1, [r1, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 feb9 	bl	8001030 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 80002be:	2300      	movs	r3, #0
 80002c0:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80002c4:	f102 0214 	add.w	r2, r2, #20
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e020      	b.n	800030e <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 80002cc:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002d0:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 80002d4:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80002d8:	f103 0314 	add.w	r3, r3, #20
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <printConsole+0xc0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 80002e8:	bf00      	nop
 80002ea:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <printConsole+0xc0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 80002f8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80002fc:	f103 0314 	add.w	r3, r3, #20
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000308:	f102 0214 	add.w	r2, r2, #20
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	3b14      	subs	r3, #20
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff5b 	bl	80001d0 <strlen>
 800031a:	4603      	mov	r3, r0
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000322:	f103 0314 	add.w	r3, r3, #20
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d2cf      	bcs.n	80002cc <printConsole+0x4c>
	}
}
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr
 8000340:	20000070 	.word	0x20000070

08000344 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a25      	ldr	r2, [pc, #148]	@ (80003e4 <GPIO_Clock_Enable+0xa0>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000354:	4b24      	ldr	r3, [pc, #144]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000358:	4a23      	ldr	r2, [pc, #140]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000360:	e039      	b.n	80003d6 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a21      	ldr	r2, [pc, #132]	@ (80003ec <GPIO_Clock_Enable+0xa8>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 800036a:	4b1f      	ldr	r3, [pc, #124]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036e:	4a1e      	ldr	r2, [pc, #120]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	6313      	str	r3, [r2, #48]	@ 0x30
 8000376:	e02e      	b.n	80003d6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a1d      	ldr	r2, [pc, #116]	@ (80003f0 <GPIO_Clock_Enable+0xac>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8000380:	4b19      	ldr	r3, [pc, #100]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a18      	ldr	r2, [pc, #96]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
 800038c:	e023      	b.n	80003d6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a18      	ldr	r2, [pc, #96]	@ (80003f4 <GPIO_Clock_Enable+0xb0>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 800039c:	f043 0308 	orr.w	r3, r3, #8
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a2:	e018      	b.n	80003d6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a14      	ldr	r2, [pc, #80]	@ (80003f8 <GPIO_Clock_Enable+0xb4>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80003ac:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b0:	4a0d      	ldr	r2, [pc, #52]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80003b8:	e00d      	b.n	80003d6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a0f      	ldr	r2, [pc, #60]	@ (80003fc <GPIO_Clock_Enable+0xb8>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <GPIO_Clock_Enable+0xa4>)
 80003c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ce:	e002      	b.n	80003d6 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 80003d0:	f04f 33ff 	mov.w	r3, #4294967295
 80003d4:	e000      	b.n	80003d8 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 80003d6:	2301      	movs	r3, #1
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40020000 	.word	0x40020000
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020400 	.word	0x40020400
 80003f0:	40020800 	.word	0x40020800
 80003f4:	40020c00 	.word	0x40020c00
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40021c00 	.word	0x40021c00

08000400 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	4608      	mov	r0, r1
 800040a:	4611      	mov	r1, r2
 800040c:	461a      	mov	r2, r3
 800040e:	4603      	mov	r3, r0
 8000410:	70fb      	strb	r3, [r7, #3]
 8000412:	460b      	mov	r3, r1
 8000414:	70bb      	strb	r3, [r7, #2]
 8000416:	4613      	mov	r3, r2
 8000418:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ff92 	bl	8000344 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	78b9      	ldrb	r1, [r7, #2]
 8000426:	78fa      	ldrb	r2, [r7, #3]
 8000428:	0052      	lsls	r2, r2, #1
 800042a:	fa01 f202 	lsl.w	r2, r1, r2
 800042e:	431a      	orrs	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	7879      	ldrb	r1, [r7, #1]
 800043a:	78fa      	ldrb	r2, [r7, #3]
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	431a      	orrs	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	7c39      	ldrb	r1, [r7, #16]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	7d39      	ldrb	r1, [r7, #20]
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	2b07      	cmp	r3, #7
 8000472:	d80a      	bhi.n	800048a <GPIO_Pin_Init+0x8a>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	7e39      	ldrb	r1, [r7, #24]
 800047a:	78fa      	ldrb	r2, [r7, #3]
 800047c:	0092      	lsls	r2, r2, #2
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8000488:	e00a      	b.n	80004a0 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800048e:	7e39      	ldrb	r1, [r7, #24]
 8000490:	78fa      	ldrb	r2, [r7, #3]
 8000492:	3a08      	subs	r2, #8
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	fa01 f202 	lsl.w	r2, r1, r2
 800049a:	431a      	orrs	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <SCK_PIN_INIT2>:
DMA_Config I2S3_DMA_FD;
DMA_Config I2S2_DMA_HD;
DMA_Config I2S3_DMA_HD;

static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af04      	add	r7, sp, #16
 80004ae:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	7c1b      	ldrb	r3, [r3, #16]
 80004b4:	22d2      	movs	r2, #210	@ 0xd2
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d10e      	bne.n	80004d8 <SCK_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80004ba:	2002      	movs	r0, #2
 80004bc:	2400      	movs	r4, #0
 80004be:	2303      	movs	r3, #3
 80004c0:	2200      	movs	r2, #0
 80004c2:	2105      	movs	r1, #5
 80004c4:	9102      	str	r1, [sp, #8]
 80004c6:	9201      	str	r2, [sp, #4]
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	4623      	mov	r3, r4
 80004cc:	4602      	mov	r2, r0
 80004ce:	210a      	movs	r1, #10
 80004d0:	4811      	ldr	r0, [pc, #68]	@ (8000518 <SCK_PIN_INIT2+0x70>)
 80004d2:	f7ff ff95 	bl	8000400 <GPIO_Pin_Init>
 80004d6:	e019      	b.n	800050c <SCK_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	7c1b      	ldrb	r3, [r3, #16]
 80004dc:	22d5      	movs	r2, #213	@ 0xd5
 80004de:	4293      	cmp	r3, r2
 80004e0:	d10e      	bne.n	8000500 <SCK_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80004e2:	2002      	movs	r0, #2
 80004e4:	2400      	movs	r4, #0
 80004e6:	2303      	movs	r3, #3
 80004e8:	2200      	movs	r2, #0
 80004ea:	2105      	movs	r1, #5
 80004ec:	9102      	str	r1, [sp, #8]
 80004ee:	9201      	str	r2, [sp, #4]
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	4623      	mov	r3, r4
 80004f4:	4602      	mov	r2, r0
 80004f6:	210d      	movs	r1, #13
 80004f8:	4807      	ldr	r0, [pc, #28]	@ (8000518 <SCK_PIN_INIT2+0x70>)
 80004fa:	f7ff ff81 	bl	8000400 <GPIO_Pin_Init>
 80004fe:	e005      	b.n	800050c <SCK_PIN_INIT2+0x64>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2201      	movs	r2, #1
 8000504:	77da      	strb	r2, [r3, #31]
		return -1;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	e000      	b.n	800050e <SCK_PIN_INIT2+0x66>
	}
	return 1;
 800050c:	2301      	movs	r3, #1
}
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	bf00      	nop
 8000518:	40020400 	.word	0x40020400

0800051c <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b087      	sub	sp, #28
 8000520:	af04      	add	r7, sp, #16
 8000522:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	7c9b      	ldrb	r3, [r3, #18]
 8000528:	22d1      	movs	r2, #209	@ 0xd1
 800052a:	4293      	cmp	r3, r2
 800052c:	d10e      	bne.n	800054c <WS_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800052e:	2002      	movs	r0, #2
 8000530:	2400      	movs	r4, #0
 8000532:	2303      	movs	r3, #3
 8000534:	2200      	movs	r2, #0
 8000536:	2105      	movs	r1, #5
 8000538:	9102      	str	r1, [sp, #8]
 800053a:	9201      	str	r2, [sp, #4]
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	4623      	mov	r3, r4
 8000540:	4602      	mov	r2, r0
 8000542:	2109      	movs	r1, #9
 8000544:	4811      	ldr	r0, [pc, #68]	@ (800058c <WS_PIN_INIT2+0x70>)
 8000546:	f7ff ff5b 	bl	8000400 <GPIO_Pin_Init>
 800054a:	e019      	b.n	8000580 <WS_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7c9b      	ldrb	r3, [r3, #18]
 8000550:	22d4      	movs	r2, #212	@ 0xd4
 8000552:	4293      	cmp	r3, r2
 8000554:	d10e      	bne.n	8000574 <WS_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000556:	2002      	movs	r0, #2
 8000558:	2400      	movs	r4, #0
 800055a:	2303      	movs	r3, #3
 800055c:	2200      	movs	r2, #0
 800055e:	2105      	movs	r1, #5
 8000560:	9102      	str	r1, [sp, #8]
 8000562:	9201      	str	r2, [sp, #4]
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	4623      	mov	r3, r4
 8000568:	4602      	mov	r2, r0
 800056a:	210c      	movs	r1, #12
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <WS_PIN_INIT2+0x70>)
 800056e:	f7ff ff47 	bl	8000400 <GPIO_Pin_Init>
 8000572:	e005      	b.n	8000580 <WS_PIN_INIT2+0x64>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2201      	movs	r2, #1
 8000578:	779a      	strb	r2, [r3, #30]
		return -1;
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	e000      	b.n	8000582 <WS_PIN_INIT2+0x66>
	}
	return 1;
 8000580:	2301      	movs	r3, #1
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
 800058a:	bf00      	nop
 800058c:	40020400 	.word	0x40020400

08000590 <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b087      	sub	sp, #28
 8000594:	af04      	add	r7, sp, #16
 8000596:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7c5b      	ldrb	r3, [r3, #17]
 800059c:	22d5      	movs	r2, #213	@ 0xd5
 800059e:	4293      	cmp	r3, r2
 80005a0:	d10e      	bne.n	80005c0 <SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80005a2:	2002      	movs	r0, #2
 80005a4:	2400      	movs	r4, #0
 80005a6:	2303      	movs	r3, #3
 80005a8:	2200      	movs	r2, #0
 80005aa:	2105      	movs	r1, #5
 80005ac:	9102      	str	r1, [sp, #8]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	4623      	mov	r3, r4
 80005b4:	4602      	mov	r2, r0
 80005b6:	210f      	movs	r1, #15
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <SD_PIN_Init2+0x70>)
 80005ba:	f7ff ff21 	bl	8000400 <GPIO_Pin_Init>
 80005be:	e019      	b.n	80005f4 <SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7c5b      	ldrb	r3, [r3, #17]
 80005c4:	22df      	movs	r2, #223	@ 0xdf
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10e      	bne.n	80005e8 <SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80005ca:	2002      	movs	r0, #2
 80005cc:	2400      	movs	r4, #0
 80005ce:	2303      	movs	r3, #3
 80005d0:	2200      	movs	r2, #0
 80005d2:	2105      	movs	r1, #5
 80005d4:	9102      	str	r1, [sp, #8]
 80005d6:	9201      	str	r2, [sp, #4]
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	4623      	mov	r3, r4
 80005dc:	4602      	mov	r2, r0
 80005de:	2103      	movs	r1, #3
 80005e0:	4808      	ldr	r0, [pc, #32]	@ (8000604 <SD_PIN_Init2+0x74>)
 80005e2:	f7ff ff0d 	bl	8000400 <GPIO_Pin_Init>
 80005e6:	e005      	b.n	80005f4 <SD_PIN_Init2+0x64>
	}
	else{
		config->Error.SD_Pin_Error = true;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	775a      	strb	r2, [r3, #29]
		return -1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	e000      	b.n	80005f6 <SD_PIN_Init2+0x66>
	}
	return 1;
 80005f4:	2301      	movs	r3, #1
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	40020800 	.word	0x40020800

08000608 <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b087      	sub	sp, #28
 800060c:	af04      	add	r7, sp, #16
 800060e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7bdb      	ldrb	r3, [r3, #15]
 8000614:	22ff      	movs	r2, #255	@ 0xff
 8000616:	4293      	cmp	r3, r2
 8000618:	d01a      	beq.n	8000650 <MCK_PIN_Init2+0x48>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7bdb      	ldrb	r3, [r3, #15]
 800061e:	2225      	movs	r2, #37	@ 0x25
 8000620:	4293      	cmp	r3, r2
 8000622:	d10e      	bne.n	8000642 <MCK_PIN_Init2+0x3a>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000624:	2002      	movs	r0, #2
 8000626:	2400      	movs	r4, #0
 8000628:	2303      	movs	r3, #3
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	9102      	str	r1, [sp, #8]
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4623      	mov	r3, r4
 8000636:	4602      	mov	r2, r0
 8000638:	2107      	movs	r1, #7
 800063a:	4808      	ldr	r0, [pc, #32]	@ (800065c <MCK_PIN_Init2+0x54>)
 800063c:	f7ff fee0 	bl	8000400 <GPIO_Pin_Init>
 8000640:	e006      	b.n	8000650 <MCK_PIN_Init2+0x48>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	e000      	b.n	8000652 <MCK_PIN_Init2+0x4a>
		}
	}
	return 1;
 8000650:	2301      	movs	r3, #1
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	bf00      	nop
 800065c:	40020800 	.word	0x40020800

08000660 <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b087      	sub	sp, #28
 8000664:	af04      	add	r7, sp, #16
 8000666:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7cdb      	ldrb	r3, [r3, #19]
 800066c:	22d6      	movs	r2, #214	@ 0xd6
 800066e:	4293      	cmp	r3, r2
 8000670:	d10e      	bne.n	8000690 <EXT_SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000672:	2002      	movs	r0, #2
 8000674:	2400      	movs	r4, #0
 8000676:	2303      	movs	r3, #3
 8000678:	2200      	movs	r2, #0
 800067a:	2105      	movs	r1, #5
 800067c:	9102      	str	r1, [sp, #8]
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	4623      	mov	r3, r4
 8000684:	4602      	mov	r2, r0
 8000686:	210e      	movs	r1, #14
 8000688:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <EXT_SD_PIN_Init2+0x70>)
 800068a:	f7ff feb9 	bl	8000400 <GPIO_Pin_Init>
 800068e:	e019      	b.n	80006c4 <EXT_SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	7cdb      	ldrb	r3, [r3, #19]
 8000694:	22ca      	movs	r2, #202	@ 0xca
 8000696:	4293      	cmp	r3, r2
 8000698:	d10e      	bne.n	80006b8 <EXT_SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800069a:	2002      	movs	r0, #2
 800069c:	2400      	movs	r4, #0
 800069e:	2303      	movs	r3, #3
 80006a0:	2200      	movs	r2, #0
 80006a2:	2105      	movs	r1, #5
 80006a4:	9102      	str	r1, [sp, #8]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4623      	mov	r3, r4
 80006ac:	4602      	mov	r2, r0
 80006ae:	2102      	movs	r1, #2
 80006b0:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <EXT_SD_PIN_Init2+0x74>)
 80006b2:	f7ff fea5 	bl	8000400 <GPIO_Pin_Init>
 80006b6:	e005      	b.n	80006c4 <EXT_SD_PIN_Init2+0x64>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	771a      	strb	r2, [r3, #28]
		return -1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	e000      	b.n	80006c6 <EXT_SD_PIN_Init2+0x66>
	}
	return 1;
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800

080006d8 <I2S_Init>:



int8_t I2S_Init(I2S_Config *config)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a90      	ldr	r2, [pc, #576]	@ (8000928 <I2S_Init+0x250>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d119      	bne.n	800071e <I2S_Init+0x46>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80006ea:	4b90      	ldr	r3, [pc, #576]	@ (800092c <I2S_Init+0x254>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	4a8f      	ldr	r2, [pc, #572]	@ (800092c <I2S_Init+0x254>)
 80006f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f4:	6413      	str	r3, [r2, #64]	@ 0x40

		SD_PIN_Init2(config);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff4a 	bl	8000590 <SD_PIN_Init2>
		WS_PIN_INIT2(config);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff0d 	bl	800051c <WS_PIN_INIT2>
		SCK_PIN_INIT2(config);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff fed0 	bl	80004a8 <SCK_PIN_INIT2>
		MCK_PIN_Init2(config);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff7d 	bl	8000608 <MCK_PIN_Init2>
		if(config->Full_Duplex.Enable == true){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7b5b      	ldrb	r3, [r3, #13]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d012      	beq.n	800073c <I2S_Init+0x64>
			EXT_SD_PIN_Init2(config);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ffa2 	bl	8000660 <EXT_SD_PIN_Init2>
 800071c:	e00e      	b.n	800073c <I2S_Init+0x64>

		}



	}else if(config->Port == I2S_Port.I2S3)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a83      	ldr	r2, [pc, #524]	@ (8000930 <I2S_Init+0x258>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <I2S_Init+0x5e>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000728:	4b80      	ldr	r3, [pc, #512]	@ (800092c <I2S_Init+0x254>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a7f      	ldr	r2, [pc, #508]	@ (800092c <I2S_Init+0x254>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	e002      	b.n	800073c <I2S_Init+0x64>

	}else{

		config->Error.Port_Error = true;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	769a      	strb	r2, [r3, #26]

	}



	config->Port->I2SCFGR |= 1 << 11;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	69da      	ldr	r2, [r3, #28]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800074a:	61da      	str	r2, [r3, #28]


	// I2S Mode
	if(config->Full_Duplex.mode == I2S_Mode.Master.Transmit){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7b9b      	ldrb	r3, [r3, #14]
 8000750:	2201      	movs	r2, #1
 8000752:	4293      	cmp	r3, r2
 8000754:	d108      	bne.n	8000768 <I2S_Init+0x90>
		config->Port->I2SCFGR |= 2 << 8;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	69da      	ldr	r2, [r3, #28]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000764:	61da      	str	r2, [r3, #28]
 8000766:	e028      	b.n	80007ba <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Master.Receive){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7b9b      	ldrb	r3, [r3, #14]
 800076c:	2202      	movs	r2, #2
 800076e:	4293      	cmp	r3, r2
 8000770:	d108      	bne.n	8000784 <I2S_Init+0xac>
		config->Port->I2SCFGR |= 3 << 8;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	69da      	ldr	r2, [r3, #28]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8000780:	61da      	str	r2, [r3, #28]
 8000782:	e01a      	b.n	80007ba <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Transmit){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7b9b      	ldrb	r3, [r3, #14]
 8000788:	2203      	movs	r2, #3
 800078a:	4293      	cmp	r3, r2
 800078c:	d108      	bne.n	80007a0 <I2S_Init+0xc8>
		config->Port->I2SCFGR &= ~(3 << 8);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	69da      	ldr	r2, [r3, #28]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800079c:	61da      	str	r2, [r3, #28]
 800079e:	e00c      	b.n	80007ba <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Receive){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7b9b      	ldrb	r3, [r3, #14]
 80007a4:	2204      	movs	r2, #4
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d107      	bne.n	80007ba <I2S_Init+0xe2>
		config->Port->I2SCFGR |= (1 << 8);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	69da      	ldr	r2, [r3, #28]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80007b8:	61da      	str	r2, [r3, #28]
	}

	// Standard
	if(config->Standard == I2S_Standard.Standard_Philips){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7a5b      	ldrb	r3, [r3, #9]
 80007be:	461a      	mov	r2, r3
 80007c0:	2301      	movs	r3, #1
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d108      	bne.n	80007d8 <I2S_Init+0x100>
		config->Port->I2SCFGR &= ~(3 << 4);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80007d4:	61da      	str	r2, [r3, #28]
 80007d6:	e030      	b.n	800083a <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	461a      	mov	r2, r3
 80007de:	2302      	movs	r3, #2
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d108      	bne.n	80007f6 <I2S_Init+0x11e>
		config->Port->I2SCFGR |= (1 << 4);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	69da      	ldr	r2, [r3, #28]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f042 0210 	orr.w	r2, r2, #16
 80007f2:	61da      	str	r2, [r3, #28]
 80007f4:	e021      	b.n	800083a <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7a5b      	ldrb	r3, [r3, #9]
 80007fa:	461a      	mov	r2, r3
 80007fc:	2303      	movs	r3, #3
 80007fe:	429a      	cmp	r2, r3
 8000800:	d108      	bne.n	8000814 <I2S_Init+0x13c>
		config->Port->I2SCFGR |= (2 << 4);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	69da      	ldr	r2, [r3, #28]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f042 0220 	orr.w	r2, r2, #32
 8000810:	61da      	str	r2, [r3, #28]
 8000812:	e012      	b.n	800083a <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.PCM){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a5b      	ldrb	r3, [r3, #9]
 8000818:	461a      	mov	r2, r3
 800081a:	2304      	movs	r3, #4
 800081c:	429a      	cmp	r2, r3
 800081e:	d108      	bne.n	8000832 <I2S_Init+0x15a>
		config->Port->I2SCFGR |= (3 << 4);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	69da      	ldr	r2, [r3, #28]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800082e:	61da      	str	r2, [r3, #28]
 8000830:	e003      	b.n	800083a <I2S_Init+0x162>
	}else{
		config->Error.Standard_Error  = true;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2201      	movs	r2, #1
 8000836:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}

	if(config->Data_Length == I2S_Data_Length._16_bit){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7a9b      	ldrb	r3, [r3, #10]
 800083e:	461a      	mov	r2, r3
 8000840:	2301      	movs	r3, #1
 8000842:	429a      	cmp	r2, r3
 8000844:	d108      	bne.n	8000858 <I2S_Init+0x180>
		config->Port->I2SCFGR &= ~(3<<1);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	69da      	ldr	r2, [r3, #28]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0206 	bic.w	r2, r2, #6
 8000854:	61da      	str	r2, [r3, #28]
 8000856:	e01d      	b.n	8000894 <I2S_Init+0x1bc>
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7a9b      	ldrb	r3, [r3, #10]
 800085c:	461a      	mov	r2, r3
 800085e:	2302      	movs	r3, #2
 8000860:	429a      	cmp	r2, r3
 8000862:	d106      	bne.n	8000872 <I2S_Init+0x19a>
		config->Port->I2SCFGR |= (1<1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	69d2      	ldr	r2, [r2, #28]
 800086e:	61da      	str	r2, [r3, #28]
 8000870:	e010      	b.n	8000894 <I2S_Init+0x1bc>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7a9b      	ldrb	r3, [r3, #10]
 8000876:	461a      	mov	r2, r3
 8000878:	2303      	movs	r3, #3
 800087a:	429a      	cmp	r2, r3
 800087c:	d106      	bne.n	800088c <I2S_Init+0x1b4>
		config->Port->I2SCFGR |= (2<1);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	69d2      	ldr	r2, [r2, #28]
 8000888:	61da      	str	r2, [r3, #28]
 800088a:	e003      	b.n	8000894 <I2S_Init+0x1bc>
	}else{
		config->Error.Data_Len_Error = true;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2201      	movs	r2, #1
 8000890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7adb      	ldrb	r3, [r3, #11]
 8000898:	461a      	mov	r2, r3
 800089a:	2301      	movs	r3, #1
 800089c:	429a      	cmp	r2, r3
 800089e:	d108      	bne.n	80008b2 <I2S_Init+0x1da>
		config->Port->I2SCFGR &= ~(1<<0);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	69da      	ldr	r2, [r3, #28]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f022 0201 	bic.w	r2, r2, #1
 80008ae:	61da      	str	r2, [r3, #28]
 80008b0:	e00e      	b.n	80008d0 <I2S_Init+0x1f8>
	}else if(config->Channel_Length == I2S_Channel_Length._16_bit){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7adb      	ldrb	r3, [r3, #11]
 80008b6:	461a      	mov	r2, r3
 80008b8:	2301      	movs	r3, #1
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d104      	bne.n	80008c8 <I2S_Init+0x1f0>
		config->Port->I2SCFGR =  (1<<0);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	61da      	str	r2, [r3, #28]
 80008c6:	e003      	b.n	80008d0 <I2S_Init+0x1f8>
	}else{
		config->Error.Channel_Length_Error = true;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}


	int plli2s_n = 128;
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	60fb      	str	r3, [r7, #12]
	int plli2s_r = 5;
 80008d4:	2305      	movs	r3, #5
 80008d6:	60bb      	str	r3, [r7, #8]
	if(config->Audio_Frequency == I2S_Audio_Frequency._8000KHz)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7b1b      	ldrb	r3, [r3, #12]
 80008dc:	2201      	movs	r2, #1
 80008de:	4293      	cmp	r3, r2
 80008e0:	d128      	bne.n	8000934 <I2S_Init+0x25c>
	{
		//
		  plli2s_n = 64;
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 80008e6:	2305      	movs	r3, #5
 80008e8:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	019a      	lsls	r2, r3, #6
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	071b      	lsls	r3, r3, #28
 80008f2:	431a      	orrs	r2, r3
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <I2S_Init+0x254>)
 80008f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <I2S_Init+0x254>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <I2S_Init+0x254>)
 8000900:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000904:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000906:	bf00      	nop
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <I2S_Init+0x254>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f9      	beq.n	8000908 <I2S_Init+0x230>
		config->Port->I2SPR |= 50;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6a1a      	ldr	r2, [r3, #32]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8000922:	621a      	str	r2, [r3, #32]
 8000924:	e0e3      	b.n	8000aee <I2S_Init+0x416>
 8000926:	bf00      	nop
 8000928:	40003800 	.word	0x40003800
 800092c:	40023800 	.word	0x40023800
 8000930:	40003c00 	.word	0x40003c00
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._16000Hz)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7b1b      	ldrb	r3, [r3, #12]
 8000938:	2202      	movs	r2, #2
 800093a:	4293      	cmp	r3, r2
 800093c:	d121      	bne.n	8000982 <I2S_Init+0x2aa>
	{
		//
		  plli2s_n = 128;
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000942:	2305      	movs	r3, #5
 8000944:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	019a      	lsls	r2, r3, #6
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	071b      	lsls	r3, r3, #28
 800094e:	431a      	orrs	r2, r3
 8000950:	4b6d      	ldr	r3, [pc, #436]	@ (8000b08 <I2S_Init+0x430>)
 8000952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000956:	4b6c      	ldr	r3, [pc, #432]	@ (8000b08 <I2S_Init+0x430>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a6b      	ldr	r2, [pc, #428]	@ (8000b08 <I2S_Init+0x430>)
 800095c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000960:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000962:	bf00      	nop
 8000964:	4b68      	ldr	r3, [pc, #416]	@ (8000b08 <I2S_Init+0x430>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f9      	beq.n	8000964 <I2S_Init+0x28c>
		config->Port->I2SPR |= 50;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6a1a      	ldr	r2, [r3, #32]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 800097e:	621a      	str	r2, [r3, #32]
 8000980:	e0b5      	b.n	8000aee <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._22050Hz)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7b1b      	ldrb	r3, [r3, #12]
 8000986:	2203      	movs	r2, #3
 8000988:	4293      	cmp	r3, r2
 800098a:	f000 80b0 	beq.w	8000aee <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._32000Hz)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7b1b      	ldrb	r3, [r3, #12]
 8000992:	2204      	movs	r2, #4
 8000994:	4293      	cmp	r3, r2
 8000996:	d121      	bne.n	80009dc <I2S_Init+0x304>
	{
		//
		  plli2s_n = 64;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 800099c:	2305      	movs	r3, #5
 800099e:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	019a      	lsls	r2, r3, #6
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	071b      	lsls	r3, r3, #28
 80009a8:	431a      	orrs	r2, r3
 80009aa:	4b57      	ldr	r3, [pc, #348]	@ (8000b08 <I2S_Init+0x430>)
 80009ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80009b0:	4b55      	ldr	r3, [pc, #340]	@ (8000b08 <I2S_Init+0x430>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a54      	ldr	r2, [pc, #336]	@ (8000b08 <I2S_Init+0x430>)
 80009b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009ba:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80009bc:	bf00      	nop
 80009be:	4b52      	ldr	r3, [pc, #328]	@ (8000b08 <I2S_Init+0x430>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f9      	beq.n	80009be <I2S_Init+0x2e6>
		config->Port->I2SPR |= 12;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6a1a      	ldr	r2, [r3, #32]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f042 020c 	orr.w	r2, r2, #12
 80009d8:	621a      	str	r2, [r3, #32]
 80009da:	e088      	b.n	8000aee <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._44100Hz)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7b1b      	ldrb	r3, [r3, #12]
 80009e0:	2205      	movs	r2, #5
 80009e2:	4293      	cmp	r3, r2
 80009e4:	f000 8083 	beq.w	8000aee <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._48000Hz)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7b1b      	ldrb	r3, [r3, #12]
 80009ec:	2206      	movs	r2, #6
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d121      	bne.n	8000a36 <I2S_Init+0x35e>
	{
		//
		  plli2s_n = 96;
 80009f2:	2360      	movs	r3, #96	@ 0x60
 80009f4:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 80009f6:	2305      	movs	r3, #5
 80009f8:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	019a      	lsls	r2, r3, #6
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	071b      	lsls	r3, r3, #28
 8000a02:	431a      	orrs	r2, r3
 8000a04:	4b40      	ldr	r3, [pc, #256]	@ (8000b08 <I2S_Init+0x430>)
 8000a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b08 <I2S_Init+0x430>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b08 <I2S_Init+0x430>)
 8000a10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a14:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000a16:	bf00      	nop
 8000a18:	4b3b      	ldr	r3, [pc, #236]	@ (8000b08 <I2S_Init+0x430>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f9      	beq.n	8000a18 <I2S_Init+0x340>
		config->Port->I2SPR |= 12;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6a1a      	ldr	r2, [r3, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 020c 	orr.w	r2, r2, #12
 8000a32:	621a      	str	r2, [r3, #32]
 8000a34:	e05b      	b.n	8000aee <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._64000Hz)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b1b      	ldrb	r3, [r3, #12]
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d121      	bne.n	8000a84 <I2S_Init+0x3ac>
	{
		//
		  plli2s_n = 128;
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000a44:	2305      	movs	r3, #5
 8000a46:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	019a      	lsls	r2, r3, #6
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	071b      	lsls	r3, r3, #28
 8000a50:	431a      	orrs	r2, r3
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <I2S_Init+0x430>)
 8000a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000a58:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <I2S_Init+0x430>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b08 <I2S_Init+0x430>)
 8000a5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a62:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000a64:	bf00      	nop
 8000a66:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <I2S_Init+0x430>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f9      	beq.n	8000a66 <I2S_Init+0x38e>
		config->Port->I2SPR |= 12;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6a1a      	ldr	r2, [r3, #32]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f042 020c 	orr.w	r2, r2, #12
 8000a80:	621a      	str	r2, [r3, #32]
 8000a82:	e034      	b.n	8000aee <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._96000Hz)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7b1b      	ldrb	r3, [r3, #12]
 8000a88:	2208      	movs	r2, #8
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d121      	bne.n	8000ad2 <I2S_Init+0x3fa>
	{
		//
		  plli2s_n = 192;
 8000a8e:	23c0      	movs	r3, #192	@ 0xc0
 8000a90:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000a92:	2305      	movs	r3, #5
 8000a94:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	019a      	lsls	r2, r3, #6
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	071b      	lsls	r3, r3, #28
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <I2S_Init+0x430>)
 8000aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <I2S_Init+0x430>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <I2S_Init+0x430>)
 8000aac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ab0:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000ab2:	bf00      	nop
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <I2S_Init+0x430>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <I2S_Init+0x3dc>
		config->Port->I2SPR |= 12;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6a1a      	ldr	r2, [r3, #32]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f042 020c 	orr.w	r2, r2, #12
 8000ace:	621a      	str	r2, [r3, #32]
 8000ad0:	e00d      	b.n	8000aee <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._192000Hz)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7b1b      	ldrb	r3, [r3, #12]
 8000ad6:	2209      	movs	r2, #9
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d008      	beq.n	8000aee <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._384000Hz)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7b1b      	ldrb	r3, [r3, #12]
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d003      	beq.n	8000aee <I2S_Init+0x416>
	{
		//
	}else
	{
		config->Error.Audio_Frequency_Error = true;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	//  I2S Enable
	config->Port->I2SCFGR |= 1 << 10;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	69da      	ldr	r2, [r3, #28]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000afc:	61da      	str	r2, [r3, #28]

	return 1;
 8000afe:	2301      	movs	r3, #1

}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <I2S_Print_Errors>:


void I2S_Print_Errors(I2S_Config *config)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(config->Error.Audio_Frequency_Error) printConsole("Audio_Frequency_Error \r\n");
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <I2S_Print_Errors+0x18>
 8000b1e:	4828      	ldr	r0, [pc, #160]	@ (8000bc0 <I2S_Print_Errors+0xb4>)
 8000b20:	f7ff fbae 	bl	8000280 <printConsole>
	if(config->Error.Channel_Length_Error) printConsole("Channel_Length_Error \r\n");
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <I2S_Print_Errors+0x28>
 8000b2e:	4825      	ldr	r0, [pc, #148]	@ (8000bc4 <I2S_Print_Errors+0xb8>)
 8000b30:	f7ff fba6 	bl	8000280 <printConsole>
	if(config->Error.Data_Len_Error) printConsole("Data_Len_Error \r\n");
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <I2S_Print_Errors+0x38>
 8000b3e:	4822      	ldr	r0, [pc, #136]	@ (8000bc8 <I2S_Print_Errors+0xbc>)
 8000b40:	f7ff fb9e 	bl	8000280 <printConsole>
	if(config->Error.Ext_SD_Pin_Error) printConsole("Ext_SD_Pin_Error \r\n");
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7f1b      	ldrb	r3, [r3, #28]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <I2S_Print_Errors+0x46>
 8000b4c:	481f      	ldr	r0, [pc, #124]	@ (8000bcc <I2S_Print_Errors+0xc0>)
 8000b4e:	f7ff fb97 	bl	8000280 <printConsole>
	if(config->Error.MCK_PIN_Error) printConsole("MCK_PIN_Error \r\n");
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <I2S_Print_Errors+0x56>
 8000b5c:	481c      	ldr	r0, [pc, #112]	@ (8000bd0 <I2S_Print_Errors+0xc4>)
 8000b5e:	f7ff fb8f 	bl	8000280 <printConsole>
	if(config->Error.Mode_Error) printConsole("Mode_Error \r\n");
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7edb      	ldrb	r3, [r3, #27]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <I2S_Print_Errors+0x64>
 8000b6a:	481a      	ldr	r0, [pc, #104]	@ (8000bd4 <I2S_Print_Errors+0xc8>)
 8000b6c:	f7ff fb88 	bl	8000280 <printConsole>
	if(config->Error.Port_Error) printConsole("Port_Error \r\n");
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e9b      	ldrb	r3, [r3, #26]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <I2S_Print_Errors+0x72>
 8000b78:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <I2S_Print_Errors+0xcc>)
 8000b7a:	f7ff fb81 	bl	8000280 <printConsole>
	if(config->Error.SCK_Pin_Error) printConsole("SCK_Pin_Error \r\n");
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7fdb      	ldrb	r3, [r3, #31]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <I2S_Print_Errors+0x80>
 8000b86:	4815      	ldr	r0, [pc, #84]	@ (8000bdc <I2S_Print_Errors+0xd0>)
 8000b88:	f7ff fb7a 	bl	8000280 <printConsole>
	if(config->Error.SD_Pin_Error) printConsole("SD_Pin_Error \r\n");
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7f5b      	ldrb	r3, [r3, #29]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <I2S_Print_Errors+0x8e>
 8000b94:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <I2S_Print_Errors+0xd4>)
 8000b96:	f7ff fb73 	bl	8000280 <printConsole>
	if(config->Error.Standard_Error) printConsole("Standard_Error \r\n");
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <I2S_Print_Errors+0x9e>
 8000ba4:	480f      	ldr	r0, [pc, #60]	@ (8000be4 <I2S_Print_Errors+0xd8>)
 8000ba6:	f7ff fb6b 	bl	8000280 <printConsole>
	if(config->Error.WS_Pin_Error) printConsole("WS_Pin_Error \r\n");
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7f9b      	ldrb	r3, [r3, #30]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <I2S_Print_Errors+0xac>
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <I2S_Print_Errors+0xdc>)
 8000bb4:	f7ff fb64 	bl	8000280 <printConsole>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	0800194c 	.word	0x0800194c
 8000bc4:	08001968 	.word	0x08001968
 8000bc8:	08001980 	.word	0x08001980
 8000bcc:	08001994 	.word	0x08001994
 8000bd0:	080019a8 	.word	0x080019a8
 8000bd4:	080019bc 	.word	0x080019bc
 8000bd8:	080019cc 	.word	0x080019cc
 8000bdc:	080019dc 	.word	0x080019dc
 8000be0:	080019f0 	.word	0x080019f0
 8000be4:	08001a00 	.word	0x08001a00
 8000be8:	08001a14 	.word	0x08001a14

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ffc2 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8000c8e:	23a8      	movs	r3, #168	@ 0xa8
 8000c90:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8000c96:	2307      	movs	r3, #7
 8000c98:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8000cac:	bf00      	nop
 8000cae:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8000cba:	4b35      	ldr	r3, [pc, #212]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a34      	ldr	r2, [pc, #208]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8000cc6:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <MCU_Clock_Setup+0x110>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a32      	ldr	r2, [pc, #200]	@ (8000d94 <MCU_Clock_Setup+0x110>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd0:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <MCU_Clock_Setup+0x114>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a30      	ldr	r2, [pc, #192]	@ (8000d98 <MCU_Clock_Setup+0x114>)
 8000cd8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000cdc:	f043 0305 	orr.w	r3, r3, #5
 8000ce0:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	793a      	ldrb	r2, [r7, #4]
 8000ce8:	0611      	lsls	r1, r2, #24
 8000cea:	797a      	ldrb	r2, [r7, #5]
 8000cec:	0412      	lsls	r2, r2, #16
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	79ba      	ldrb	r2, [r7, #6]
 8000cf2:	0192      	lsls	r2, r2, #6
 8000cf4:	4311      	orrs	r1, r2
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4a24      	ldr	r2, [pc, #144]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8000d02:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	4a22      	ldr	r2, [pc, #136]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d0c:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d10:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d1c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000d20:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4a1a      	ldr	r2, [pc, #104]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d2c:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d38:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000d3a:	bf00      	nop
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f9      	beq.n	8000d3c <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000d54:	bf00      	nop
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d1f9      	bne.n	8000d56 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8000d62:	f000 f8a5 	bl	8000eb0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <MCU_Clock_Setup+0x118>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000da0 <MCU_Clock_Setup+0x11c>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff63 	bl	8000c40 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <MCU_Clock_Setup+0x10c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000
 8000d98:	40023c00 	.word	0x40023c00
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	18618619 	.word	0x18618619

08000da4 <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8000da8:	f7ff ff6c 	bl	8000c84 <MCU_Clock_Setup>


	INMP441_I2S.Port = I2S_Port.I2S2;
 8000dac:	4a19      	ldr	r2, [pc, #100]	@ (8000e14 <main+0x70>)
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <main+0x74>)
 8000db0:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 8000db2:	2206      	movs	r2, #6
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <main+0x74>)
 8000db6:	731a      	strb	r2, [r3, #12]
	INMP441_I2S.Channel_Length = I2S_Channel_Length._16_bit;
 8000db8:	2301      	movs	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <main+0x74>)
 8000dbe:	72da      	strb	r2, [r3, #11]
	INMP441_I2S.Data_Length = I2S_Data_Length._16_bit;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <main+0x74>)
 8000dc6:	729a      	strb	r2, [r3, #10]
	INMP441_I2S.LR_Pin_Port = GPIOB;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <main+0x74>)
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <main+0x78>)
 8000dcc:	605a      	str	r2, [r3, #4]
	INMP441_I2S.LR_Pin_Number = 12;
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <main+0x74>)
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	721a      	strb	r2, [r3, #8]
	INMP441_I2S.Standard = I2S_Standard.Standard_Philips;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <main+0x74>)
 8000dda:	725a      	strb	r2, [r3, #9]
	INMP441_I2S.Half_Duplex.Enable = true;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <main+0x74>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	751a      	strb	r2, [r3, #20]
	INMP441_I2S.Half_Duplex.mode = I2S_Mode.Master.Receive;
 8000de2:	2202      	movs	r2, #2
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <main+0x74>)
 8000de6:	755a      	strb	r2, [r3, #21]
	INMP441_I2S.Half_Duplex.WS_Pin = I2S_Pin.WS.I2S2.PB09;
 8000de8:	22d1      	movs	r2, #209	@ 0xd1
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <main+0x74>)
 8000dec:	765a      	strb	r2, [r3, #25]
	INMP441_I2S.Half_Duplex.SD_Pin = I2S_Pin.SD.I2S2.PB15;
 8000dee:	22d5      	movs	r2, #213	@ 0xd5
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <main+0x74>)
 8000df2:	761a      	strb	r2, [r3, #24]
	INMP441_I2S.Half_Duplex.SCK_Pin = I2S_Pin.SCK.I2S2.PB13;
 8000df4:	22d5      	movs	r2, #213	@ 0xd5
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <main+0x74>)
 8000df8:	75da      	strb	r2, [r3, #23]

	if(I2S_Init(&INMP441_I2S)) I2S_Print_Errors(&INMP441_I2S);
 8000dfa:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <main+0x74>)
 8000dfc:	f7ff fc6c 	bl	80006d8 <I2S_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <main+0x6a>
 8000e06:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <main+0x74>)
 8000e08:	f7ff fe80 	bl	8000b0c <I2S_Print_Errors>




	for(;;)
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	e7fd      	b.n	8000e0e <main+0x6a>
 8000e12:	bf00      	nop
 8000e14:	40003800 	.word	0x40003800
 8000e18:	20000088 	.word	0x20000088
 8000e1c:	40020400 	.word	0x40020400

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f000 f8f8 	bl	8001044 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20020000 	.word	0x20020000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	200000b0 	.word	0x200000b0
 8000e88:	20000200 	.word	0x20000200

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <SystemCoreClockUpdate+0xec>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d011      	beq.n	8000efe <SystemCoreClockUpdate+0x4e>
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d844      	bhi.n	8000f6a <SystemCoreClockUpdate+0xba>
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <SystemCoreClockUpdate+0x3e>
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d004      	beq.n	8000ef6 <SystemCoreClockUpdate+0x46>
 8000eec:	e03d      	b.n	8000f6a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000eee:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <SystemCoreClockUpdate+0xf0>)
 8000ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8000fa4 <SystemCoreClockUpdate+0xf4>)
 8000ef2:	601a      	str	r2, [r3, #0]
      break;
 8000ef4:	e03d      	b.n	8000f72 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <SystemCoreClockUpdate+0xf0>)
 8000ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa8 <SystemCoreClockUpdate+0xf8>)
 8000efa:	601a      	str	r2, [r3, #0]
      break;
 8000efc:	e039      	b.n	8000f72 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000efe:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <SystemCoreClockUpdate+0xec>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	0d9b      	lsrs	r3, r3, #22
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f0a:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <SystemCoreClockUpdate+0xec>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f12:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00c      	beq.n	8000f34 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f1a:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <SystemCoreClockUpdate+0xf8>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4a1e      	ldr	r2, [pc, #120]	@ (8000f9c <SystemCoreClockUpdate+0xec>)
 8000f24:	6852      	ldr	r2, [r2, #4]
 8000f26:	0992      	lsrs	r2, r2, #6
 8000f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	e00b      	b.n	8000f4c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f34:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <SystemCoreClockUpdate+0xf4>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <SystemCoreClockUpdate+0xec>)
 8000f3e:	6852      	ldr	r2, [r2, #4]
 8000f40:	0992      	lsrs	r2, r2, #6
 8000f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <SystemCoreClockUpdate+0xec>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	3301      	adds	r3, #1
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <SystemCoreClockUpdate+0xf0>)
 8000f66:	6013      	str	r3, [r2, #0]
      break;
 8000f68:	e003      	b.n	8000f72 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <SystemCoreClockUpdate+0xf0>)
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <SystemCoreClockUpdate+0xf4>)
 8000f6e:	601a      	str	r2, [r3, #0]
      break;
 8000f70:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <SystemCoreClockUpdate+0xec>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <SystemCoreClockUpdate+0xfc>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <SystemCoreClockUpdate+0xf0>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <SystemCoreClockUpdate+0xf0>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	00f42400 	.word	0x00f42400
 8000fa8:	007a1200 	.word	0x007a1200
 8000fac:	08001a24 	.word	0x08001a24

08000fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb0:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb4:	f7ff ff6a 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fde:	f000 f837 	bl	8001050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff fedf 	bl	8000da4 <main>

08000fe6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   r0, =_estack
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000ff4:	08001a78 	.word	0x08001a78
  ldr r2, =_sbss
 8000ff8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000ffc:	200001fc 	.word	0x200001fc

08001000 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <_vsiprintf_r>:
 8001004:	b500      	push	{lr}
 8001006:	b09b      	sub	sp, #108	@ 0x6c
 8001008:	9100      	str	r1, [sp, #0]
 800100a:	9104      	str	r1, [sp, #16]
 800100c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001010:	9105      	str	r1, [sp, #20]
 8001012:	9102      	str	r1, [sp, #8]
 8001014:	4905      	ldr	r1, [pc, #20]	@ (800102c <_vsiprintf_r+0x28>)
 8001016:	9103      	str	r1, [sp, #12]
 8001018:	4669      	mov	r1, sp
 800101a:	f000 f993 	bl	8001344 <_svfiprintf_r>
 800101e:	9b00      	ldr	r3, [sp, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	b01b      	add	sp, #108	@ 0x6c
 8001026:	f85d fb04 	ldr.w	pc, [sp], #4
 800102a:	bf00      	nop
 800102c:	ffff0208 	.word	0xffff0208

08001030 <vsiprintf>:
 8001030:	4613      	mov	r3, r2
 8001032:	460a      	mov	r2, r1
 8001034:	4601      	mov	r1, r0
 8001036:	4802      	ldr	r0, [pc, #8]	@ (8001040 <vsiprintf+0x10>)
 8001038:	6800      	ldr	r0, [r0, #0]
 800103a:	f7ff bfe3 	b.w	8001004 <_vsiprintf_r>
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004

08001044 <__errno>:
 8001044:	4b01      	ldr	r3, [pc, #4]	@ (800104c <__errno+0x8>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004

08001050 <__libc_init_array>:
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	4d0d      	ldr	r5, [pc, #52]	@ (8001088 <__libc_init_array+0x38>)
 8001054:	4c0d      	ldr	r4, [pc, #52]	@ (800108c <__libc_init_array+0x3c>)
 8001056:	1b64      	subs	r4, r4, r5
 8001058:	10a4      	asrs	r4, r4, #2
 800105a:	2600      	movs	r6, #0
 800105c:	42a6      	cmp	r6, r4
 800105e:	d109      	bne.n	8001074 <__libc_init_array+0x24>
 8001060:	4d0b      	ldr	r5, [pc, #44]	@ (8001090 <__libc_init_array+0x40>)
 8001062:	4c0c      	ldr	r4, [pc, #48]	@ (8001094 <__libc_init_array+0x44>)
 8001064:	f000 fc66 	bl	8001934 <_init>
 8001068:	1b64      	subs	r4, r4, r5
 800106a:	10a4      	asrs	r4, r4, #2
 800106c:	2600      	movs	r6, #0
 800106e:	42a6      	cmp	r6, r4
 8001070:	d105      	bne.n	800107e <__libc_init_array+0x2e>
 8001072:	bd70      	pop	{r4, r5, r6, pc}
 8001074:	f855 3b04 	ldr.w	r3, [r5], #4
 8001078:	4798      	blx	r3
 800107a:	3601      	adds	r6, #1
 800107c:	e7ee      	b.n	800105c <__libc_init_array+0xc>
 800107e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001082:	4798      	blx	r3
 8001084:	3601      	adds	r6, #1
 8001086:	e7f2      	b.n	800106e <__libc_init_array+0x1e>
 8001088:	08001a70 	.word	0x08001a70
 800108c:	08001a70 	.word	0x08001a70
 8001090:	08001a70 	.word	0x08001a70
 8001094:	08001a74 	.word	0x08001a74

08001098 <__retarget_lock_acquire_recursive>:
 8001098:	4770      	bx	lr

0800109a <__retarget_lock_release_recursive>:
 800109a:	4770      	bx	lr

0800109c <_free_r>:
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	4605      	mov	r5, r0
 80010a0:	2900      	cmp	r1, #0
 80010a2:	d041      	beq.n	8001128 <_free_r+0x8c>
 80010a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010a8:	1f0c      	subs	r4, r1, #4
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bfb8      	it	lt
 80010ae:	18e4      	addlt	r4, r4, r3
 80010b0:	f000 f8e0 	bl	8001274 <__malloc_lock>
 80010b4:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <_free_r+0x90>)
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	b933      	cbnz	r3, 80010c8 <_free_r+0x2c>
 80010ba:	6063      	str	r3, [r4, #4]
 80010bc:	6014      	str	r4, [r2, #0]
 80010be:	4628      	mov	r0, r5
 80010c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010c4:	f000 b8dc 	b.w	8001280 <__malloc_unlock>
 80010c8:	42a3      	cmp	r3, r4
 80010ca:	d908      	bls.n	80010de <_free_r+0x42>
 80010cc:	6820      	ldr	r0, [r4, #0]
 80010ce:	1821      	adds	r1, r4, r0
 80010d0:	428b      	cmp	r3, r1
 80010d2:	bf01      	itttt	eq
 80010d4:	6819      	ldreq	r1, [r3, #0]
 80010d6:	685b      	ldreq	r3, [r3, #4]
 80010d8:	1809      	addeq	r1, r1, r0
 80010da:	6021      	streq	r1, [r4, #0]
 80010dc:	e7ed      	b.n	80010ba <_free_r+0x1e>
 80010de:	461a      	mov	r2, r3
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	b10b      	cbz	r3, 80010e8 <_free_r+0x4c>
 80010e4:	42a3      	cmp	r3, r4
 80010e6:	d9fa      	bls.n	80010de <_free_r+0x42>
 80010e8:	6811      	ldr	r1, [r2, #0]
 80010ea:	1850      	adds	r0, r2, r1
 80010ec:	42a0      	cmp	r0, r4
 80010ee:	d10b      	bne.n	8001108 <_free_r+0x6c>
 80010f0:	6820      	ldr	r0, [r4, #0]
 80010f2:	4401      	add	r1, r0
 80010f4:	1850      	adds	r0, r2, r1
 80010f6:	4283      	cmp	r3, r0
 80010f8:	6011      	str	r1, [r2, #0]
 80010fa:	d1e0      	bne.n	80010be <_free_r+0x22>
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	6053      	str	r3, [r2, #4]
 8001102:	4408      	add	r0, r1
 8001104:	6010      	str	r0, [r2, #0]
 8001106:	e7da      	b.n	80010be <_free_r+0x22>
 8001108:	d902      	bls.n	8001110 <_free_r+0x74>
 800110a:	230c      	movs	r3, #12
 800110c:	602b      	str	r3, [r5, #0]
 800110e:	e7d6      	b.n	80010be <_free_r+0x22>
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	1821      	adds	r1, r4, r0
 8001114:	428b      	cmp	r3, r1
 8001116:	bf04      	itt	eq
 8001118:	6819      	ldreq	r1, [r3, #0]
 800111a:	685b      	ldreq	r3, [r3, #4]
 800111c:	6063      	str	r3, [r4, #4]
 800111e:	bf04      	itt	eq
 8001120:	1809      	addeq	r1, r1, r0
 8001122:	6021      	streq	r1, [r4, #0]
 8001124:	6054      	str	r4, [r2, #4]
 8001126:	e7ca      	b.n	80010be <_free_r+0x22>
 8001128:	bd38      	pop	{r3, r4, r5, pc}
 800112a:	bf00      	nop
 800112c:	200001f8 	.word	0x200001f8

08001130 <sbrk_aligned>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	4e0f      	ldr	r6, [pc, #60]	@ (8001170 <sbrk_aligned+0x40>)
 8001134:	460c      	mov	r4, r1
 8001136:	6831      	ldr	r1, [r6, #0]
 8001138:	4605      	mov	r5, r0
 800113a:	b911      	cbnz	r1, 8001142 <sbrk_aligned+0x12>
 800113c:	f000 fba6 	bl	800188c <_sbrk_r>
 8001140:	6030      	str	r0, [r6, #0]
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	f000 fba1 	bl	800188c <_sbrk_r>
 800114a:	1c43      	adds	r3, r0, #1
 800114c:	d103      	bne.n	8001156 <sbrk_aligned+0x26>
 800114e:	f04f 34ff 	mov.w	r4, #4294967295
 8001152:	4620      	mov	r0, r4
 8001154:	bd70      	pop	{r4, r5, r6, pc}
 8001156:	1cc4      	adds	r4, r0, #3
 8001158:	f024 0403 	bic.w	r4, r4, #3
 800115c:	42a0      	cmp	r0, r4
 800115e:	d0f8      	beq.n	8001152 <sbrk_aligned+0x22>
 8001160:	1a21      	subs	r1, r4, r0
 8001162:	4628      	mov	r0, r5
 8001164:	f000 fb92 	bl	800188c <_sbrk_r>
 8001168:	3001      	adds	r0, #1
 800116a:	d1f2      	bne.n	8001152 <sbrk_aligned+0x22>
 800116c:	e7ef      	b.n	800114e <sbrk_aligned+0x1e>
 800116e:	bf00      	nop
 8001170:	200001f4 	.word	0x200001f4

08001174 <_malloc_r>:
 8001174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001178:	1ccd      	adds	r5, r1, #3
 800117a:	f025 0503 	bic.w	r5, r5, #3
 800117e:	3508      	adds	r5, #8
 8001180:	2d0c      	cmp	r5, #12
 8001182:	bf38      	it	cc
 8001184:	250c      	movcc	r5, #12
 8001186:	2d00      	cmp	r5, #0
 8001188:	4606      	mov	r6, r0
 800118a:	db01      	blt.n	8001190 <_malloc_r+0x1c>
 800118c:	42a9      	cmp	r1, r5
 800118e:	d904      	bls.n	800119a <_malloc_r+0x26>
 8001190:	230c      	movs	r3, #12
 8001192:	6033      	str	r3, [r6, #0]
 8001194:	2000      	movs	r0, #0
 8001196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800119a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001270 <_malloc_r+0xfc>
 800119e:	f000 f869 	bl	8001274 <__malloc_lock>
 80011a2:	f8d8 3000 	ldr.w	r3, [r8]
 80011a6:	461c      	mov	r4, r3
 80011a8:	bb44      	cbnz	r4, 80011fc <_malloc_r+0x88>
 80011aa:	4629      	mov	r1, r5
 80011ac:	4630      	mov	r0, r6
 80011ae:	f7ff ffbf 	bl	8001130 <sbrk_aligned>
 80011b2:	1c43      	adds	r3, r0, #1
 80011b4:	4604      	mov	r4, r0
 80011b6:	d158      	bne.n	800126a <_malloc_r+0xf6>
 80011b8:	f8d8 4000 	ldr.w	r4, [r8]
 80011bc:	4627      	mov	r7, r4
 80011be:	2f00      	cmp	r7, #0
 80011c0:	d143      	bne.n	800124a <_malloc_r+0xd6>
 80011c2:	2c00      	cmp	r4, #0
 80011c4:	d04b      	beq.n	800125e <_malloc_r+0xea>
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	4639      	mov	r1, r7
 80011ca:	4630      	mov	r0, r6
 80011cc:	eb04 0903 	add.w	r9, r4, r3
 80011d0:	f000 fb5c 	bl	800188c <_sbrk_r>
 80011d4:	4581      	cmp	r9, r0
 80011d6:	d142      	bne.n	800125e <_malloc_r+0xea>
 80011d8:	6821      	ldr	r1, [r4, #0]
 80011da:	1a6d      	subs	r5, r5, r1
 80011dc:	4629      	mov	r1, r5
 80011de:	4630      	mov	r0, r6
 80011e0:	f7ff ffa6 	bl	8001130 <sbrk_aligned>
 80011e4:	3001      	adds	r0, #1
 80011e6:	d03a      	beq.n	800125e <_malloc_r+0xea>
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	442b      	add	r3, r5
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	f8d8 3000 	ldr.w	r3, [r8]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	bb62      	cbnz	r2, 8001250 <_malloc_r+0xdc>
 80011f6:	f8c8 7000 	str.w	r7, [r8]
 80011fa:	e00f      	b.n	800121c <_malloc_r+0xa8>
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	1b52      	subs	r2, r2, r5
 8001200:	d420      	bmi.n	8001244 <_malloc_r+0xd0>
 8001202:	2a0b      	cmp	r2, #11
 8001204:	d917      	bls.n	8001236 <_malloc_r+0xc2>
 8001206:	1961      	adds	r1, r4, r5
 8001208:	42a3      	cmp	r3, r4
 800120a:	6025      	str	r5, [r4, #0]
 800120c:	bf18      	it	ne
 800120e:	6059      	strne	r1, [r3, #4]
 8001210:	6863      	ldr	r3, [r4, #4]
 8001212:	bf08      	it	eq
 8001214:	f8c8 1000 	streq.w	r1, [r8]
 8001218:	5162      	str	r2, [r4, r5]
 800121a:	604b      	str	r3, [r1, #4]
 800121c:	4630      	mov	r0, r6
 800121e:	f000 f82f 	bl	8001280 <__malloc_unlock>
 8001222:	f104 000b 	add.w	r0, r4, #11
 8001226:	1d23      	adds	r3, r4, #4
 8001228:	f020 0007 	bic.w	r0, r0, #7
 800122c:	1ac2      	subs	r2, r0, r3
 800122e:	bf1c      	itt	ne
 8001230:	1a1b      	subne	r3, r3, r0
 8001232:	50a3      	strne	r3, [r4, r2]
 8001234:	e7af      	b.n	8001196 <_malloc_r+0x22>
 8001236:	6862      	ldr	r2, [r4, #4]
 8001238:	42a3      	cmp	r3, r4
 800123a:	bf0c      	ite	eq
 800123c:	f8c8 2000 	streq.w	r2, [r8]
 8001240:	605a      	strne	r2, [r3, #4]
 8001242:	e7eb      	b.n	800121c <_malloc_r+0xa8>
 8001244:	4623      	mov	r3, r4
 8001246:	6864      	ldr	r4, [r4, #4]
 8001248:	e7ae      	b.n	80011a8 <_malloc_r+0x34>
 800124a:	463c      	mov	r4, r7
 800124c:	687f      	ldr	r7, [r7, #4]
 800124e:	e7b6      	b.n	80011be <_malloc_r+0x4a>
 8001250:	461a      	mov	r2, r3
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	42a3      	cmp	r3, r4
 8001256:	d1fb      	bne.n	8001250 <_malloc_r+0xdc>
 8001258:	2300      	movs	r3, #0
 800125a:	6053      	str	r3, [r2, #4]
 800125c:	e7de      	b.n	800121c <_malloc_r+0xa8>
 800125e:	230c      	movs	r3, #12
 8001260:	6033      	str	r3, [r6, #0]
 8001262:	4630      	mov	r0, r6
 8001264:	f000 f80c 	bl	8001280 <__malloc_unlock>
 8001268:	e794      	b.n	8001194 <_malloc_r+0x20>
 800126a:	6005      	str	r5, [r0, #0]
 800126c:	e7d6      	b.n	800121c <_malloc_r+0xa8>
 800126e:	bf00      	nop
 8001270:	200001f8 	.word	0x200001f8

08001274 <__malloc_lock>:
 8001274:	4801      	ldr	r0, [pc, #4]	@ (800127c <__malloc_lock+0x8>)
 8001276:	f7ff bf0f 	b.w	8001098 <__retarget_lock_acquire_recursive>
 800127a:	bf00      	nop
 800127c:	200001f0 	.word	0x200001f0

08001280 <__malloc_unlock>:
 8001280:	4801      	ldr	r0, [pc, #4]	@ (8001288 <__malloc_unlock+0x8>)
 8001282:	f7ff bf0a 	b.w	800109a <__retarget_lock_release_recursive>
 8001286:	bf00      	nop
 8001288:	200001f0 	.word	0x200001f0

0800128c <__ssputs_r>:
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	688e      	ldr	r6, [r1, #8]
 8001292:	461f      	mov	r7, r3
 8001294:	42be      	cmp	r6, r7
 8001296:	680b      	ldr	r3, [r1, #0]
 8001298:	4682      	mov	sl, r0
 800129a:	460c      	mov	r4, r1
 800129c:	4690      	mov	r8, r2
 800129e:	d82d      	bhi.n	80012fc <__ssputs_r+0x70>
 80012a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80012a8:	d026      	beq.n	80012f8 <__ssputs_r+0x6c>
 80012aa:	6965      	ldr	r5, [r4, #20]
 80012ac:	6909      	ldr	r1, [r1, #16]
 80012ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012b2:	eba3 0901 	sub.w	r9, r3, r1
 80012b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80012ba:	1c7b      	adds	r3, r7, #1
 80012bc:	444b      	add	r3, r9
 80012be:	106d      	asrs	r5, r5, #1
 80012c0:	429d      	cmp	r5, r3
 80012c2:	bf38      	it	cc
 80012c4:	461d      	movcc	r5, r3
 80012c6:	0553      	lsls	r3, r2, #21
 80012c8:	d527      	bpl.n	800131a <__ssputs_r+0x8e>
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7ff ff52 	bl	8001174 <_malloc_r>
 80012d0:	4606      	mov	r6, r0
 80012d2:	b360      	cbz	r0, 800132e <__ssputs_r+0xa2>
 80012d4:	6921      	ldr	r1, [r4, #16]
 80012d6:	464a      	mov	r2, r9
 80012d8:	f000 fae8 	bl	80018ac <memcpy>
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80012e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e6:	81a3      	strh	r3, [r4, #12]
 80012e8:	6126      	str	r6, [r4, #16]
 80012ea:	6165      	str	r5, [r4, #20]
 80012ec:	444e      	add	r6, r9
 80012ee:	eba5 0509 	sub.w	r5, r5, r9
 80012f2:	6026      	str	r6, [r4, #0]
 80012f4:	60a5      	str	r5, [r4, #8]
 80012f6:	463e      	mov	r6, r7
 80012f8:	42be      	cmp	r6, r7
 80012fa:	d900      	bls.n	80012fe <__ssputs_r+0x72>
 80012fc:	463e      	mov	r6, r7
 80012fe:	6820      	ldr	r0, [r4, #0]
 8001300:	4632      	mov	r2, r6
 8001302:	4641      	mov	r1, r8
 8001304:	f000 faa8 	bl	8001858 <memmove>
 8001308:	68a3      	ldr	r3, [r4, #8]
 800130a:	1b9b      	subs	r3, r3, r6
 800130c:	60a3      	str	r3, [r4, #8]
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	4433      	add	r3, r6
 8001312:	6023      	str	r3, [r4, #0]
 8001314:	2000      	movs	r0, #0
 8001316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800131a:	462a      	mov	r2, r5
 800131c:	f000 fad4 	bl	80018c8 <_realloc_r>
 8001320:	4606      	mov	r6, r0
 8001322:	2800      	cmp	r0, #0
 8001324:	d1e0      	bne.n	80012e8 <__ssputs_r+0x5c>
 8001326:	6921      	ldr	r1, [r4, #16]
 8001328:	4650      	mov	r0, sl
 800132a:	f7ff feb7 	bl	800109c <_free_r>
 800132e:	230c      	movs	r3, #12
 8001330:	f8ca 3000 	str.w	r3, [sl]
 8001334:	89a3      	ldrh	r3, [r4, #12]
 8001336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800133a:	81a3      	strh	r3, [r4, #12]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	e7e9      	b.n	8001316 <__ssputs_r+0x8a>
	...

08001344 <_svfiprintf_r>:
 8001344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001348:	4698      	mov	r8, r3
 800134a:	898b      	ldrh	r3, [r1, #12]
 800134c:	061b      	lsls	r3, r3, #24
 800134e:	b09d      	sub	sp, #116	@ 0x74
 8001350:	4607      	mov	r7, r0
 8001352:	460d      	mov	r5, r1
 8001354:	4614      	mov	r4, r2
 8001356:	d510      	bpl.n	800137a <_svfiprintf_r+0x36>
 8001358:	690b      	ldr	r3, [r1, #16]
 800135a:	b973      	cbnz	r3, 800137a <_svfiprintf_r+0x36>
 800135c:	2140      	movs	r1, #64	@ 0x40
 800135e:	f7ff ff09 	bl	8001174 <_malloc_r>
 8001362:	6028      	str	r0, [r5, #0]
 8001364:	6128      	str	r0, [r5, #16]
 8001366:	b930      	cbnz	r0, 8001376 <_svfiprintf_r+0x32>
 8001368:	230c      	movs	r3, #12
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	b01d      	add	sp, #116	@ 0x74
 8001372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001376:	2340      	movs	r3, #64	@ 0x40
 8001378:	616b      	str	r3, [r5, #20]
 800137a:	2300      	movs	r3, #0
 800137c:	9309      	str	r3, [sp, #36]	@ 0x24
 800137e:	2320      	movs	r3, #32
 8001380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001384:	f8cd 800c 	str.w	r8, [sp, #12]
 8001388:	2330      	movs	r3, #48	@ 0x30
 800138a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001528 <_svfiprintf_r+0x1e4>
 800138e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001392:	f04f 0901 	mov.w	r9, #1
 8001396:	4623      	mov	r3, r4
 8001398:	469a      	mov	sl, r3
 800139a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800139e:	b10a      	cbz	r2, 80013a4 <_svfiprintf_r+0x60>
 80013a0:	2a25      	cmp	r2, #37	@ 0x25
 80013a2:	d1f9      	bne.n	8001398 <_svfiprintf_r+0x54>
 80013a4:	ebba 0b04 	subs.w	fp, sl, r4
 80013a8:	d00b      	beq.n	80013c2 <_svfiprintf_r+0x7e>
 80013aa:	465b      	mov	r3, fp
 80013ac:	4622      	mov	r2, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	4638      	mov	r0, r7
 80013b2:	f7ff ff6b 	bl	800128c <__ssputs_r>
 80013b6:	3001      	adds	r0, #1
 80013b8:	f000 80a7 	beq.w	800150a <_svfiprintf_r+0x1c6>
 80013bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013be:	445a      	add	r2, fp
 80013c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80013c2:	f89a 3000 	ldrb.w	r3, [sl]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 809f 	beq.w	800150a <_svfiprintf_r+0x1c6>
 80013cc:	2300      	movs	r3, #0
 80013ce:	f04f 32ff 	mov.w	r2, #4294967295
 80013d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013d6:	f10a 0a01 	add.w	sl, sl, #1
 80013da:	9304      	str	r3, [sp, #16]
 80013dc:	9307      	str	r3, [sp, #28]
 80013de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80013e4:	4654      	mov	r4, sl
 80013e6:	2205      	movs	r2, #5
 80013e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013ec:	484e      	ldr	r0, [pc, #312]	@ (8001528 <_svfiprintf_r+0x1e4>)
 80013ee:	f7fe fef7 	bl	80001e0 <memchr>
 80013f2:	9a04      	ldr	r2, [sp, #16]
 80013f4:	b9d8      	cbnz	r0, 800142e <_svfiprintf_r+0xea>
 80013f6:	06d0      	lsls	r0, r2, #27
 80013f8:	bf44      	itt	mi
 80013fa:	2320      	movmi	r3, #32
 80013fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001400:	0711      	lsls	r1, r2, #28
 8001402:	bf44      	itt	mi
 8001404:	232b      	movmi	r3, #43	@ 0x2b
 8001406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800140a:	f89a 3000 	ldrb.w	r3, [sl]
 800140e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001410:	d015      	beq.n	800143e <_svfiprintf_r+0xfa>
 8001412:	9a07      	ldr	r2, [sp, #28]
 8001414:	4654      	mov	r4, sl
 8001416:	2000      	movs	r0, #0
 8001418:	f04f 0c0a 	mov.w	ip, #10
 800141c:	4621      	mov	r1, r4
 800141e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001422:	3b30      	subs	r3, #48	@ 0x30
 8001424:	2b09      	cmp	r3, #9
 8001426:	d94b      	bls.n	80014c0 <_svfiprintf_r+0x17c>
 8001428:	b1b0      	cbz	r0, 8001458 <_svfiprintf_r+0x114>
 800142a:	9207      	str	r2, [sp, #28]
 800142c:	e014      	b.n	8001458 <_svfiprintf_r+0x114>
 800142e:	eba0 0308 	sub.w	r3, r0, r8
 8001432:	fa09 f303 	lsl.w	r3, r9, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	9304      	str	r3, [sp, #16]
 800143a:	46a2      	mov	sl, r4
 800143c:	e7d2      	b.n	80013e4 <_svfiprintf_r+0xa0>
 800143e:	9b03      	ldr	r3, [sp, #12]
 8001440:	1d19      	adds	r1, r3, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	9103      	str	r1, [sp, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	bfbb      	ittet	lt
 800144a:	425b      	neglt	r3, r3
 800144c:	f042 0202 	orrlt.w	r2, r2, #2
 8001450:	9307      	strge	r3, [sp, #28]
 8001452:	9307      	strlt	r3, [sp, #28]
 8001454:	bfb8      	it	lt
 8001456:	9204      	strlt	r2, [sp, #16]
 8001458:	7823      	ldrb	r3, [r4, #0]
 800145a:	2b2e      	cmp	r3, #46	@ 0x2e
 800145c:	d10a      	bne.n	8001474 <_svfiprintf_r+0x130>
 800145e:	7863      	ldrb	r3, [r4, #1]
 8001460:	2b2a      	cmp	r3, #42	@ 0x2a
 8001462:	d132      	bne.n	80014ca <_svfiprintf_r+0x186>
 8001464:	9b03      	ldr	r3, [sp, #12]
 8001466:	1d1a      	adds	r2, r3, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	9203      	str	r2, [sp, #12]
 800146c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001470:	3402      	adds	r4, #2
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001538 <_svfiprintf_r+0x1f4>
 8001478:	7821      	ldrb	r1, [r4, #0]
 800147a:	2203      	movs	r2, #3
 800147c:	4650      	mov	r0, sl
 800147e:	f7fe feaf 	bl	80001e0 <memchr>
 8001482:	b138      	cbz	r0, 8001494 <_svfiprintf_r+0x150>
 8001484:	9b04      	ldr	r3, [sp, #16]
 8001486:	eba0 000a 	sub.w	r0, r0, sl
 800148a:	2240      	movs	r2, #64	@ 0x40
 800148c:	4082      	lsls	r2, r0
 800148e:	4313      	orrs	r3, r2
 8001490:	3401      	adds	r4, #1
 8001492:	9304      	str	r3, [sp, #16]
 8001494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001498:	4824      	ldr	r0, [pc, #144]	@ (800152c <_svfiprintf_r+0x1e8>)
 800149a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800149e:	2206      	movs	r2, #6
 80014a0:	f7fe fe9e 	bl	80001e0 <memchr>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d036      	beq.n	8001516 <_svfiprintf_r+0x1d2>
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <_svfiprintf_r+0x1ec>)
 80014aa:	bb1b      	cbnz	r3, 80014f4 <_svfiprintf_r+0x1b0>
 80014ac:	9b03      	ldr	r3, [sp, #12]
 80014ae:	3307      	adds	r3, #7
 80014b0:	f023 0307 	bic.w	r3, r3, #7
 80014b4:	3308      	adds	r3, #8
 80014b6:	9303      	str	r3, [sp, #12]
 80014b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014ba:	4433      	add	r3, r6
 80014bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80014be:	e76a      	b.n	8001396 <_svfiprintf_r+0x52>
 80014c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80014c4:	460c      	mov	r4, r1
 80014c6:	2001      	movs	r0, #1
 80014c8:	e7a8      	b.n	800141c <_svfiprintf_r+0xd8>
 80014ca:	2300      	movs	r3, #0
 80014cc:	3401      	adds	r4, #1
 80014ce:	9305      	str	r3, [sp, #20]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 0c0a 	mov.w	ip, #10
 80014d6:	4620      	mov	r0, r4
 80014d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014dc:	3a30      	subs	r2, #48	@ 0x30
 80014de:	2a09      	cmp	r2, #9
 80014e0:	d903      	bls.n	80014ea <_svfiprintf_r+0x1a6>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0c6      	beq.n	8001474 <_svfiprintf_r+0x130>
 80014e6:	9105      	str	r1, [sp, #20]
 80014e8:	e7c4      	b.n	8001474 <_svfiprintf_r+0x130>
 80014ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80014ee:	4604      	mov	r4, r0
 80014f0:	2301      	movs	r3, #1
 80014f2:	e7f0      	b.n	80014d6 <_svfiprintf_r+0x192>
 80014f4:	ab03      	add	r3, sp, #12
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	462a      	mov	r2, r5
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <_svfiprintf_r+0x1f0>)
 80014fc:	a904      	add	r1, sp, #16
 80014fe:	4638      	mov	r0, r7
 8001500:	f3af 8000 	nop.w
 8001504:	1c42      	adds	r2, r0, #1
 8001506:	4606      	mov	r6, r0
 8001508:	d1d6      	bne.n	80014b8 <_svfiprintf_r+0x174>
 800150a:	89ab      	ldrh	r3, [r5, #12]
 800150c:	065b      	lsls	r3, r3, #25
 800150e:	f53f af2d 	bmi.w	800136c <_svfiprintf_r+0x28>
 8001512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001514:	e72c      	b.n	8001370 <_svfiprintf_r+0x2c>
 8001516:	ab03      	add	r3, sp, #12
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	462a      	mov	r2, r5
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <_svfiprintf_r+0x1f0>)
 800151e:	a904      	add	r1, sp, #16
 8001520:	4638      	mov	r0, r7
 8001522:	f000 f879 	bl	8001618 <_printf_i>
 8001526:	e7ed      	b.n	8001504 <_svfiprintf_r+0x1c0>
 8001528:	08001a34 	.word	0x08001a34
 800152c:	08001a3e 	.word	0x08001a3e
 8001530:	00000000 	.word	0x00000000
 8001534:	0800128d 	.word	0x0800128d
 8001538:	08001a3a 	.word	0x08001a3a

0800153c <_printf_common>:
 800153c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001540:	4616      	mov	r6, r2
 8001542:	4698      	mov	r8, r3
 8001544:	688a      	ldr	r2, [r1, #8]
 8001546:	690b      	ldr	r3, [r1, #16]
 8001548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800154c:	4293      	cmp	r3, r2
 800154e:	bfb8      	it	lt
 8001550:	4613      	movlt	r3, r2
 8001552:	6033      	str	r3, [r6, #0]
 8001554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001558:	4607      	mov	r7, r0
 800155a:	460c      	mov	r4, r1
 800155c:	b10a      	cbz	r2, 8001562 <_printf_common+0x26>
 800155e:	3301      	adds	r3, #1
 8001560:	6033      	str	r3, [r6, #0]
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	0699      	lsls	r1, r3, #26
 8001566:	bf42      	ittt	mi
 8001568:	6833      	ldrmi	r3, [r6, #0]
 800156a:	3302      	addmi	r3, #2
 800156c:	6033      	strmi	r3, [r6, #0]
 800156e:	6825      	ldr	r5, [r4, #0]
 8001570:	f015 0506 	ands.w	r5, r5, #6
 8001574:	d106      	bne.n	8001584 <_printf_common+0x48>
 8001576:	f104 0a19 	add.w	sl, r4, #25
 800157a:	68e3      	ldr	r3, [r4, #12]
 800157c:	6832      	ldr	r2, [r6, #0]
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	42ab      	cmp	r3, r5
 8001582:	dc26      	bgt.n	80015d2 <_printf_common+0x96>
 8001584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001588:	6822      	ldr	r2, [r4, #0]
 800158a:	3b00      	subs	r3, #0
 800158c:	bf18      	it	ne
 800158e:	2301      	movne	r3, #1
 8001590:	0692      	lsls	r2, r2, #26
 8001592:	d42b      	bmi.n	80015ec <_printf_common+0xb0>
 8001594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001598:	4641      	mov	r1, r8
 800159a:	4638      	mov	r0, r7
 800159c:	47c8      	blx	r9
 800159e:	3001      	adds	r0, #1
 80015a0:	d01e      	beq.n	80015e0 <_printf_common+0xa4>
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	6922      	ldr	r2, [r4, #16]
 80015a6:	f003 0306 	and.w	r3, r3, #6
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf02      	ittt	eq
 80015ae:	68e5      	ldreq	r5, [r4, #12]
 80015b0:	6833      	ldreq	r3, [r6, #0]
 80015b2:	1aed      	subeq	r5, r5, r3
 80015b4:	68a3      	ldr	r3, [r4, #8]
 80015b6:	bf0c      	ite	eq
 80015b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015bc:	2500      	movne	r5, #0
 80015be:	4293      	cmp	r3, r2
 80015c0:	bfc4      	itt	gt
 80015c2:	1a9b      	subgt	r3, r3, r2
 80015c4:	18ed      	addgt	r5, r5, r3
 80015c6:	2600      	movs	r6, #0
 80015c8:	341a      	adds	r4, #26
 80015ca:	42b5      	cmp	r5, r6
 80015cc:	d11a      	bne.n	8001604 <_printf_common+0xc8>
 80015ce:	2000      	movs	r0, #0
 80015d0:	e008      	b.n	80015e4 <_printf_common+0xa8>
 80015d2:	2301      	movs	r3, #1
 80015d4:	4652      	mov	r2, sl
 80015d6:	4641      	mov	r1, r8
 80015d8:	4638      	mov	r0, r7
 80015da:	47c8      	blx	r9
 80015dc:	3001      	adds	r0, #1
 80015de:	d103      	bne.n	80015e8 <_printf_common+0xac>
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015e8:	3501      	adds	r5, #1
 80015ea:	e7c6      	b.n	800157a <_printf_common+0x3e>
 80015ec:	18e1      	adds	r1, r4, r3
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	2030      	movs	r0, #48	@ 0x30
 80015f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015f6:	4422      	add	r2, r4
 80015f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80015fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001600:	3302      	adds	r3, #2
 8001602:	e7c7      	b.n	8001594 <_printf_common+0x58>
 8001604:	2301      	movs	r3, #1
 8001606:	4622      	mov	r2, r4
 8001608:	4641      	mov	r1, r8
 800160a:	4638      	mov	r0, r7
 800160c:	47c8      	blx	r9
 800160e:	3001      	adds	r0, #1
 8001610:	d0e6      	beq.n	80015e0 <_printf_common+0xa4>
 8001612:	3601      	adds	r6, #1
 8001614:	e7d9      	b.n	80015ca <_printf_common+0x8e>
	...

08001618 <_printf_i>:
 8001618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800161c:	7e0f      	ldrb	r7, [r1, #24]
 800161e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001620:	2f78      	cmp	r7, #120	@ 0x78
 8001622:	4691      	mov	r9, r2
 8001624:	4680      	mov	r8, r0
 8001626:	460c      	mov	r4, r1
 8001628:	469a      	mov	sl, r3
 800162a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800162e:	d807      	bhi.n	8001640 <_printf_i+0x28>
 8001630:	2f62      	cmp	r7, #98	@ 0x62
 8001632:	d80a      	bhi.n	800164a <_printf_i+0x32>
 8001634:	2f00      	cmp	r7, #0
 8001636:	f000 80d2 	beq.w	80017de <_printf_i+0x1c6>
 800163a:	2f58      	cmp	r7, #88	@ 0x58
 800163c:	f000 80b9 	beq.w	80017b2 <_printf_i+0x19a>
 8001640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001648:	e03a      	b.n	80016c0 <_printf_i+0xa8>
 800164a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800164e:	2b15      	cmp	r3, #21
 8001650:	d8f6      	bhi.n	8001640 <_printf_i+0x28>
 8001652:	a101      	add	r1, pc, #4	@ (adr r1, 8001658 <_printf_i+0x40>)
 8001654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016c5 	.word	0x080016c5
 8001660:	08001641 	.word	0x08001641
 8001664:	08001641 	.word	0x08001641
 8001668:	08001641 	.word	0x08001641
 800166c:	08001641 	.word	0x08001641
 8001670:	080016c5 	.word	0x080016c5
 8001674:	08001641 	.word	0x08001641
 8001678:	08001641 	.word	0x08001641
 800167c:	08001641 	.word	0x08001641
 8001680:	08001641 	.word	0x08001641
 8001684:	080017c5 	.word	0x080017c5
 8001688:	080016ef 	.word	0x080016ef
 800168c:	0800177f 	.word	0x0800177f
 8001690:	08001641 	.word	0x08001641
 8001694:	08001641 	.word	0x08001641
 8001698:	080017e7 	.word	0x080017e7
 800169c:	08001641 	.word	0x08001641
 80016a0:	080016ef 	.word	0x080016ef
 80016a4:	08001641 	.word	0x08001641
 80016a8:	08001641 	.word	0x08001641
 80016ac:	08001787 	.word	0x08001787
 80016b0:	6833      	ldr	r3, [r6, #0]
 80016b2:	1d1a      	adds	r2, r3, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6032      	str	r2, [r6, #0]
 80016b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80016c0:	2301      	movs	r3, #1
 80016c2:	e09d      	b.n	8001800 <_printf_i+0x1e8>
 80016c4:	6833      	ldr	r3, [r6, #0]
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	1d19      	adds	r1, r3, #4
 80016ca:	6031      	str	r1, [r6, #0]
 80016cc:	0606      	lsls	r6, r0, #24
 80016ce:	d501      	bpl.n	80016d4 <_printf_i+0xbc>
 80016d0:	681d      	ldr	r5, [r3, #0]
 80016d2:	e003      	b.n	80016dc <_printf_i+0xc4>
 80016d4:	0645      	lsls	r5, r0, #25
 80016d6:	d5fb      	bpl.n	80016d0 <_printf_i+0xb8>
 80016d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016dc:	2d00      	cmp	r5, #0
 80016de:	da03      	bge.n	80016e8 <_printf_i+0xd0>
 80016e0:	232d      	movs	r3, #45	@ 0x2d
 80016e2:	426d      	negs	r5, r5
 80016e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016e8:	4859      	ldr	r0, [pc, #356]	@ (8001850 <_printf_i+0x238>)
 80016ea:	230a      	movs	r3, #10
 80016ec:	e011      	b.n	8001712 <_printf_i+0xfa>
 80016ee:	6821      	ldr	r1, [r4, #0]
 80016f0:	6833      	ldr	r3, [r6, #0]
 80016f2:	0608      	lsls	r0, r1, #24
 80016f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80016f8:	d402      	bmi.n	8001700 <_printf_i+0xe8>
 80016fa:	0649      	lsls	r1, r1, #25
 80016fc:	bf48      	it	mi
 80016fe:	b2ad      	uxthmi	r5, r5
 8001700:	2f6f      	cmp	r7, #111	@ 0x6f
 8001702:	4853      	ldr	r0, [pc, #332]	@ (8001850 <_printf_i+0x238>)
 8001704:	6033      	str	r3, [r6, #0]
 8001706:	bf14      	ite	ne
 8001708:	230a      	movne	r3, #10
 800170a:	2308      	moveq	r3, #8
 800170c:	2100      	movs	r1, #0
 800170e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001712:	6866      	ldr	r6, [r4, #4]
 8001714:	60a6      	str	r6, [r4, #8]
 8001716:	2e00      	cmp	r6, #0
 8001718:	bfa2      	ittt	ge
 800171a:	6821      	ldrge	r1, [r4, #0]
 800171c:	f021 0104 	bicge.w	r1, r1, #4
 8001720:	6021      	strge	r1, [r4, #0]
 8001722:	b90d      	cbnz	r5, 8001728 <_printf_i+0x110>
 8001724:	2e00      	cmp	r6, #0
 8001726:	d04b      	beq.n	80017c0 <_printf_i+0x1a8>
 8001728:	4616      	mov	r6, r2
 800172a:	fbb5 f1f3 	udiv	r1, r5, r3
 800172e:	fb03 5711 	mls	r7, r3, r1, r5
 8001732:	5dc7      	ldrb	r7, [r0, r7]
 8001734:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001738:	462f      	mov	r7, r5
 800173a:	42bb      	cmp	r3, r7
 800173c:	460d      	mov	r5, r1
 800173e:	d9f4      	bls.n	800172a <_printf_i+0x112>
 8001740:	2b08      	cmp	r3, #8
 8001742:	d10b      	bne.n	800175c <_printf_i+0x144>
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	07df      	lsls	r7, r3, #31
 8001748:	d508      	bpl.n	800175c <_printf_i+0x144>
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	6861      	ldr	r1, [r4, #4]
 800174e:	4299      	cmp	r1, r3
 8001750:	bfde      	ittt	le
 8001752:	2330      	movle	r3, #48	@ 0x30
 8001754:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001758:	f106 36ff 	addle.w	r6, r6, #4294967295
 800175c:	1b92      	subs	r2, r2, r6
 800175e:	6122      	str	r2, [r4, #16]
 8001760:	f8cd a000 	str.w	sl, [sp]
 8001764:	464b      	mov	r3, r9
 8001766:	aa03      	add	r2, sp, #12
 8001768:	4621      	mov	r1, r4
 800176a:	4640      	mov	r0, r8
 800176c:	f7ff fee6 	bl	800153c <_printf_common>
 8001770:	3001      	adds	r0, #1
 8001772:	d14a      	bne.n	800180a <_printf_i+0x1f2>
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	b004      	add	sp, #16
 800177a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	f043 0320 	orr.w	r3, r3, #32
 8001784:	6023      	str	r3, [r4, #0]
 8001786:	4833      	ldr	r0, [pc, #204]	@ (8001854 <_printf_i+0x23c>)
 8001788:	2778      	movs	r7, #120	@ 0x78
 800178a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	6831      	ldr	r1, [r6, #0]
 8001792:	061f      	lsls	r7, r3, #24
 8001794:	f851 5b04 	ldr.w	r5, [r1], #4
 8001798:	d402      	bmi.n	80017a0 <_printf_i+0x188>
 800179a:	065f      	lsls	r7, r3, #25
 800179c:	bf48      	it	mi
 800179e:	b2ad      	uxthmi	r5, r5
 80017a0:	6031      	str	r1, [r6, #0]
 80017a2:	07d9      	lsls	r1, r3, #31
 80017a4:	bf44      	itt	mi
 80017a6:	f043 0320 	orrmi.w	r3, r3, #32
 80017aa:	6023      	strmi	r3, [r4, #0]
 80017ac:	b11d      	cbz	r5, 80017b6 <_printf_i+0x19e>
 80017ae:	2310      	movs	r3, #16
 80017b0:	e7ac      	b.n	800170c <_printf_i+0xf4>
 80017b2:	4827      	ldr	r0, [pc, #156]	@ (8001850 <_printf_i+0x238>)
 80017b4:	e7e9      	b.n	800178a <_printf_i+0x172>
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	f023 0320 	bic.w	r3, r3, #32
 80017bc:	6023      	str	r3, [r4, #0]
 80017be:	e7f6      	b.n	80017ae <_printf_i+0x196>
 80017c0:	4616      	mov	r6, r2
 80017c2:	e7bd      	b.n	8001740 <_printf_i+0x128>
 80017c4:	6833      	ldr	r3, [r6, #0]
 80017c6:	6825      	ldr	r5, [r4, #0]
 80017c8:	6961      	ldr	r1, [r4, #20]
 80017ca:	1d18      	adds	r0, r3, #4
 80017cc:	6030      	str	r0, [r6, #0]
 80017ce:	062e      	lsls	r6, r5, #24
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	d501      	bpl.n	80017d8 <_printf_i+0x1c0>
 80017d4:	6019      	str	r1, [r3, #0]
 80017d6:	e002      	b.n	80017de <_printf_i+0x1c6>
 80017d8:	0668      	lsls	r0, r5, #25
 80017da:	d5fb      	bpl.n	80017d4 <_printf_i+0x1bc>
 80017dc:	8019      	strh	r1, [r3, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	6123      	str	r3, [r4, #16]
 80017e2:	4616      	mov	r6, r2
 80017e4:	e7bc      	b.n	8001760 <_printf_i+0x148>
 80017e6:	6833      	ldr	r3, [r6, #0]
 80017e8:	1d1a      	adds	r2, r3, #4
 80017ea:	6032      	str	r2, [r6, #0]
 80017ec:	681e      	ldr	r6, [r3, #0]
 80017ee:	6862      	ldr	r2, [r4, #4]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4630      	mov	r0, r6
 80017f4:	f7fe fcf4 	bl	80001e0 <memchr>
 80017f8:	b108      	cbz	r0, 80017fe <_printf_i+0x1e6>
 80017fa:	1b80      	subs	r0, r0, r6
 80017fc:	6060      	str	r0, [r4, #4]
 80017fe:	6863      	ldr	r3, [r4, #4]
 8001800:	6123      	str	r3, [r4, #16]
 8001802:	2300      	movs	r3, #0
 8001804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001808:	e7aa      	b.n	8001760 <_printf_i+0x148>
 800180a:	6923      	ldr	r3, [r4, #16]
 800180c:	4632      	mov	r2, r6
 800180e:	4649      	mov	r1, r9
 8001810:	4640      	mov	r0, r8
 8001812:	47d0      	blx	sl
 8001814:	3001      	adds	r0, #1
 8001816:	d0ad      	beq.n	8001774 <_printf_i+0x15c>
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	079b      	lsls	r3, r3, #30
 800181c:	d413      	bmi.n	8001846 <_printf_i+0x22e>
 800181e:	68e0      	ldr	r0, [r4, #12]
 8001820:	9b03      	ldr	r3, [sp, #12]
 8001822:	4298      	cmp	r0, r3
 8001824:	bfb8      	it	lt
 8001826:	4618      	movlt	r0, r3
 8001828:	e7a6      	b.n	8001778 <_printf_i+0x160>
 800182a:	2301      	movs	r3, #1
 800182c:	4632      	mov	r2, r6
 800182e:	4649      	mov	r1, r9
 8001830:	4640      	mov	r0, r8
 8001832:	47d0      	blx	sl
 8001834:	3001      	adds	r0, #1
 8001836:	d09d      	beq.n	8001774 <_printf_i+0x15c>
 8001838:	3501      	adds	r5, #1
 800183a:	68e3      	ldr	r3, [r4, #12]
 800183c:	9903      	ldr	r1, [sp, #12]
 800183e:	1a5b      	subs	r3, r3, r1
 8001840:	42ab      	cmp	r3, r5
 8001842:	dcf2      	bgt.n	800182a <_printf_i+0x212>
 8001844:	e7eb      	b.n	800181e <_printf_i+0x206>
 8001846:	2500      	movs	r5, #0
 8001848:	f104 0619 	add.w	r6, r4, #25
 800184c:	e7f5      	b.n	800183a <_printf_i+0x222>
 800184e:	bf00      	nop
 8001850:	08001a45 	.word	0x08001a45
 8001854:	08001a56 	.word	0x08001a56

08001858 <memmove>:
 8001858:	4288      	cmp	r0, r1
 800185a:	b510      	push	{r4, lr}
 800185c:	eb01 0402 	add.w	r4, r1, r2
 8001860:	d902      	bls.n	8001868 <memmove+0x10>
 8001862:	4284      	cmp	r4, r0
 8001864:	4623      	mov	r3, r4
 8001866:	d807      	bhi.n	8001878 <memmove+0x20>
 8001868:	1e43      	subs	r3, r0, #1
 800186a:	42a1      	cmp	r1, r4
 800186c:	d008      	beq.n	8001880 <memmove+0x28>
 800186e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001876:	e7f8      	b.n	800186a <memmove+0x12>
 8001878:	4402      	add	r2, r0
 800187a:	4601      	mov	r1, r0
 800187c:	428a      	cmp	r2, r1
 800187e:	d100      	bne.n	8001882 <memmove+0x2a>
 8001880:	bd10      	pop	{r4, pc}
 8001882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800188a:	e7f7      	b.n	800187c <memmove+0x24>

0800188c <_sbrk_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4d06      	ldr	r5, [pc, #24]	@ (80018a8 <_sbrk_r+0x1c>)
 8001890:	2300      	movs	r3, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	602b      	str	r3, [r5, #0]
 8001898:	f7ff fac2 	bl	8000e20 <_sbrk>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d102      	bne.n	80018a6 <_sbrk_r+0x1a>
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	b103      	cbz	r3, 80018a6 <_sbrk_r+0x1a>
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	200001ec 	.word	0x200001ec

080018ac <memcpy>:
 80018ac:	440a      	add	r2, r1
 80018ae:	4291      	cmp	r1, r2
 80018b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80018b4:	d100      	bne.n	80018b8 <memcpy+0xc>
 80018b6:	4770      	bx	lr
 80018b8:	b510      	push	{r4, lr}
 80018ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018c2:	4291      	cmp	r1, r2
 80018c4:	d1f9      	bne.n	80018ba <memcpy+0xe>
 80018c6:	bd10      	pop	{r4, pc}

080018c8 <_realloc_r>:
 80018c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018cc:	4680      	mov	r8, r0
 80018ce:	4615      	mov	r5, r2
 80018d0:	460c      	mov	r4, r1
 80018d2:	b921      	cbnz	r1, 80018de <_realloc_r+0x16>
 80018d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018d8:	4611      	mov	r1, r2
 80018da:	f7ff bc4b 	b.w	8001174 <_malloc_r>
 80018de:	b92a      	cbnz	r2, 80018ec <_realloc_r+0x24>
 80018e0:	f7ff fbdc 	bl	800109c <_free_r>
 80018e4:	2400      	movs	r4, #0
 80018e6:	4620      	mov	r0, r4
 80018e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ec:	f000 f81a 	bl	8001924 <_malloc_usable_size_r>
 80018f0:	4285      	cmp	r5, r0
 80018f2:	4606      	mov	r6, r0
 80018f4:	d802      	bhi.n	80018fc <_realloc_r+0x34>
 80018f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80018fa:	d8f4      	bhi.n	80018e6 <_realloc_r+0x1e>
 80018fc:	4629      	mov	r1, r5
 80018fe:	4640      	mov	r0, r8
 8001900:	f7ff fc38 	bl	8001174 <_malloc_r>
 8001904:	4607      	mov	r7, r0
 8001906:	2800      	cmp	r0, #0
 8001908:	d0ec      	beq.n	80018e4 <_realloc_r+0x1c>
 800190a:	42b5      	cmp	r5, r6
 800190c:	462a      	mov	r2, r5
 800190e:	4621      	mov	r1, r4
 8001910:	bf28      	it	cs
 8001912:	4632      	movcs	r2, r6
 8001914:	f7ff ffca 	bl	80018ac <memcpy>
 8001918:	4621      	mov	r1, r4
 800191a:	4640      	mov	r0, r8
 800191c:	f7ff fbbe 	bl	800109c <_free_r>
 8001920:	463c      	mov	r4, r7
 8001922:	e7e0      	b.n	80018e6 <_realloc_r+0x1e>

08001924 <_malloc_usable_size_r>:
 8001924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001928:	1f18      	subs	r0, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	bfbc      	itt	lt
 800192e:	580b      	ldrlt	r3, [r1, r0]
 8001930:	18c0      	addlt	r0, r0, r3
 8001932:	4770      	bx	lr

08001934 <_init>:
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	bf00      	nop
 8001938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193a:	bc08      	pop	{r3}
 800193c:	469e      	mov	lr, r3
 800193e:	4770      	bx	lr

08001940 <_fini>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	bf00      	nop
 8001944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001946:	bc08      	pop	{r3}
 8001948:	469e      	mov	lr, r3
 800194a:	4770      	bx	lr
