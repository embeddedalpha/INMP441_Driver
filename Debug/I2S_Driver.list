
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b2c  08000b2c  00001b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b3c  08000b3c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b3c  08000b3c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b3c  08000b3c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b3c  08000b3c  00001b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b40  08000b40  00001b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000b44  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000040  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000052e7  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006fa  00000000  00000000  0000731b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00007a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000cc  00000000  00000000  00007b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000095c  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002290  00000000  00000000  00008568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e93e  00000000  00000000  0000a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00099136  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000364  00000000  00000000  0009917c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000994e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b14 	.word	0x08000b14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000b14 	.word	0x08000b14

080001c8 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a25      	ldr	r2, [pc, #148]	@ (8000268 <GPIO_Clock_Enable+0xa0>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d106      	bne.n	80001e6 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80001d8:	4b24      	ldr	r3, [pc, #144]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a23      	ldr	r2, [pc, #140]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80001e4:	e039      	b.n	800025a <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a21      	ldr	r2, [pc, #132]	@ (8000270 <GPIO_Clock_Enable+0xa8>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d106      	bne.n	80001fc <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80001ee:	4b1f      	ldr	r3, [pc, #124]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	4a1e      	ldr	r2, [pc, #120]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 80001f4:	f043 0302 	orr.w	r3, r3, #2
 80001f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fa:	e02e      	b.n	800025a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000274 <GPIO_Clock_Enable+0xac>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d106      	bne.n	8000212 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8000204:	4b19      	ldr	r3, [pc, #100]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a18      	ldr	r2, [pc, #96]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000210:	e023      	b.n	800025a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a18      	ldr	r2, [pc, #96]	@ (8000278 <GPIO_Clock_Enable+0xb0>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d106      	bne.n	8000228 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 800021a:	4b14      	ldr	r3, [pc, #80]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021e:	4a13      	ldr	r2, [pc, #76]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 8000220:	f043 0308 	orr.w	r3, r3, #8
 8000224:	6313      	str	r3, [r2, #48]	@ 0x30
 8000226:	e018      	b.n	800025a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a14      	ldr	r2, [pc, #80]	@ (800027c <GPIO_Clock_Enable+0xb4>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d106      	bne.n	800023e <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000230:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6313      	str	r3, [r2, #48]	@ 0x30
 800023c:	e00d      	b.n	800025a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a0f      	ldr	r2, [pc, #60]	@ (8000280 <GPIO_Clock_Enable+0xb8>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d106      	bne.n	8000254 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024a:	4a08      	ldr	r2, [pc, #32]	@ (800026c <GPIO_Clock_Enable+0xa4>)
 800024c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000250:	6313      	str	r3, [r2, #48]	@ 0x30
 8000252:	e002      	b.n	800025a <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000254:	f04f 33ff 	mov.w	r3, #4294967295
 8000258:	e000      	b.n	800025c <GPIO_Clock_Enable+0x94>
	}

	return 1;
 800025a:	2301      	movs	r3, #1
}
 800025c:	4618      	mov	r0, r3
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	40020000 	.word	0x40020000
 800026c:	40023800 	.word	0x40023800
 8000270:	40020400 	.word	0x40020400
 8000274:	40020800 	.word	0x40020800
 8000278:	40020c00 	.word	0x40020c00
 800027c:	40021000 	.word	0x40021000
 8000280:	40021c00 	.word	0x40021c00

08000284 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	4608      	mov	r0, r1
 800028e:	4611      	mov	r1, r2
 8000290:	461a      	mov	r2, r3
 8000292:	4603      	mov	r3, r0
 8000294:	70fb      	strb	r3, [r7, #3]
 8000296:	460b      	mov	r3, r1
 8000298:	70bb      	strb	r3, [r7, #2]
 800029a:	4613      	mov	r3, r2
 800029c:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f7ff ff92 	bl	80001c8 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	78b9      	ldrb	r1, [r7, #2]
 80002aa:	78fa      	ldrb	r2, [r7, #3]
 80002ac:	0052      	lsls	r2, r2, #1
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	431a      	orrs	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	7879      	ldrb	r1, [r7, #1]
 80002be:	78fa      	ldrb	r2, [r7, #3]
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	431a      	orrs	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	7c39      	ldrb	r1, [r7, #16]
 80002d0:	78fa      	ldrb	r2, [r7, #3]
 80002d2:	0052      	lsls	r2, r2, #1
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	7d39      	ldrb	r1, [r7, #20]
 80002e4:	78fa      	ldrb	r2, [r7, #3]
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80002f2:	78fb      	ldrb	r3, [r7, #3]
 80002f4:	2b07      	cmp	r3, #7
 80002f6:	d80a      	bhi.n	800030e <GPIO_Pin_Init+0x8a>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	7e39      	ldrb	r1, [r7, #24]
 80002fe:	78fa      	ldrb	r2, [r7, #3]
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	431a      	orrs	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 800030c:	e00a      	b.n	8000324 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000312:	7e39      	ldrb	r1, [r7, #24]
 8000314:	78fa      	ldrb	r2, [r7, #3]
 8000316:	3a08      	subs	r2, #8
 8000318:	0092      	lsls	r2, r2, #2
 800031a:	fa01 f202 	lsl.w	r2, r1, r2
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <SCK_PIN_INIT2>:
 * full duplex
 *
 */

static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b087      	sub	sp, #28
 8000330:	af04      	add	r7, sp, #16
 8000332:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_SCK_Pin.I2S2.PB10){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	7c1b      	ldrb	r3, [r3, #16]
 8000338:	22d2      	movs	r2, #210	@ 0xd2
 800033a:	4293      	cmp	r3, r2
 800033c:	d10e      	bne.n	800035c <SCK_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800033e:	2002      	movs	r0, #2
 8000340:	2400      	movs	r4, #0
 8000342:	2303      	movs	r3, #3
 8000344:	2200      	movs	r2, #0
 8000346:	2105      	movs	r1, #5
 8000348:	9102      	str	r1, [sp, #8]
 800034a:	9201      	str	r2, [sp, #4]
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	4623      	mov	r3, r4
 8000350:	4602      	mov	r2, r0
 8000352:	210a      	movs	r1, #10
 8000354:	4811      	ldr	r0, [pc, #68]	@ (800039c <SCK_PIN_INIT2+0x70>)
 8000356:	f7ff ff95 	bl	8000284 <GPIO_Pin_Init>
 800035a:	e019      	b.n	8000390 <SCK_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_SCK_Pin.I2S2.PB13){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	7c1b      	ldrb	r3, [r3, #16]
 8000360:	22d5      	movs	r2, #213	@ 0xd5
 8000362:	4293      	cmp	r3, r2
 8000364:	d10e      	bne.n	8000384 <SCK_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000366:	2002      	movs	r0, #2
 8000368:	2400      	movs	r4, #0
 800036a:	2303      	movs	r3, #3
 800036c:	2200      	movs	r2, #0
 800036e:	2105      	movs	r1, #5
 8000370:	9102      	str	r1, [sp, #8]
 8000372:	9201      	str	r2, [sp, #4]
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	4623      	mov	r3, r4
 8000378:	4602      	mov	r2, r0
 800037a:	210d      	movs	r1, #13
 800037c:	4807      	ldr	r0, [pc, #28]	@ (800039c <SCK_PIN_INIT2+0x70>)
 800037e:	f7ff ff81 	bl	8000284 <GPIO_Pin_Init>
 8000382:	e005      	b.n	8000390 <SCK_PIN_INIT2+0x64>
	}
	else{
		config->Error.SCK_Pin_Error = 1;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2201      	movs	r2, #1
 8000388:	77da      	strb	r2, [r3, #31]
		return -1;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	e000      	b.n	8000392 <SCK_PIN_INIT2+0x66>
	}
	return 1;
 8000390:	2301      	movs	r3, #1
}
 8000392:	4618      	mov	r0, r3
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bd90      	pop	{r4, r7, pc}
 800039a:	bf00      	nop
 800039c:	40020400 	.word	0x40020400

080003a0 <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af04      	add	r7, sp, #16
 80003a6:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_WS_Pin.I2S2.PB09){
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7c9b      	ldrb	r3, [r3, #18]
 80003ac:	22d1      	movs	r2, #209	@ 0xd1
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d10e      	bne.n	80003d0 <WS_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80003b2:	2002      	movs	r0, #2
 80003b4:	2400      	movs	r4, #0
 80003b6:	2303      	movs	r3, #3
 80003b8:	2200      	movs	r2, #0
 80003ba:	2105      	movs	r1, #5
 80003bc:	9102      	str	r1, [sp, #8]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	4623      	mov	r3, r4
 80003c4:	4602      	mov	r2, r0
 80003c6:	2109      	movs	r1, #9
 80003c8:	4811      	ldr	r0, [pc, #68]	@ (8000410 <WS_PIN_INIT2+0x70>)
 80003ca:	f7ff ff5b 	bl	8000284 <GPIO_Pin_Init>
 80003ce:	e019      	b.n	8000404 <WS_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_WS_Pin.I2S2.PB12){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7c9b      	ldrb	r3, [r3, #18]
 80003d4:	22d4      	movs	r2, #212	@ 0xd4
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d10e      	bne.n	80003f8 <WS_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80003da:	2002      	movs	r0, #2
 80003dc:	2400      	movs	r4, #0
 80003de:	2303      	movs	r3, #3
 80003e0:	2200      	movs	r2, #0
 80003e2:	2105      	movs	r1, #5
 80003e4:	9102      	str	r1, [sp, #8]
 80003e6:	9201      	str	r2, [sp, #4]
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	4623      	mov	r3, r4
 80003ec:	4602      	mov	r2, r0
 80003ee:	210c      	movs	r1, #12
 80003f0:	4807      	ldr	r0, [pc, #28]	@ (8000410 <WS_PIN_INIT2+0x70>)
 80003f2:	f7ff ff47 	bl	8000284 <GPIO_Pin_Init>
 80003f6:	e005      	b.n	8000404 <WS_PIN_INIT2+0x64>
	}
	else{
		config->Error.WS_Pin_Error = 1;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2201      	movs	r2, #1
 80003fc:	779a      	strb	r2, [r3, #30]
		return -1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	e000      	b.n	8000406 <WS_PIN_INIT2+0x66>
	}
	return 1;
 8000404:	2301      	movs	r3, #1
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bd90      	pop	{r4, r7, pc}
 800040e:	bf00      	nop
 8000410:	40020400 	.word	0x40020400

08000414 <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b087      	sub	sp, #28
 8000418:	af04      	add	r7, sp, #16
 800041a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_SD_Pin.I2S2.PB15){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	7c5b      	ldrb	r3, [r3, #17]
 8000420:	22d5      	movs	r2, #213	@ 0xd5
 8000422:	4293      	cmp	r3, r2
 8000424:	d10e      	bne.n	8000444 <SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000426:	2002      	movs	r0, #2
 8000428:	2400      	movs	r4, #0
 800042a:	2303      	movs	r3, #3
 800042c:	2200      	movs	r2, #0
 800042e:	2105      	movs	r1, #5
 8000430:	9102      	str	r1, [sp, #8]
 8000432:	9201      	str	r2, [sp, #4]
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	4623      	mov	r3, r4
 8000438:	4602      	mov	r2, r0
 800043a:	210f      	movs	r1, #15
 800043c:	4811      	ldr	r0, [pc, #68]	@ (8000484 <SD_PIN_Init2+0x70>)
 800043e:	f7ff ff21 	bl	8000284 <GPIO_Pin_Init>
 8000442:	e019      	b.n	8000478 <SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_SD_Pin.I2S2.PC03){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7c5b      	ldrb	r3, [r3, #17]
 8000448:	22df      	movs	r2, #223	@ 0xdf
 800044a:	4293      	cmp	r3, r2
 800044c:	d10e      	bne.n	800046c <SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800044e:	2002      	movs	r0, #2
 8000450:	2400      	movs	r4, #0
 8000452:	2303      	movs	r3, #3
 8000454:	2200      	movs	r2, #0
 8000456:	2105      	movs	r1, #5
 8000458:	9102      	str	r1, [sp, #8]
 800045a:	9201      	str	r2, [sp, #4]
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	4623      	mov	r3, r4
 8000460:	4602      	mov	r2, r0
 8000462:	2103      	movs	r1, #3
 8000464:	4808      	ldr	r0, [pc, #32]	@ (8000488 <SD_PIN_Init2+0x74>)
 8000466:	f7ff ff0d 	bl	8000284 <GPIO_Pin_Init>
 800046a:	e005      	b.n	8000478 <SD_PIN_Init2+0x64>
	}
	else{
		config->Error.SD_Pin_Error = 1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2201      	movs	r2, #1
 8000470:	775a      	strb	r2, [r3, #29]
		return -1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e000      	b.n	800047a <SD_PIN_Init2+0x66>
	}
	return 1;
 8000478:	2301      	movs	r3, #1
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bd90      	pop	{r4, r7, pc}
 8000482:	bf00      	nop
 8000484:	40020400 	.word	0x40020400
 8000488:	40020800 	.word	0x40020800

0800048c <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b087      	sub	sp, #28
 8000490:	af04      	add	r7, sp, #16
 8000492:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_MCK_Pin.I2S2.Disable)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7bdb      	ldrb	r3, [r3, #15]
 8000498:	22ff      	movs	r2, #255	@ 0xff
 800049a:	4293      	cmp	r3, r2
 800049c:	d01a      	beq.n	80004d4 <MCK_PIN_Init2+0x48>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_MCK_Pin.I2S2.PC7)){
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7bdb      	ldrb	r3, [r3, #15]
 80004a2:	2225      	movs	r2, #37	@ 0x25
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d10e      	bne.n	80004c6 <MCK_PIN_Init2+0x3a>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 80004a8:	2002      	movs	r0, #2
 80004aa:	2400      	movs	r4, #0
 80004ac:	2303      	movs	r3, #3
 80004ae:	2200      	movs	r2, #0
 80004b0:	2105      	movs	r1, #5
 80004b2:	9102      	str	r1, [sp, #8]
 80004b4:	9201      	str	r2, [sp, #4]
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	4623      	mov	r3, r4
 80004ba:	4602      	mov	r2, r0
 80004bc:	2107      	movs	r1, #7
 80004be:	4808      	ldr	r0, [pc, #32]	@ (80004e0 <MCK_PIN_Init2+0x54>)
 80004c0:	f7ff fee0 	bl	8000284 <GPIO_Pin_Init>
 80004c4:	e006      	b.n	80004d4 <MCK_PIN_Init2+0x48>
		}
		else{
			config->Error.MCK_PIN_Error = 1;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	e000      	b.n	80004d6 <MCK_PIN_Init2+0x4a>
		}
	}
	return 1;
 80004d4:	2301      	movs	r3, #1
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd90      	pop	{r4, r7, pc}
 80004de:	bf00      	nop
 80004e0:	40020800 	.word	0x40020800

080004e4 <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af04      	add	r7, sp, #16
 80004ea:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_ext_SD_Pin.I2S2.PB14){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	7cdb      	ldrb	r3, [r3, #19]
 80004f0:	22d6      	movs	r2, #214	@ 0xd6
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d10e      	bne.n	8000514 <EXT_SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80004f6:	2002      	movs	r0, #2
 80004f8:	2400      	movs	r4, #0
 80004fa:	2303      	movs	r3, #3
 80004fc:	2200      	movs	r2, #0
 80004fe:	2105      	movs	r1, #5
 8000500:	9102      	str	r1, [sp, #8]
 8000502:	9201      	str	r2, [sp, #4]
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	4623      	mov	r3, r4
 8000508:	4602      	mov	r2, r0
 800050a:	210e      	movs	r1, #14
 800050c:	4811      	ldr	r0, [pc, #68]	@ (8000554 <EXT_SD_PIN_Init2+0x70>)
 800050e:	f7ff feb9 	bl	8000284 <GPIO_Pin_Init>
 8000512:	e019      	b.n	8000548 <EXT_SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_ext_SD_Pin.I2S2.PC02){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7cdb      	ldrb	r3, [r3, #19]
 8000518:	22ca      	movs	r2, #202	@ 0xca
 800051a:	4293      	cmp	r3, r2
 800051c:	d10e      	bne.n	800053c <EXT_SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800051e:	2002      	movs	r0, #2
 8000520:	2400      	movs	r4, #0
 8000522:	2303      	movs	r3, #3
 8000524:	2200      	movs	r2, #0
 8000526:	2105      	movs	r1, #5
 8000528:	9102      	str	r1, [sp, #8]
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	4623      	mov	r3, r4
 8000530:	4602      	mov	r2, r0
 8000532:	2102      	movs	r1, #2
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <EXT_SD_PIN_Init2+0x74>)
 8000536:	f7ff fea5 	bl	8000284 <GPIO_Pin_Init>
 800053a:	e005      	b.n	8000548 <EXT_SD_PIN_Init2+0x64>
	}
	else{
		config->Error.Ext_SD_Pin_Error = 1;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2201      	movs	r2, #1
 8000540:	771a      	strb	r2, [r3, #28]
		return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e000      	b.n	800054a <EXT_SD_PIN_Init2+0x66>
	}
	return 1;
 8000548:	2301      	movs	r3, #1
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bd90      	pop	{r4, r7, pc}
 8000552:	bf00      	nop
 8000554:	40020400 	.word	0x40020400
 8000558:	40020800 	.word	0x40020800

0800055c <I2S_Init>:



int8_t I2S_Init(I2S_Config *config)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a79      	ldr	r2, [pc, #484]	@ (8000750 <I2S_Init+0x1f4>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d118      	bne.n	80005a0 <I2S_Init+0x44>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800056e:	4b79      	ldr	r3, [pc, #484]	@ (8000754 <I2S_Init+0x1f8>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000572:	4a78      	ldr	r2, [pc, #480]	@ (8000754 <I2S_Init+0x1f8>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000578:	6413      	str	r3, [r2, #64]	@ 0x40

		SD_PIN_Init2(config);
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ff4a 	bl	8000414 <SD_PIN_Init2>
		WS_PIN_INIT2(config);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff ff0d 	bl	80003a0 <WS_PIN_INIT2>
		SCK_PIN_INIT2(config);
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff fed0 	bl	800032c <SCK_PIN_INIT2>
		MCK_PIN_Init2(config);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff7d 	bl	800048c <MCK_PIN_Init2>
		if(config->Full_Duplex.Enable == true){
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7b5b      	ldrb	r3, [r3, #13]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <I2S_Init+0x44>
			EXT_SD_PIN_Init2(config);
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff ffa2 	bl	80004e4 <EXT_SD_PIN_Init2>

	}else{

	}

	config->Port->I2SCFGR |= 1 << 11;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	69da      	ldr	r2, [r3, #28]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80005ae:	61da      	str	r2, [r3, #28]


	// I2S Mode
	if(config->Full_Duplex.mode == I2S_Mode.Master.Transmit){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	7b9b      	ldrb	r3, [r3, #14]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d108      	bne.n	80005cc <I2S_Init+0x70>
		config->Port->I2SCFGR |= 2 << 8;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	69da      	ldr	r2, [r3, #28]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80005c8:	61da      	str	r2, [r3, #28]
 80005ca:	e028      	b.n	800061e <I2S_Init+0xc2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Master.Receive){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7b9b      	ldrb	r3, [r3, #14]
 80005d0:	2202      	movs	r2, #2
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d108      	bne.n	80005e8 <I2S_Init+0x8c>
		config->Port->I2SCFGR |= 3 << 8;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	69da      	ldr	r2, [r3, #28]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80005e4:	61da      	str	r2, [r3, #28]
 80005e6:	e01a      	b.n	800061e <I2S_Init+0xc2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Transmit){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7b9b      	ldrb	r3, [r3, #14]
 80005ec:	2203      	movs	r2, #3
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d108      	bne.n	8000604 <I2S_Init+0xa8>
		config->Port->I2SCFGR &= ~(3 << 8);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	69da      	ldr	r2, [r3, #28]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000600:	61da      	str	r2, [r3, #28]
 8000602:	e00c      	b.n	800061e <I2S_Init+0xc2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Receive){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	7b9b      	ldrb	r3, [r3, #14]
 8000608:	2204      	movs	r2, #4
 800060a:	4293      	cmp	r3, r2
 800060c:	d107      	bne.n	800061e <I2S_Init+0xc2>
		config->Port->I2SCFGR |= (1 << 8);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800061c:	61da      	str	r2, [r3, #28]
	}

	// Standard
	if(config->Standard == I2S_Standard.I2S_Philips){
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7a5b      	ldrb	r3, [r3, #9]
 8000622:	461a      	mov	r2, r3
 8000624:	2301      	movs	r3, #1
 8000626:	429a      	cmp	r2, r3
 8000628:	d108      	bne.n	800063c <I2S_Init+0xe0>
		config->Port->I2SCFGR &= ~(3 << 4);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	69da      	ldr	r2, [r3, #28]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8000638:	61da      	str	r2, [r3, #28]
 800063a:	e030      	b.n	800069e <I2S_Init+0x142>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7a5b      	ldrb	r3, [r3, #9]
 8000640:	461a      	mov	r2, r3
 8000642:	2302      	movs	r3, #2
 8000644:	429a      	cmp	r2, r3
 8000646:	d108      	bne.n	800065a <I2S_Init+0xfe>
		config->Port->I2SCFGR |= (1 << 4);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	69da      	ldr	r2, [r3, #28]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f042 0210 	orr.w	r2, r2, #16
 8000656:	61da      	str	r2, [r3, #28]
 8000658:	e021      	b.n	800069e <I2S_Init+0x142>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	7a5b      	ldrb	r3, [r3, #9]
 800065e:	461a      	mov	r2, r3
 8000660:	2303      	movs	r3, #3
 8000662:	429a      	cmp	r2, r3
 8000664:	d108      	bne.n	8000678 <I2S_Init+0x11c>
		config->Port->I2SCFGR |= (2 << 4);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f042 0220 	orr.w	r2, r2, #32
 8000674:	61da      	str	r2, [r3, #28]
 8000676:	e012      	b.n	800069e <I2S_Init+0x142>
	}else if(config->Standard == I2S_Standard.PCM){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7a5b      	ldrb	r3, [r3, #9]
 800067c:	461a      	mov	r2, r3
 800067e:	2304      	movs	r3, #4
 8000680:	429a      	cmp	r2, r3
 8000682:	d108      	bne.n	8000696 <I2S_Init+0x13a>
		config->Port->I2SCFGR |= (3 << 4);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	69da      	ldr	r2, [r3, #28]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8000692:	61da      	str	r2, [r3, #28]
 8000694:	e003      	b.n	800069e <I2S_Init+0x142>
	}else{
		config->Error.Standard_Error = 1;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}

	if(config->Data_Length == I2S_Data_Length._16_bit){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7a9b      	ldrb	r3, [r3, #10]
 80006a2:	461a      	mov	r2, r3
 80006a4:	2301      	movs	r3, #1
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d108      	bne.n	80006bc <I2S_Init+0x160>
		config->Port->I2SCFGR &= ~(3<<1);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f022 0206 	bic.w	r2, r2, #6
 80006b8:	61da      	str	r2, [r3, #28]
 80006ba:	e01d      	b.n	80006f8 <I2S_Init+0x19c>
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7a9b      	ldrb	r3, [r3, #10]
 80006c0:	461a      	mov	r2, r3
 80006c2:	2302      	movs	r3, #2
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d106      	bne.n	80006d6 <I2S_Init+0x17a>
		config->Port->I2SCFGR |= (1<1);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	69d2      	ldr	r2, [r2, #28]
 80006d2:	61da      	str	r2, [r3, #28]
 80006d4:	e010      	b.n	80006f8 <I2S_Init+0x19c>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a9b      	ldrb	r3, [r3, #10]
 80006da:	461a      	mov	r2, r3
 80006dc:	2303      	movs	r3, #3
 80006de:	429a      	cmp	r2, r3
 80006e0:	d106      	bne.n	80006f0 <I2S_Init+0x194>
		config->Port->I2SCFGR |= (2<1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	69d2      	ldr	r2, [r2, #28]
 80006ec:	61da      	str	r2, [r3, #28]
 80006ee:	e003      	b.n	80006f8 <I2S_Init+0x19c>
	}else{
		config->Error.Data_Len_Error = 1;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2201      	movs	r2, #1
 80006f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7adb      	ldrb	r3, [r3, #11]
 80006fc:	461a      	mov	r2, r3
 80006fe:	2301      	movs	r3, #1
 8000700:	429a      	cmp	r2, r3
 8000702:	d108      	bne.n	8000716 <I2S_Init+0x1ba>
		config->Port->I2SCFGR &= ~(1<<0);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 0201 	bic.w	r2, r2, #1
 8000712:	61da      	str	r2, [r3, #28]
 8000714:	e00e      	b.n	8000734 <I2S_Init+0x1d8>
	}else if(config->Channel_Length == I2S_Channel_Length._16_bit){
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7adb      	ldrb	r3, [r3, #11]
 800071a:	461a      	mov	r2, r3
 800071c:	2301      	movs	r3, #1
 800071e:	429a      	cmp	r2, r3
 8000720:	d104      	bne.n	800072c <I2S_Init+0x1d0>
		config->Port->I2SCFGR =  (1<<0);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2201      	movs	r2, #1
 8000728:	61da      	str	r2, [r3, #28]
 800072a:	e003      	b.n	8000734 <I2S_Init+0x1d8>
	}else{
		config->Error.Channel_Length_Error = 1;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}

	//  I2S Enable
	config->Port->I2SCFGR |= 1 << 10;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	69da      	ldr	r2, [r3, #28]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000742:	61da      	str	r2, [r3, #28]





	return 1;
 8000744:	2301      	movs	r3, #1

}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40003800 	.word	0x40003800
 8000754:	40023800 	.word	0x40023800

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007bc:	d301      	bcc.n	80007c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007be:	2301      	movs	r3, #1
 80007c0:	e00f      	b.n	80007e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <SysTick_Config+0x40>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ca:	210f      	movs	r1, #15
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f7ff ffc2 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <SysTick_Config+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007da:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <SysTick_Config+0x40>)
 80007dc:	2207      	movs	r2, #7
 80007de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010

080007f0 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 80007fa:	23a8      	movs	r3, #168	@ 0xa8
 80007fc:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8000802:	2307      	movs	r3, #7
 8000804:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8000806:	4b3d      	ldr	r3, [pc, #244]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800080c:	4b3b      	ldr	r3, [pc, #236]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a3a      	ldr	r2, [pc, #232]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000816:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8000818:	bf00      	nop
 800081a:	4b38      	ldr	r3, [pc, #224]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8000826:	4b35      	ldr	r3, [pc, #212]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a34      	ldr	r2, [pc, #208]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8000832:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <MCU_Clock_Setup+0x110>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a32      	ldr	r2, [pc, #200]	@ (8000900 <MCU_Clock_Setup+0x110>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083c:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800083e:	4b31      	ldr	r3, [pc, #196]	@ (8000904 <MCU_Clock_Setup+0x114>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a30      	ldr	r2, [pc, #192]	@ (8000904 <MCU_Clock_Setup+0x114>)
 8000844:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000848:	f043 0305 	orr.w	r3, r3, #5
 800084c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800084e:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	793a      	ldrb	r2, [r7, #4]
 8000854:	0611      	lsls	r1, r2, #24
 8000856:	797a      	ldrb	r2, [r7, #5]
 8000858:	0412      	lsls	r2, r2, #16
 800085a:	4311      	orrs	r1, r2
 800085c:	79ba      	ldrb	r2, [r7, #6]
 800085e:	0192      	lsls	r2, r2, #6
 8000860:	4311      	orrs	r1, r2
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	430a      	orrs	r2, r1
 8000866:	4611      	mov	r1, r2
 8000868:	4a24      	ldr	r2, [pc, #144]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 800086a:	430b      	orrs	r3, r1
 800086c:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800086e:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	4a22      	ldr	r2, [pc, #136]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000878:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800087a:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 800087c:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000882:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	4a1d      	ldr	r2, [pc, #116]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000888:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800088c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4a1a      	ldr	r2, [pc, #104]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 8000894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000898:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 80008a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008a4:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80008a6:	bf00      	nop
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f9      	beq.n	80008a8 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4a10      	ldr	r2, [pc, #64]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 80008ba:	f043 0302 	orr.w	r3, r3, #2
 80008be:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80008c0:	bf00      	nop
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d1f9      	bne.n	80008c2 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 80008ce:	f000 f853 	bl	8000978 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MCU_Clock_Setup+0x118>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	08db      	lsrs	r3, r3, #3
 80008d8:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <MCU_Clock_Setup+0x11c>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff63 	bl	80007ac <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <MCU_Clock_Setup+0x10c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000
 8000904:	40023c00 	.word	0x40023c00
 8000908:	20000000 	.word	0x20000000
 800090c:	18618619 	.word	0x18618619

08000910 <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8000914:	f7ff ff6c 	bl	80007f0 <MCU_Clock_Setup>


	INMP441_I2S.Port = I2S_Port.I2S2;
 8000918:	4a0c      	ldr	r2, [pc, #48]	@ (800094c <main+0x3c>)
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <main+0x40>)
 800091c:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 800091e:	2206      	movs	r2, #6
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <main+0x40>)
 8000922:	731a      	strb	r2, [r3, #12]

	INMP441_I2S.Full_Duplex.Enable = true;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <main+0x40>)
 8000926:	2201      	movs	r2, #1
 8000928:	735a      	strb	r2, [r3, #13]
	INMP441_I2S.Full_Duplex.mode = I2S_Mode.Master.Transmit;
 800092a:	2201      	movs	r2, #1
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <main+0x40>)
 800092e:	739a      	strb	r2, [r3, #14]
	INMP441_I2S.Full_Duplex.MCK_Pin = I2S_MCK_Pin.I2S2.Disable;
 8000930:	22ff      	movs	r2, #255	@ 0xff
 8000932:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <main+0x40>)
 8000934:	73da      	strb	r2, [r3, #15]
	INMP441_I2S.Full_Duplex.EXT_SD = I2S_ext_SD_Pin.I2S2.PC02;
 8000936:	22ca      	movs	r2, #202	@ 0xca
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <main+0x40>)
 800093a:	74da      	strb	r2, [r3, #19]
	INMP441_I2S.Full_Duplex.SCK_Pin = I2S_SCK_Pin.I2S2.PB10;
 800093c:	22d2      	movs	r2, #210	@ 0xd2
 800093e:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <main+0x40>)
 8000940:	741a      	strb	r2, [r3, #16]

	I2S_Init(&INMP441_I2S);
 8000942:	4803      	ldr	r0, [pc, #12]	@ (8000950 <main+0x40>)
 8000944:	f7ff fe0a 	bl	800055c <I2S_Init>




    /* Loop forever */
	for(;;);
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <main+0x38>
 800094c:	40003800 	.word	0x40003800
 8000950:	20000020 	.word	0x20000020

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	@ (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	2302      	movs	r3, #2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	2302      	movs	r3, #2
 8000990:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000992:	4b34      	ldr	r3, [pc, #208]	@ (8000a64 <SystemCoreClockUpdate+0xec>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f003 030c 	and.w	r3, r3, #12
 800099a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	2b08      	cmp	r3, #8
 80009a0:	d011      	beq.n	80009c6 <SystemCoreClockUpdate+0x4e>
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d844      	bhi.n	8000a32 <SystemCoreClockUpdate+0xba>
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <SystemCoreClockUpdate+0x3e>
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d004      	beq.n	80009be <SystemCoreClockUpdate+0x46>
 80009b4:	e03d      	b.n	8000a32 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <SystemCoreClockUpdate+0xf0>)
 80009b8:	4a2c      	ldr	r2, [pc, #176]	@ (8000a6c <SystemCoreClockUpdate+0xf4>)
 80009ba:	601a      	str	r2, [r3, #0]
      break;
 80009bc:	e03d      	b.n	8000a3a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80009be:	4b2a      	ldr	r3, [pc, #168]	@ (8000a68 <SystemCoreClockUpdate+0xf0>)
 80009c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a70 <SystemCoreClockUpdate+0xf8>)
 80009c2:	601a      	str	r2, [r3, #0]
      break;
 80009c4:	e039      	b.n	8000a3a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009c6:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <SystemCoreClockUpdate+0xec>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	0d9b      	lsrs	r3, r3, #22
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009d2:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <SystemCoreClockUpdate+0xec>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009da:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00c      	beq.n	80009fc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009e2:	4a23      	ldr	r2, [pc, #140]	@ (8000a70 <SystemCoreClockUpdate+0xf8>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000a64 <SystemCoreClockUpdate+0xec>)
 80009ec:	6852      	ldr	r2, [r2, #4]
 80009ee:	0992      	lsrs	r2, r2, #6
 80009f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009f4:	fb02 f303 	mul.w	r3, r2, r3
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e00b      	b.n	8000a14 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <SystemCoreClockUpdate+0xf4>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	4a17      	ldr	r2, [pc, #92]	@ (8000a64 <SystemCoreClockUpdate+0xec>)
 8000a06:	6852      	ldr	r2, [r2, #4]
 8000a08:	0992      	lsrs	r2, r2, #6
 8000a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <SystemCoreClockUpdate+0xec>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	0c1b      	lsrs	r3, r3, #16
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	3301      	adds	r3, #1
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <SystemCoreClockUpdate+0xf0>)
 8000a2e:	6013      	str	r3, [r2, #0]
      break;
 8000a30:	e003      	b.n	8000a3a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <SystemCoreClockUpdate+0xf0>)
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <SystemCoreClockUpdate+0xf4>)
 8000a36:	601a      	str	r2, [r3, #0]
      break;
 8000a38:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <SystemCoreClockUpdate+0xec>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 030f 	and.w	r3, r3, #15
 8000a44:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <SystemCoreClockUpdate+0xfc>)
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <SystemCoreClockUpdate+0xf0>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	fa22 f303 	lsr.w	r3, r2, r3
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <SystemCoreClockUpdate+0xf0>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	371c      	adds	r7, #28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	00f42400 	.word	0x00f42400
 8000a70:	007a1200 	.word	0x007a1200
 8000a74:	08000b2c 	.word	0x08000b2c

08000a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a78:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a7c:	f7ff ff6a 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa6:	f000 f811 	bl	8000acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff ff31 	bl	8000910 <main>

08000aae <LoopForever>:

LoopForever:
  b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   r0, =_estack
 8000ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000abc:	08000b44 	.word	0x08000b44
  ldr r2, =_sbss
 8000ac0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ac4:	20000044 	.word	0x20000044

08000ac8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <__libc_init_array>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	4d0d      	ldr	r5, [pc, #52]	@ (8000b04 <__libc_init_array+0x38>)
 8000ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8000b08 <__libc_init_array+0x3c>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d109      	bne.n	8000af0 <__libc_init_array+0x24>
 8000adc:	4d0b      	ldr	r5, [pc, #44]	@ (8000b0c <__libc_init_array+0x40>)
 8000ade:	4c0c      	ldr	r4, [pc, #48]	@ (8000b10 <__libc_init_array+0x44>)
 8000ae0:	f000 f818 	bl	8000b14 <_init>
 8000ae4:	1b64      	subs	r4, r4, r5
 8000ae6:	10a4      	asrs	r4, r4, #2
 8000ae8:	2600      	movs	r6, #0
 8000aea:	42a6      	cmp	r6, r4
 8000aec:	d105      	bne.n	8000afa <__libc_init_array+0x2e>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af4:	4798      	blx	r3
 8000af6:	3601      	adds	r6, #1
 8000af8:	e7ee      	b.n	8000ad8 <__libc_init_array+0xc>
 8000afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afe:	4798      	blx	r3
 8000b00:	3601      	adds	r6, #1
 8000b02:	e7f2      	b.n	8000aea <__libc_init_array+0x1e>
 8000b04:	08000b3c 	.word	0x08000b3c
 8000b08:	08000b3c 	.word	0x08000b3c
 8000b0c:	08000b3c 	.word	0x08000b3c
 8000b10:	08000b40 	.word	0x08000b40

08000b14 <_init>:
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	bf00      	nop
 8000b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1a:	bc08      	pop	{r3}
 8000b1c:	469e      	mov	lr, r3
 8000b1e:	4770      	bx	lr

08000b20 <_fini>:
 8000b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b22:	bf00      	nop
 8000b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b26:	bc08      	pop	{r3}
 8000b28:	469e      	mov	lr, r3
 8000b2a:	4770      	bx	lr
