
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08001f98  08001f98  00002f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020bc  080020bc  00004054  2**0
                  CONTENTS
  4 .ARM          00000008  080020bc  080020bc  000030bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020c4  080020c4  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c4  080020c4  000030c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020c8  080020c8  000030c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080020cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004054  2**0
                  CONTENTS
 10 .bss          000002f8  20000054  20000054  00004054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00004054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073ea  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c2f  00000000  00000000  0000b46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  0000c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000178  00000000  00000000  0000c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a445  00000000  00000000  0000c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000042fa  00000000  00000000  00026875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f23f  00000000  00000000  0002ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b9dae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bec  00000000  00000000  000b9df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000ba9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f80 	.word	0x08001f80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001f80 	.word	0x08001f80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <printConsole>:
	 serial.RX_Pin = USART1_RX_Pin.PA10;
	 USART_Init(&serial);
}

 void printConsole(char *msg, ...)
{
 8000280:	b40f      	push	{r0, r1, r2, r3}
 8000282:	b580      	push	{r7, lr}
 8000284:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 800028c:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000290:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000294:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000298:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 800029c:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800029e:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002a2:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	3b14      	subs	r3, #20
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 80002b2:	f101 0120 	add.w	r1, r1, #32
 80002b6:	6809      	ldr	r1, [r1, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 f9df 	bl	800167c <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 80002be:	2300      	movs	r3, #0
 80002c0:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80002c4:	f102 0214 	add.w	r2, r2, #20
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e020      	b.n	800030e <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 80002cc:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002d0:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 80002d4:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80002d8:	f103 0314 	add.w	r3, r3, #20
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <printConsole+0xc0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 80002e8:	bf00      	nop
 80002ea:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <printConsole+0xc0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 80002f8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80002fc:	f103 0314 	add.w	r3, r3, #20
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000308:	f102 0214 	add.w	r2, r2, #20
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	3b14      	subs	r3, #20
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff5b 	bl	80001d0 <strlen>
 800031a:	4603      	mov	r3, r0
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000322:	f103 0314 	add.w	r3, r3, #20
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d2cf      	bcs.n	80002cc <printConsole+0x4c>
	}
}
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr
 8000340:	20000070 	.word	0x20000070

08000344 <DMA_Clock_Enable>:
 * DMA_Config structure.
 * 
 * @param config Pointer to the DMA configuration structure.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	if(config->controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0c      	ldr	r2, [pc, #48]	@ (8000384 <DMA_Clock_Enable+0x40>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d105      	bne.n	8000362 <DMA_Clock_Enable+0x1e>
 8000356:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <DMA_Clock_Enable+0x44>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	4a0b      	ldr	r2, [pc, #44]	@ (8000388 <DMA_Clock_Enable+0x44>)
 800035c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000360:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config->controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a09      	ldr	r2, [pc, #36]	@ (800038c <DMA_Clock_Enable+0x48>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d105      	bne.n	8000378 <DMA_Clock_Enable+0x34>
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <DMA_Clock_Enable+0x44>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <DMA_Clock_Enable+0x44>)
 8000372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40026000 	.word	0x40026000
 8000388:	40023800 	.word	0x40023800
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_Init>:
 * 
 * @param config Pointer to the DMA configuration structure.
 */

void DMA_Init(DMA_Config *config)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f7ff ffd3 	bl	8000344 <DMA_Clock_Enable>
	config -> stream -> CR |= config -> channel << DMA_SxCR_CHSEL_Pos;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	6819      	ldr	r1, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	065a      	lsls	r2, r3, #25
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> circular_mode;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	6819      	ldr	r1, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6a1a      	ldr	r2, [r3, #32]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	430a      	orrs	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> flow_control;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> priority_level;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	6819      	ldr	r1, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	695a      	ldr	r2, [r3, #20]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	430a      	orrs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_data_size;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	69da      	ldr	r2, [r3, #28]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_data_size;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	6819      	ldr	r1, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	699a      	ldr	r2, [r3, #24]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	430a      	orrs	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> transfer_direction;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	691a      	ldr	r2, [r3, #16]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	430a      	orrs	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> interrupts;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	430a      	orrs	r2, r1
 800042e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_pointer_increment;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800043a:	4619      	mov	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	430a      	orrs	r2, r1
 8000442:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_pointer_increment;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800044e:	4619      	mov	r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 800046a:	2201      	movs	r2, #1
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	461a      	mov	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	615a      	str	r2, [r3, #20]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a25      	ldr	r2, [pc, #148]	@ (8000524 <GPIO_Clock_Enable+0xa0>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000494:	4b24      	ldr	r3, [pc, #144]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000498:	4a23      	ldr	r2, [pc, #140]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 800049a:	f043 0301 	orr.w	r3, r3, #1
 800049e:	6313      	str	r3, [r2, #48]	@ 0x30
 80004a0:	e039      	b.n	8000516 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a21      	ldr	r2, [pc, #132]	@ (800052c <GPIO_Clock_Enable+0xa8>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80004aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004b0:	f043 0302 	orr.w	r3, r3, #2
 80004b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004b6:	e02e      	b.n	8000516 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000530 <GPIO_Clock_Enable+0xac>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80004c0:	4b19      	ldr	r3, [pc, #100]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a18      	ldr	r2, [pc, #96]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80004cc:	e023      	b.n	8000516 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a18      	ldr	r2, [pc, #96]	@ (8000534 <GPIO_Clock_Enable+0xb0>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80004d6:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a13      	ldr	r2, [pc, #76]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004dc:	f043 0308 	orr.w	r3, r3, #8
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80004e2:	e018      	b.n	8000516 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <GPIO_Clock_Enable+0xb4>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80004f8:	e00d      	b.n	8000516 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a0f      	ldr	r2, [pc, #60]	@ (800053c <GPIO_Clock_Enable+0xb8>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000502:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a08      	ldr	r2, [pc, #32]	@ (8000528 <GPIO_Clock_Enable+0xa4>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
 800050e:	e002      	b.n	8000516 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000510:	f04f 33ff 	mov.w	r3, #4294967295
 8000514:	e000      	b.n	8000518 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40020000 	.word	0x40020000
 8000528:	40023800 	.word	0x40023800
 800052c:	40020400 	.word	0x40020400
 8000530:	40020800 	.word	0x40020800
 8000534:	40020c00 	.word	0x40020c00
 8000538:	40021000 	.word	0x40021000
 800053c:	40021c00 	.word	0x40021c00

08000540 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	4608      	mov	r0, r1
 800054a:	4611      	mov	r1, r2
 800054c:	461a      	mov	r2, r3
 800054e:	4603      	mov	r3, r0
 8000550:	70fb      	strb	r3, [r7, #3]
 8000552:	460b      	mov	r3, r1
 8000554:	70bb      	strb	r3, [r7, #2]
 8000556:	4613      	mov	r3, r2
 8000558:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff ff92 	bl	8000484 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	78b9      	ldrb	r1, [r7, #2]
 8000566:	78fa      	ldrb	r2, [r7, #3]
 8000568:	0052      	lsls	r2, r2, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	7879      	ldrb	r1, [r7, #1]
 800057a:	78fa      	ldrb	r2, [r7, #3]
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	431a      	orrs	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	7c39      	ldrb	r1, [r7, #16]
 800058c:	78fa      	ldrb	r2, [r7, #3]
 800058e:	0052      	lsls	r2, r2, #1
 8000590:	fa01 f202 	lsl.w	r2, r1, r2
 8000594:	431a      	orrs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	7d39      	ldrb	r1, [r7, #20]
 80005a0:	78fa      	ldrb	r2, [r7, #3]
 80005a2:	0052      	lsls	r2, r2, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	431a      	orrs	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	2b07      	cmp	r3, #7
 80005b2:	d80a      	bhi.n	80005ca <GPIO_Pin_Init+0x8a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	7e39      	ldrb	r1, [r7, #24]
 80005ba:	78fa      	ldrb	r2, [r7, #3]
 80005bc:	0092      	lsls	r2, r2, #2
 80005be:	fa01 f202 	lsl.w	r2, r1, r2
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80005c8:	e00a      	b.n	80005e0 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ce:	7e39      	ldrb	r1, [r7, #24]
 80005d0:	78fa      	ldrb	r2, [r7, #3]
 80005d2:	3a08      	subs	r2, #8
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	431a      	orrs	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SCK_PIN_INIT2>:




static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af04      	add	r7, sp, #16
 80005ee:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7c1b      	ldrb	r3, [r3, #16]
 80005f4:	22d2      	movs	r2, #210	@ 0xd2
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d10e      	bne.n	8000618 <SCK_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80005fa:	2002      	movs	r0, #2
 80005fc:	2400      	movs	r4, #0
 80005fe:	2303      	movs	r3, #3
 8000600:	2200      	movs	r2, #0
 8000602:	2105      	movs	r1, #5
 8000604:	9102      	str	r1, [sp, #8]
 8000606:	9201      	str	r2, [sp, #4]
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	4623      	mov	r3, r4
 800060c:	4602      	mov	r2, r0
 800060e:	210a      	movs	r1, #10
 8000610:	4811      	ldr	r0, [pc, #68]	@ (8000658 <SCK_PIN_INIT2+0x70>)
 8000612:	f7ff ff95 	bl	8000540 <GPIO_Pin_Init>
 8000616:	e019      	b.n	800064c <SCK_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7c1b      	ldrb	r3, [r3, #16]
 800061c:	22d5      	movs	r2, #213	@ 0xd5
 800061e:	4293      	cmp	r3, r2
 8000620:	d10e      	bne.n	8000640 <SCK_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000622:	2002      	movs	r0, #2
 8000624:	2400      	movs	r4, #0
 8000626:	2303      	movs	r3, #3
 8000628:	2200      	movs	r2, #0
 800062a:	2105      	movs	r1, #5
 800062c:	9102      	str	r1, [sp, #8]
 800062e:	9201      	str	r2, [sp, #4]
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	4623      	mov	r3, r4
 8000634:	4602      	mov	r2, r0
 8000636:	210d      	movs	r1, #13
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <SCK_PIN_INIT2+0x70>)
 800063a:	f7ff ff81 	bl	8000540 <GPIO_Pin_Init>
 800063e:	e005      	b.n	800064c <SCK_PIN_INIT2+0x64>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	77da      	strb	r2, [r3, #31]
		return -1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	e000      	b.n	800064e <SCK_PIN_INIT2+0x66>
	}
	return 1;
 800064c:	2301      	movs	r3, #1
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	bf00      	nop
 8000658:	40020400 	.word	0x40020400

0800065c <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b087      	sub	sp, #28
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7c9b      	ldrb	r3, [r3, #18]
 8000668:	22d1      	movs	r2, #209	@ 0xd1
 800066a:	4293      	cmp	r3, r2
 800066c:	d10e      	bne.n	800068c <WS_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800066e:	2002      	movs	r0, #2
 8000670:	2400      	movs	r4, #0
 8000672:	2303      	movs	r3, #3
 8000674:	2200      	movs	r2, #0
 8000676:	2105      	movs	r1, #5
 8000678:	9102      	str	r1, [sp, #8]
 800067a:	9201      	str	r2, [sp, #4]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4623      	mov	r3, r4
 8000680:	4602      	mov	r2, r0
 8000682:	2109      	movs	r1, #9
 8000684:	4811      	ldr	r0, [pc, #68]	@ (80006cc <WS_PIN_INIT2+0x70>)
 8000686:	f7ff ff5b 	bl	8000540 <GPIO_Pin_Init>
 800068a:	e019      	b.n	80006c0 <WS_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	7c9b      	ldrb	r3, [r3, #18]
 8000690:	22d4      	movs	r2, #212	@ 0xd4
 8000692:	4293      	cmp	r3, r2
 8000694:	d10e      	bne.n	80006b4 <WS_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000696:	2002      	movs	r0, #2
 8000698:	2400      	movs	r4, #0
 800069a:	2303      	movs	r3, #3
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	9102      	str	r1, [sp, #8]
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4623      	mov	r3, r4
 80006a8:	4602      	mov	r2, r0
 80006aa:	210c      	movs	r1, #12
 80006ac:	4807      	ldr	r0, [pc, #28]	@ (80006cc <WS_PIN_INIT2+0x70>)
 80006ae:	f7ff ff47 	bl	8000540 <GPIO_Pin_Init>
 80006b2:	e005      	b.n	80006c0 <WS_PIN_INIT2+0x64>
	}
	else{
		config->Error.WS_Pin_Error = true;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	779a      	strb	r2, [r3, #30]
		return -1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e000      	b.n	80006c2 <WS_PIN_INIT2+0x66>
	}
	return 1;
 80006c0:	2301      	movs	r3, #1
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020400 	.word	0x40020400

080006d0 <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7c5b      	ldrb	r3, [r3, #17]
 80006dc:	22d5      	movs	r2, #213	@ 0xd5
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10e      	bne.n	8000700 <SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80006e2:	2002      	movs	r0, #2
 80006e4:	2400      	movs	r4, #0
 80006e6:	2303      	movs	r3, #3
 80006e8:	2200      	movs	r2, #0
 80006ea:	2105      	movs	r1, #5
 80006ec:	9102      	str	r1, [sp, #8]
 80006ee:	9201      	str	r2, [sp, #4]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4623      	mov	r3, r4
 80006f4:	4602      	mov	r2, r0
 80006f6:	210f      	movs	r1, #15
 80006f8:	4811      	ldr	r0, [pc, #68]	@ (8000740 <SD_PIN_Init2+0x70>)
 80006fa:	f7ff ff21 	bl	8000540 <GPIO_Pin_Init>
 80006fe:	e019      	b.n	8000734 <SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7c5b      	ldrb	r3, [r3, #17]
 8000704:	22df      	movs	r2, #223	@ 0xdf
 8000706:	4293      	cmp	r3, r2
 8000708:	d10e      	bne.n	8000728 <SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800070a:	2002      	movs	r0, #2
 800070c:	2400      	movs	r4, #0
 800070e:	2303      	movs	r3, #3
 8000710:	2200      	movs	r2, #0
 8000712:	2105      	movs	r1, #5
 8000714:	9102      	str	r1, [sp, #8]
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4623      	mov	r3, r4
 800071c:	4602      	mov	r2, r0
 800071e:	2103      	movs	r1, #3
 8000720:	4808      	ldr	r0, [pc, #32]	@ (8000744 <SD_PIN_Init2+0x74>)
 8000722:	f7ff ff0d 	bl	8000540 <GPIO_Pin_Init>
 8000726:	e005      	b.n	8000734 <SD_PIN_Init2+0x64>
	}
	else{
		config->Error.SD_Pin_Error = true;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2201      	movs	r2, #1
 800072c:	775a      	strb	r2, [r3, #29]
		return -1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	e000      	b.n	8000736 <SD_PIN_Init2+0x66>
	}
	return 1;
 8000734:	2301      	movs	r3, #1
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	bf00      	nop
 8000740:	40020400 	.word	0x40020400
 8000744:	40020800 	.word	0x40020800

08000748 <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b087      	sub	sp, #28
 800074c:	af04      	add	r7, sp, #16
 800074e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7bdb      	ldrb	r3, [r3, #15]
 8000754:	22ff      	movs	r2, #255	@ 0xff
 8000756:	4293      	cmp	r3, r2
 8000758:	d01a      	beq.n	8000790 <MCK_PIN_Init2+0x48>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7bdb      	ldrb	r3, [r3, #15]
 800075e:	2225      	movs	r2, #37	@ 0x25
 8000760:	4293      	cmp	r3, r2
 8000762:	d10e      	bne.n	8000782 <MCK_PIN_Init2+0x3a>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000764:	2002      	movs	r0, #2
 8000766:	2400      	movs	r4, #0
 8000768:	2303      	movs	r3, #3
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	9102      	str	r1, [sp, #8]
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4623      	mov	r3, r4
 8000776:	4602      	mov	r2, r0
 8000778:	2107      	movs	r1, #7
 800077a:	4808      	ldr	r0, [pc, #32]	@ (800079c <MCK_PIN_Init2+0x54>)
 800077c:	f7ff fee0 	bl	8000540 <GPIO_Pin_Init>
 8000780:	e006      	b.n	8000790 <MCK_PIN_Init2+0x48>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2201      	movs	r2, #1
 8000786:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	e000      	b.n	8000792 <MCK_PIN_Init2+0x4a>
		}
	}
	return 1;
 8000790:	2301      	movs	r3, #1
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	bf00      	nop
 800079c:	40020800 	.word	0x40020800

080007a0 <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af04      	add	r7, sp, #16
 80007a6:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7cdb      	ldrb	r3, [r3, #19]
 80007ac:	22d6      	movs	r2, #214	@ 0xd6
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10e      	bne.n	80007d0 <EXT_SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80007b2:	2002      	movs	r0, #2
 80007b4:	2400      	movs	r4, #0
 80007b6:	2303      	movs	r3, #3
 80007b8:	2200      	movs	r2, #0
 80007ba:	2105      	movs	r1, #5
 80007bc:	9102      	str	r1, [sp, #8]
 80007be:	9201      	str	r2, [sp, #4]
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4623      	mov	r3, r4
 80007c4:	4602      	mov	r2, r0
 80007c6:	210e      	movs	r1, #14
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <EXT_SD_PIN_Init2+0x70>)
 80007ca:	f7ff feb9 	bl	8000540 <GPIO_Pin_Init>
 80007ce:	e019      	b.n	8000804 <EXT_SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7cdb      	ldrb	r3, [r3, #19]
 80007d4:	22ca      	movs	r2, #202	@ 0xca
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d10e      	bne.n	80007f8 <EXT_SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80007da:	2002      	movs	r0, #2
 80007dc:	2400      	movs	r4, #0
 80007de:	2303      	movs	r3, #3
 80007e0:	2200      	movs	r2, #0
 80007e2:	2105      	movs	r1, #5
 80007e4:	9102      	str	r1, [sp, #8]
 80007e6:	9201      	str	r2, [sp, #4]
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	4623      	mov	r3, r4
 80007ec:	4602      	mov	r2, r0
 80007ee:	2102      	movs	r1, #2
 80007f0:	4808      	ldr	r0, [pc, #32]	@ (8000814 <EXT_SD_PIN_Init2+0x74>)
 80007f2:	f7ff fea5 	bl	8000540 <GPIO_Pin_Init>
 80007f6:	e005      	b.n	8000804 <EXT_SD_PIN_Init2+0x64>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2201      	movs	r2, #1
 80007fc:	771a      	strb	r2, [r3, #28]
		return -1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e000      	b.n	8000806 <EXT_SD_PIN_Init2+0x66>
	}
	return 1;
 8000804:	2301      	movs	r3, #1
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	bf00      	nop
 8000810:	40020400 	.word	0x40020400
 8000814:	40020800 	.word	0x40020800

08000818 <I2S_Init>:



/********************************************************************************************************/
int8_t I2S_Init(I2S_Config *config)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a90      	ldr	r2, [pc, #576]	@ (8000a68 <I2S_Init+0x250>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d119      	bne.n	800085e <I2S_Init+0x46>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800082a:	4b90      	ldr	r3, [pc, #576]	@ (8000a6c <I2S_Init+0x254>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	4a8f      	ldr	r2, [pc, #572]	@ (8000a6c <I2S_Init+0x254>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6413      	str	r3, [r2, #64]	@ 0x40

		SD_PIN_Init2(config);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff4a 	bl	80006d0 <SD_PIN_Init2>
		WS_PIN_INIT2(config);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff0d 	bl	800065c <WS_PIN_INIT2>
		SCK_PIN_INIT2(config);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fed0 	bl	80005e8 <SCK_PIN_INIT2>
		MCK_PIN_Init2(config);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff7d 	bl	8000748 <MCK_PIN_Init2>
		if(config->Full_Duplex.Enable == true){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7b5b      	ldrb	r3, [r3, #13]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d012      	beq.n	800087c <I2S_Init+0x64>
			EXT_SD_PIN_Init2(config);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa2 	bl	80007a0 <EXT_SD_PIN_Init2>
 800085c:	e00e      	b.n	800087c <I2S_Init+0x64>





	}else if(config->Port == I2S_Port.I2S3)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a83      	ldr	r2, [pc, #524]	@ (8000a70 <I2S_Init+0x258>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d106      	bne.n	8000876 <I2S_Init+0x5e>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000868:	4b80      	ldr	r3, [pc, #512]	@ (8000a6c <I2S_Init+0x254>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a7f      	ldr	r2, [pc, #508]	@ (8000a6c <I2S_Init+0x254>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	e002      	b.n	800087c <I2S_Init+0x64>

	}else{

		config->Error.Port_Error = true;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2201      	movs	r2, #1
 800087a:	769a      	strb	r2, [r3, #26]

	}



	config->Port->I2SCFGR |= 1 << 11;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	69da      	ldr	r2, [r3, #28]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800088a:	61da      	str	r2, [r3, #28]


	// I2S Mode
	if(config->Full_Duplex.mode == I2S_Mode.Master.Transmit){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7b9b      	ldrb	r3, [r3, #14]
 8000890:	2201      	movs	r2, #1
 8000892:	4293      	cmp	r3, r2
 8000894:	d108      	bne.n	80008a8 <I2S_Init+0x90>
		config->Port->I2SCFGR |= 2 << 8;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80008a4:	61da      	str	r2, [r3, #28]
 80008a6:	e028      	b.n	80008fa <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Master.Receive){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b9b      	ldrb	r3, [r3, #14]
 80008ac:	2202      	movs	r2, #2
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d108      	bne.n	80008c4 <I2S_Init+0xac>
		config->Port->I2SCFGR |= 3 << 8;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80008c0:	61da      	str	r2, [r3, #28]
 80008c2:	e01a      	b.n	80008fa <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Transmit){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7b9b      	ldrb	r3, [r3, #14]
 80008c8:	2203      	movs	r2, #3
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d108      	bne.n	80008e0 <I2S_Init+0xc8>
		config->Port->I2SCFGR &= ~(3 << 8);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	69da      	ldr	r2, [r3, #28]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80008dc:	61da      	str	r2, [r3, #28]
 80008de:	e00c      	b.n	80008fa <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Receive){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7b9b      	ldrb	r3, [r3, #14]
 80008e4:	2204      	movs	r2, #4
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d107      	bne.n	80008fa <I2S_Init+0xe2>
		config->Port->I2SCFGR |= (1 << 8);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	69da      	ldr	r2, [r3, #28]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80008f8:	61da      	str	r2, [r3, #28]
	}

	// Standard
	if(config->Standard == I2S_Standard.Standard_Philips){
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7a5b      	ldrb	r3, [r3, #9]
 80008fe:	461a      	mov	r2, r3
 8000900:	2301      	movs	r3, #1
 8000902:	429a      	cmp	r2, r3
 8000904:	d108      	bne.n	8000918 <I2S_Init+0x100>
		config->Port->I2SCFGR &= ~(3 << 4);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8000914:	61da      	str	r2, [r3, #28]
 8000916:	e030      	b.n	800097a <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a5b      	ldrb	r3, [r3, #9]
 800091c:	461a      	mov	r2, r3
 800091e:	2302      	movs	r3, #2
 8000920:	429a      	cmp	r2, r3
 8000922:	d108      	bne.n	8000936 <I2S_Init+0x11e>
		config->Port->I2SCFGR |= (1 << 4);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 0210 	orr.w	r2, r2, #16
 8000932:	61da      	str	r2, [r3, #28]
 8000934:	e021      	b.n	800097a <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7a5b      	ldrb	r3, [r3, #9]
 800093a:	461a      	mov	r2, r3
 800093c:	2303      	movs	r3, #3
 800093e:	429a      	cmp	r2, r3
 8000940:	d108      	bne.n	8000954 <I2S_Init+0x13c>
		config->Port->I2SCFGR |= (2 << 4);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f042 0220 	orr.w	r2, r2, #32
 8000950:	61da      	str	r2, [r3, #28]
 8000952:	e012      	b.n	800097a <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.PCM){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7a5b      	ldrb	r3, [r3, #9]
 8000958:	461a      	mov	r2, r3
 800095a:	2304      	movs	r3, #4
 800095c:	429a      	cmp	r2, r3
 800095e:	d108      	bne.n	8000972 <I2S_Init+0x15a>
		config->Port->I2SCFGR |= (3 << 4);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	69da      	ldr	r2, [r3, #28]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800096e:	61da      	str	r2, [r3, #28]
 8000970:	e003      	b.n	800097a <I2S_Init+0x162>
	}else{
		config->Error.Standard_Error  = true;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}

	if(config->Data_Length == I2S_Data_Length._16_bit){
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a9b      	ldrb	r3, [r3, #10]
 800097e:	461a      	mov	r2, r3
 8000980:	2301      	movs	r3, #1
 8000982:	429a      	cmp	r2, r3
 8000984:	d108      	bne.n	8000998 <I2S_Init+0x180>
		config->Port->I2SCFGR &= ~(3<<1);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	69da      	ldr	r2, [r3, #28]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0206 	bic.w	r2, r2, #6
 8000994:	61da      	str	r2, [r3, #28]
 8000996:	e01d      	b.n	80009d4 <I2S_Init+0x1bc>
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a9b      	ldrb	r3, [r3, #10]
 800099c:	461a      	mov	r2, r3
 800099e:	2302      	movs	r3, #2
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d106      	bne.n	80009b2 <I2S_Init+0x19a>
		config->Port->I2SCFGR |= (1<1);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	69d2      	ldr	r2, [r2, #28]
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	e010      	b.n	80009d4 <I2S_Init+0x1bc>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7a9b      	ldrb	r3, [r3, #10]
 80009b6:	461a      	mov	r2, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d106      	bne.n	80009cc <I2S_Init+0x1b4>
		config->Port->I2SCFGR |= (2<1);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	69d2      	ldr	r2, [r2, #28]
 80009c8:	61da      	str	r2, [r3, #28]
 80009ca:	e003      	b.n	80009d4 <I2S_Init+0x1bc>
	}else{
		config->Error.Data_Len_Error = true;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2201      	movs	r2, #1
 80009d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7adb      	ldrb	r3, [r3, #11]
 80009d8:	461a      	mov	r2, r3
 80009da:	2301      	movs	r3, #1
 80009dc:	429a      	cmp	r2, r3
 80009de:	d108      	bne.n	80009f2 <I2S_Init+0x1da>
		config->Port->I2SCFGR &= ~(1<<0);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	69da      	ldr	r2, [r3, #28]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0201 	bic.w	r2, r2, #1
 80009ee:	61da      	str	r2, [r3, #28]
 80009f0:	e00e      	b.n	8000a10 <I2S_Init+0x1f8>
	}else if(config->Channel_Length == I2S_Channel_Length._16_bit){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7adb      	ldrb	r3, [r3, #11]
 80009f6:	461a      	mov	r2, r3
 80009f8:	2301      	movs	r3, #1
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d104      	bne.n	8000a08 <I2S_Init+0x1f0>
		config->Port->I2SCFGR =  (1<<0);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2201      	movs	r2, #1
 8000a04:	61da      	str	r2, [r3, #28]
 8000a06:	e003      	b.n	8000a10 <I2S_Init+0x1f8>
	}else{
		config->Error.Channel_Length_Error = true;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}


	int plli2s_n = 128;
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
	int plli2s_r = 5;
 8000a14:	2305      	movs	r3, #5
 8000a16:	60bb      	str	r3, [r7, #8]
	if(config->Audio_Frequency == I2S_Audio_Frequency._8000KHz)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7b1b      	ldrb	r3, [r3, #12]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d128      	bne.n	8000a74 <I2S_Init+0x25c>
	{
		//
		  plli2s_n = 64;
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000a26:	2305      	movs	r3, #5
 8000a28:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	019a      	lsls	r2, r3, #6
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	071b      	lsls	r3, r3, #28
 8000a32:	431a      	orrs	r2, r3
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <I2S_Init+0x254>)
 8000a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <I2S_Init+0x254>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <I2S_Init+0x254>)
 8000a40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a44:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000a46:	bf00      	nop
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <I2S_Init+0x254>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f9      	beq.n	8000a48 <I2S_Init+0x230>
		config->Port->I2SPR |= 50;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6a1a      	ldr	r2, [r3, #32]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8000a62:	621a      	str	r2, [r3, #32]
 8000a64:	e0e3      	b.n	8000c2e <I2S_Init+0x416>
 8000a66:	bf00      	nop
 8000a68:	40003800 	.word	0x40003800
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40003c00 	.word	0x40003c00
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._16000Hz)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7b1b      	ldrb	r3, [r3, #12]
 8000a78:	2202      	movs	r2, #2
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d121      	bne.n	8000ac2 <I2S_Init+0x2aa>
	{
		//
		  plli2s_n = 128;
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000a82:	2305      	movs	r3, #5
 8000a84:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	019a      	lsls	r2, r3, #6
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	071b      	lsls	r3, r3, #28
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	4b6f      	ldr	r3, [pc, #444]	@ (8000c50 <I2S_Init+0x438>)
 8000a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000a96:	4b6e      	ldr	r3, [pc, #440]	@ (8000c50 <I2S_Init+0x438>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8000c50 <I2S_Init+0x438>)
 8000a9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000aa0:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000aa2:	bf00      	nop
 8000aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8000c50 <I2S_Init+0x438>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f9      	beq.n	8000aa4 <I2S_Init+0x28c>
		config->Port->I2SPR |= 50;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6a1a      	ldr	r2, [r3, #32]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8000abe:	621a      	str	r2, [r3, #32]
 8000ac0:	e0b5      	b.n	8000c2e <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._22050Hz)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7b1b      	ldrb	r3, [r3, #12]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	f000 80b0 	beq.w	8000c2e <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._32000Hz)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7b1b      	ldrb	r3, [r3, #12]
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d121      	bne.n	8000b1c <I2S_Init+0x304>
	{
		//
		  plli2s_n = 64;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000adc:	2305      	movs	r3, #5
 8000ade:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	019a      	lsls	r2, r3, #6
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	071b      	lsls	r3, r3, #28
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4b59      	ldr	r3, [pc, #356]	@ (8000c50 <I2S_Init+0x438>)
 8000aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000af0:	4b57      	ldr	r3, [pc, #348]	@ (8000c50 <I2S_Init+0x438>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a56      	ldr	r2, [pc, #344]	@ (8000c50 <I2S_Init+0x438>)
 8000af6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000afa:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000afc:	bf00      	nop
 8000afe:	4b54      	ldr	r3, [pc, #336]	@ (8000c50 <I2S_Init+0x438>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f9      	beq.n	8000afe <I2S_Init+0x2e6>
		config->Port->I2SPR |= 12;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6a1a      	ldr	r2, [r3, #32]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 020c 	orr.w	r2, r2, #12
 8000b18:	621a      	str	r2, [r3, #32]
 8000b1a:	e088      	b.n	8000c2e <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._44100Hz)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7b1b      	ldrb	r3, [r3, #12]
 8000b20:	2205      	movs	r2, #5
 8000b22:	4293      	cmp	r3, r2
 8000b24:	f000 8083 	beq.w	8000c2e <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._48000Hz)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7b1b      	ldrb	r3, [r3, #12]
 8000b2c:	2206      	movs	r2, #6
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d121      	bne.n	8000b76 <I2S_Init+0x35e>
	{
		//
		  plli2s_n = 96;
 8000b32:	2360      	movs	r3, #96	@ 0x60
 8000b34:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000b36:	2305      	movs	r3, #5
 8000b38:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	019a      	lsls	r2, r3, #6
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	071b      	lsls	r3, r3, #28
 8000b42:	431a      	orrs	r2, r3
 8000b44:	4b42      	ldr	r3, [pc, #264]	@ (8000c50 <I2S_Init+0x438>)
 8000b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000b4a:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <I2S_Init+0x438>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <I2S_Init+0x438>)
 8000b50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b54:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000b56:	bf00      	nop
 8000b58:	4b3d      	ldr	r3, [pc, #244]	@ (8000c50 <I2S_Init+0x438>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f9      	beq.n	8000b58 <I2S_Init+0x340>
		config->Port->I2SPR |= 12;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a1a      	ldr	r2, [r3, #32]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 020c 	orr.w	r2, r2, #12
 8000b72:	621a      	str	r2, [r3, #32]
 8000b74:	e05b      	b.n	8000c2e <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._64000Hz)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7b1b      	ldrb	r3, [r3, #12]
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d121      	bne.n	8000bc4 <I2S_Init+0x3ac>
	{
		//
		  plli2s_n = 128;
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000b84:	2305      	movs	r3, #5
 8000b86:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	019a      	lsls	r2, r3, #6
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	071b      	lsls	r3, r3, #28
 8000b90:	431a      	orrs	r2, r3
 8000b92:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <I2S_Init+0x438>)
 8000b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000b98:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <I2S_Init+0x438>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c50 <I2S_Init+0x438>)
 8000b9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ba2:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000ba4:	bf00      	nop
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <I2S_Init+0x438>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f9      	beq.n	8000ba6 <I2S_Init+0x38e>
		config->Port->I2SPR |= 12;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6a1a      	ldr	r2, [r3, #32]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 020c 	orr.w	r2, r2, #12
 8000bc0:	621a      	str	r2, [r3, #32]
 8000bc2:	e034      	b.n	8000c2e <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._96000Hz)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7b1b      	ldrb	r3, [r3, #12]
 8000bc8:	2208      	movs	r2, #8
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d121      	bne.n	8000c12 <I2S_Init+0x3fa>
	{
		//
		  plli2s_n = 192;
 8000bce:	23c0      	movs	r3, #192	@ 0xc0
 8000bd0:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	019a      	lsls	r2, r3, #6
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	071b      	lsls	r3, r3, #28
 8000bde:	431a      	orrs	r2, r3
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <I2S_Init+0x438>)
 8000be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <I2S_Init+0x438>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <I2S_Init+0x438>)
 8000bec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bf0:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000bf2:	bf00      	nop
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <I2S_Init+0x438>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f9      	beq.n	8000bf4 <I2S_Init+0x3dc>
		config->Port->I2SPR |= 12;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6a1a      	ldr	r2, [r3, #32]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 020c 	orr.w	r2, r2, #12
 8000c0e:	621a      	str	r2, [r3, #32]
 8000c10:	e00d      	b.n	8000c2e <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._192000Hz)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7b1b      	ldrb	r3, [r3, #12]
 8000c16:	2209      	movs	r2, #9
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d008      	beq.n	8000c2e <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._384000Hz)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7b1b      	ldrb	r3, [r3, #12]
 8000c20:	220a      	movs	r2, #10
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d003      	beq.n	8000c2e <I2S_Init+0x416>
	{
		//
	}else
	{
		config->Error.Audio_Frequency_Error = true;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	//  I2S Enable
	config->Port->I2SCFGR |= 1 << 10;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c3c:	61da      	str	r2, [r3, #28]


	I2S_Mode_Set(config);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 f878 	bl	8000d34 <I2S_Mode_Set>

	return 1;
 8000c44:	2301      	movs	r3, #1

}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <I2S_Print_Errors>:
/********************************************************************************************************/
/********************************************************************************************************/
void I2S_Print_Errors(I2S_Config *config)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if(config->Error.Audio_Frequency_Error) printConsole("Audio_Frequency_Error \r\n");
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <I2S_Print_Errors+0x18>
 8000c66:	4828      	ldr	r0, [pc, #160]	@ (8000d08 <I2S_Print_Errors+0xb4>)
 8000c68:	f7ff fb0a 	bl	8000280 <printConsole>
	if(config->Error.Channel_Length_Error) printConsole("Channel_Length_Error \r\n");
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <I2S_Print_Errors+0x28>
 8000c76:	4825      	ldr	r0, [pc, #148]	@ (8000d0c <I2S_Print_Errors+0xb8>)
 8000c78:	f7ff fb02 	bl	8000280 <printConsole>
	if(config->Error.Data_Len_Error) printConsole("Data_Len_Error \r\n");
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <I2S_Print_Errors+0x38>
 8000c86:	4822      	ldr	r0, [pc, #136]	@ (8000d10 <I2S_Print_Errors+0xbc>)
 8000c88:	f7ff fafa 	bl	8000280 <printConsole>
	if(config->Error.Ext_SD_Pin_Error) printConsole("Ext_SD_Pin_Error \r\n");
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7f1b      	ldrb	r3, [r3, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <I2S_Print_Errors+0x46>
 8000c94:	481f      	ldr	r0, [pc, #124]	@ (8000d14 <I2S_Print_Errors+0xc0>)
 8000c96:	f7ff faf3 	bl	8000280 <printConsole>
	if(config->Error.MCK_PIN_Error) printConsole("MCK_PIN_Error \r\n");
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <I2S_Print_Errors+0x56>
 8000ca4:	481c      	ldr	r0, [pc, #112]	@ (8000d18 <I2S_Print_Errors+0xc4>)
 8000ca6:	f7ff faeb 	bl	8000280 <printConsole>
	if(config->Error.Mode_Error) printConsole("Mode_Error \r\n");
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7edb      	ldrb	r3, [r3, #27]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <I2S_Print_Errors+0x64>
 8000cb2:	481a      	ldr	r0, [pc, #104]	@ (8000d1c <I2S_Print_Errors+0xc8>)
 8000cb4:	f7ff fae4 	bl	8000280 <printConsole>
	if(config->Error.Port_Error) printConsole("Port_Error \r\n");
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7e9b      	ldrb	r3, [r3, #26]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <I2S_Print_Errors+0x72>
 8000cc0:	4817      	ldr	r0, [pc, #92]	@ (8000d20 <I2S_Print_Errors+0xcc>)
 8000cc2:	f7ff fadd 	bl	8000280 <printConsole>
	if(config->Error.SCK_Pin_Error) printConsole("SCK_Pin_Error \r\n");
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7fdb      	ldrb	r3, [r3, #31]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <I2S_Print_Errors+0x80>
 8000cce:	4815      	ldr	r0, [pc, #84]	@ (8000d24 <I2S_Print_Errors+0xd0>)
 8000cd0:	f7ff fad6 	bl	8000280 <printConsole>
	if(config->Error.SD_Pin_Error) printConsole("SD_Pin_Error \r\n");
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7f5b      	ldrb	r3, [r3, #29]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <I2S_Print_Errors+0x8e>
 8000cdc:	4812      	ldr	r0, [pc, #72]	@ (8000d28 <I2S_Print_Errors+0xd4>)
 8000cde:	f7ff facf 	bl	8000280 <printConsole>
	if(config->Error.Standard_Error) printConsole("Standard_Error \r\n");
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <I2S_Print_Errors+0x9e>
 8000cec:	480f      	ldr	r0, [pc, #60]	@ (8000d2c <I2S_Print_Errors+0xd8>)
 8000cee:	f7ff fac7 	bl	8000280 <printConsole>
	if(config->Error.WS_Pin_Error) printConsole("WS_Pin_Error \r\n");
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7f9b      	ldrb	r3, [r3, #30]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <I2S_Print_Errors+0xac>
 8000cfa:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <I2S_Print_Errors+0xdc>)
 8000cfc:	f7ff fac0 	bl	8000280 <printConsole>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08001f98 	.word	0x08001f98
 8000d0c:	08001fb4 	.word	0x08001fb4
 8000d10:	08001fcc 	.word	0x08001fcc
 8000d14:	08001fe0 	.word	0x08001fe0
 8000d18:	08001ff4 	.word	0x08001ff4
 8000d1c:	08002008 	.word	0x08002008
 8000d20:	08002018 	.word	0x08002018
 8000d24:	08002028 	.word	0x08002028
 8000d28:	0800203c 	.word	0x0800203c
 8000d2c:	0800204c 	.word	0x0800204c
 8000d30:	08002060 	.word	0x08002060

08000d34 <I2S_Mode_Set>:


}
/********************************************************************************************************/
int8_t I2S_Mode_Set(I2S_Config *config)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	if(config->Port == I2S_Port.I2S2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a93      	ldr	r2, [pc, #588]	@ (8000f94 <I2S_Mode_Set+0x260>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	f040 8202 	bne.w	8001150 <I2S_Mode_Set+0x41c>
	{
		if(config->Full_Duplex.Enable == ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7b5b      	ldrb	r3, [r3, #13]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 8155 	beq.w	8001000 <I2S_Mode_Set+0x2cc>
		{
			if((config->Full_Duplex.mode == I2S_Mode.Master.Receive) || config->Full_Duplex.mode == I2S_Mode.Slave.Receive)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7b9b      	ldrb	r3, [r3, #14]
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d005      	beq.n	8000d6c <I2S_Mode_Set+0x38>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7b9b      	ldrb	r3, [r3, #14]
 8000d64:	2204      	movs	r2, #4
 8000d66:	4293      	cmp	r3, r2
 8000d68:	f040 808f 	bne.w	8000e8a <I2S_Mode_Set+0x156>
			{
				I2S2_DMA_Full_Duplex.Receiver.RX.channel = 0;
 8000d6c:	4b8a      	ldr	r3, [pc, #552]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
				I2S2_DMA_Full_Duplex.Receiver.RX.stream = DMA1_Stream3;
 8000d72:	4b89      	ldr	r3, [pc, #548]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000d74:	4a89      	ldr	r2, [pc, #548]	@ (8000f9c <I2S_Mode_Set+0x268>)
 8000d76:	605a      	str	r2, [r3, #4]
				I2S2_DMA_Full_Duplex.Receiver.RX.circular_mode = DMA_Circular_Mode.Disable;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4b87      	ldr	r3, [pc, #540]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000d7c:	621a      	str	r2, [r3, #32]
				I2S2_DMA_Full_Duplex.Receiver.RX.controller = DMA1;
 8000d7e:	4b86      	ldr	r3, [pc, #536]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000d80:	4a87      	ldr	r2, [pc, #540]	@ (8000fa0 <I2S_Mode_Set+0x26c>)
 8000d82:	601a      	str	r2, [r3, #0]
				I2S2_DMA_Full_Duplex.Receiver.RX.flow_control = DMA_Flow_Control.DMA_Control;
 8000d84:	2200      	movs	r2, #0
 8000d86:	4b84      	ldr	r3, [pc, #528]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000d88:	60da      	str	r2, [r3, #12]
				I2S2_DMA_Full_Duplex.Receiver.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	4a81      	ldr	r2, [pc, #516]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000d92:	6253      	str	r3, [r2, #36]	@ 0x24
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7a9b      	ldrb	r3, [r3, #10]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d108      	bne.n	8000db2 <I2S_Mode_Set+0x7e>
				{
					I2S2_DMA_Full_Duplex.Receiver.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000da0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000da4:	4b7c      	ldr	r3, [pc, #496]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000da6:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000da8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dac:	4b7a      	ldr	r3, [pc, #488]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000dae:	619a      	str	r2, [r3, #24]
 8000db0:	e013      	b.n	8000dda <I2S_Mode_Set+0xa6>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7a9b      	ldrb	r3, [r3, #10]
 8000db6:	461a      	mov	r2, r3
 8000db8:	2302      	movs	r3, #2
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d005      	beq.n	8000dca <I2S_Mode_Set+0x96>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a9b      	ldrb	r3, [r3, #10]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d107      	bne.n	8000dda <I2S_Mode_Set+0xa6>
				{
					I2S2_DMA_Full_Duplex.Receiver.RX.memory_data_size = DMA_Memory_Data_Size.word;
 8000dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dce:	4b72      	ldr	r3, [pc, #456]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000dd0:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000dd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dd6:	4b70      	ldr	r3, [pc, #448]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000dd8:	619a      	str	r2, [r3, #24]
				}
				I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b6e      	ldr	r3, [pc, #440]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000de0:	869a      	strh	r2, [r3, #52]	@ 0x34
				I2S2_DMA_Full_Duplex.Receiver.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000dea:	865a      	strh	r2, [r3, #50]	@ 0x32
				I2S2_DMA_Full_Duplex.Receiver.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8000dec:	2200      	movs	r2, #0
 8000dee:	4b6a      	ldr	r3, [pc, #424]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000df0:	611a      	str	r2, [r3, #16]

				DMA_Init(&I2S2_DMA_Full_Duplex.Receiver.RX);
 8000df2:	4869      	ldr	r0, [pc, #420]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000df4:	f7ff facc 	bl	8000390 <DMA_Init>

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

				I2S2_DMA_Full_Duplex.Receiver.TX.channel = 2;
 8000df8:	4b67      	ldr	r3, [pc, #412]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	641a      	str	r2, [r3, #64]	@ 0x40
				I2S2_DMA_Full_Duplex.Receiver.TX.stream = DMA1_Stream4;
 8000dfe:	4b66      	ldr	r3, [pc, #408]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e00:	4a68      	ldr	r2, [pc, #416]	@ (8000fa4 <I2S_Mode_Set+0x270>)
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
				I2S2_DMA_Full_Duplex.Receiver.TX.circular_mode = DMA_Circular_Mode.Disable;
 8000e04:	2200      	movs	r2, #0
 8000e06:	4b64      	ldr	r3, [pc, #400]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e08:	659a      	str	r2, [r3, #88]	@ 0x58
				I2S2_DMA_Full_Duplex.Receiver.TX.controller = DMA1;
 8000e0a:	4b63      	ldr	r3, [pc, #396]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e0c:	4a64      	ldr	r2, [pc, #400]	@ (8000fa0 <I2S_Mode_Set+0x26c>)
 8000e0e:	639a      	str	r2, [r3, #56]	@ 0x38
				I2S2_DMA_Full_Duplex.Receiver.TX.flow_control = DMA_Flow_Control.DMA_Control;
 8000e10:	2200      	movs	r2, #0
 8000e12:	4b61      	ldr	r3, [pc, #388]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e14:	645a      	str	r2, [r3, #68]	@ 0x44
				I2S2_DMA_Full_Duplex.Receiver.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000e16:	2208      	movs	r2, #8
 8000e18:	2310      	movs	r3, #16
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e1e:	65d3      	str	r3, [r2, #92]	@ 0x5c
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7a9b      	ldrb	r3, [r3, #10]
 8000e24:	461a      	mov	r2, r3
 8000e26:	2301      	movs	r3, #1
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d108      	bne.n	8000e3e <I2S_Mode_Set+0x10a>
				{
					I2S2_DMA_Full_Duplex.Receiver.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000e2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e30:	4b59      	ldr	r3, [pc, #356]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e32:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000e34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e38:	4b57      	ldr	r3, [pc, #348]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8000e3c:	e013      	b.n	8000e66 <I2S_Mode_Set+0x132>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7a9b      	ldrb	r3, [r3, #10]
 8000e42:	461a      	mov	r2, r3
 8000e44:	2302      	movs	r3, #2
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d005      	beq.n	8000e56 <I2S_Mode_Set+0x122>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7a9b      	ldrb	r3, [r3, #10]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2303      	movs	r3, #3
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d107      	bne.n	8000e66 <I2S_Mode_Set+0x132>
				{
					I2S2_DMA_Full_Duplex.Receiver.TX.memory_data_size = DMA_Memory_Data_Size.word;
 8000e56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e5c:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000e5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e62:	4b4d      	ldr	r3, [pc, #308]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e64:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000e66:	2300      	movs	r3, #0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e6c:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
				I2S2_DMA_Full_Duplex.Receiver.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b48      	ldr	r3, [pc, #288]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
				I2S2_DMA_Full_Duplex.Receiver.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 8000e7c:	2240      	movs	r2, #64	@ 0x40
 8000e7e:	4b46      	ldr	r3, [pc, #280]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000e80:	649a      	str	r2, [r3, #72]	@ 0x48
				DMA_Init(&I2S2_DMA_Full_Duplex.Receiver.TX);
 8000e82:	4849      	ldr	r0, [pc, #292]	@ (8000fa8 <I2S_Mode_Set+0x274>)
 8000e84:	f7ff fa84 	bl	8000390 <DMA_Init>
 8000e88:	e0ba      	b.n	8001000 <I2S_Mode_Set+0x2cc>
			}

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

			else if((config->Full_Duplex.mode == I2S_Mode.Master.Transmit) || config->Full_Duplex.mode == I2S_Mode.Slave.Transmit)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7b9b      	ldrb	r3, [r3, #14]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d005      	beq.n	8000ea0 <I2S_Mode_Set+0x16c>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7b9b      	ldrb	r3, [r3, #14]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	f040 80b0 	bne.w	8001000 <I2S_Mode_Set+0x2cc>
			{
				I2S2_DMA_Full_Duplex.Transmitter.RX.channel = 0;
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	679a      	str	r2, [r3, #120]	@ 0x78
				I2S2_DMA_Full_Duplex.Transmitter.RX.stream = DMA1_Stream4;
 8000ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8000fa4 <I2S_Mode_Set+0x270>)
 8000eaa:	675a      	str	r2, [r3, #116]	@ 0x74
				I2S2_DMA_Full_Duplex.Transmitter.RX.circular_mode = DMA_Circular_Mode.Disable;
 8000eac:	2200      	movs	r2, #0
 8000eae:	4b3a      	ldr	r3, [pc, #232]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
				I2S2_DMA_Full_Duplex.Transmitter.RX.controller = DMA1;
 8000eb4:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa0 <I2S_Mode_Set+0x26c>)
 8000eb8:	671a      	str	r2, [r3, #112]	@ 0x70
				I2S2_DMA_Full_Duplex.Transmitter.RX.flow_control = DMA_Flow_Control.DMA_Control;
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000ebe:	67da      	str	r2, [r3, #124]	@ 0x7c
				I2S2_DMA_Full_Duplex.Transmitter.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000ec8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7a9b      	ldrb	r3, [r3, #10]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10a      	bne.n	8000eee <I2S_Mode_Set+0x1ba>
				{
					I2S2_DMA_Full_Duplex.Transmitter.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000ed8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000edc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
					I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000ee2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000eec:	e015      	b.n	8000f1a <I2S_Mode_Set+0x1e6>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7a9b      	ldrb	r3, [r3, #10]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d005      	beq.n	8000f06 <I2S_Mode_Set+0x1d2>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7a9b      	ldrb	r3, [r3, #10]
 8000efe:	461a      	mov	r2, r3
 8000f00:	2303      	movs	r3, #3
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d109      	bne.n	8000f1a <I2S_Mode_Set+0x1e6>
				{
					I2S2_DMA_Full_Duplex.Transmitter.RX.memory_data_size = DMA_Memory_Data_Size.word;
 8000f06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
					I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000f10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f14:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
				}
				I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f20:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
				I2S2_DMA_Full_Duplex.Transmitter.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f2c:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
				I2S2_DMA_Full_Duplex.Transmitter.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8000f30:	2200      	movs	r2, #0
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

				DMA_Init(&I2S2_DMA_Full_Duplex.Transmitter.RX);
 8000f38:	481c      	ldr	r0, [pc, #112]	@ (8000fac <I2S_Mode_Set+0x278>)
 8000f3a:	f7ff fa29 	bl	8000390 <DMA_Init>

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

				I2S2_DMA_Full_Duplex.Transmitter.TX.channel = 2;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
				I2S2_DMA_Full_Duplex.Transmitter.TX.stream = DMA1_Stream3;
 8000f46:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <I2S_Mode_Set+0x268>)
 8000f4a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
				I2S2_DMA_Full_Duplex.Transmitter.TX.circular_mode = DMA_Circular_Mode.Disable;
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f52:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
				I2S2_DMA_Full_Duplex.Transmitter.TX.controller = DMA1;
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f58:	4a11      	ldr	r2, [pc, #68]	@ (8000fa0 <I2S_Mode_Set+0x26c>)
 8000f5a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				I2S2_DMA_Full_Duplex.Transmitter.TX.flow_control = DMA_Flow_Control.DMA_Control;
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f62:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				I2S2_DMA_Full_Duplex.Transmitter.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000f66:	2208      	movs	r2, #8
 8000f68:	2310      	movs	r3, #16
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f6e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7a9b      	ldrb	r3, [r3, #10]
 8000f76:	461a      	mov	r2, r3
 8000f78:	2301      	movs	r3, #1
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d118      	bne.n	8000fb0 <I2S_Mode_Set+0x27c>
				{
					I2S2_DMA_Full_Duplex.Transmitter.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000f7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f82:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f84:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000f88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f8c:	4b02      	ldr	r3, [pc, #8]	@ (8000f98 <I2S_Mode_Set+0x264>)
 8000f8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8000f92:	e023      	b.n	8000fdc <I2S_Mode_Set+0x2a8>
 8000f94:	40003800 	.word	0x40003800
 8000f98:	20000088 	.word	0x20000088
 8000f9c:	40026058 	.word	0x40026058
 8000fa0:	40026000 	.word	0x40026000
 8000fa4:	40026070 	.word	0x40026070
 8000fa8:	200000c0 	.word	0x200000c0
 8000fac:	200000f8 	.word	0x200000f8
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7a9b      	ldrb	r3, [r3, #10]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d005      	beq.n	8000fc8 <I2S_Mode_Set+0x294>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7a9b      	ldrb	r3, [r3, #10]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d109      	bne.n	8000fdc <I2S_Mode_Set+0x2a8>
				{
					I2S2_DMA_Full_Duplex.Transmitter.TX.memory_data_size = DMA_Memory_Data_Size.word;
 8000fc8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fcc:	4b67      	ldr	r3, [pc, #412]	@ (800116c <I2S_Mode_Set+0x438>)
 8000fce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000fd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fd6:	4b65      	ldr	r3, [pc, #404]	@ (800116c <I2S_Mode_Set+0x438>)
 8000fd8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
				}
				I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b62      	ldr	r3, [pc, #392]	@ (800116c <I2S_Mode_Set+0x438>)
 8000fe2:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
				I2S2_DMA_Full_Duplex.Transmitter.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b5f      	ldr	r3, [pc, #380]	@ (800116c <I2S_Mode_Set+0x438>)
 8000fee:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
				I2S2_DMA_Full_Duplex.Transmitter.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 8000ff2:	2240      	movs	r2, #64	@ 0x40
 8000ff4:	4b5d      	ldr	r3, [pc, #372]	@ (800116c <I2S_Mode_Set+0x438>)
 8000ff6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
				DMA_Init(&I2S2_DMA_Full_Duplex.Transmitter.TX);
 8000ffa:	485d      	ldr	r0, [pc, #372]	@ (8001170 <I2S_Mode_Set+0x43c>)
 8000ffc:	f7ff f9c8 	bl	8000390 <DMA_Init>
			}



		}
		if(config->Half_Duplex.Enable == ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7d1b      	ldrb	r3, [r3, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a3 	beq.w	8001150 <I2S_Mode_Set+0x41c>
		{
			if((config->Half_Duplex.mode == I2S_Mode.Master.Receive) || config->Half_Duplex.mode == I2S_Mode.Slave.Receive)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7d5b      	ldrb	r3, [r3, #21]
 800100e:	2202      	movs	r2, #2
 8001010:	4293      	cmp	r3, r2
 8001012:	d004      	beq.n	800101e <I2S_Mode_Set+0x2ea>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7d5b      	ldrb	r3, [r3, #21]
 8001018:	2204      	movs	r2, #4
 800101a:	4293      	cmp	r3, r2
 800101c:	d146      	bne.n	80010ac <I2S_Mode_Set+0x378>
			{
				I2S2_DMA_Half_Duplex.RX.channel = 0;
 800101e:	4b55      	ldr	r3, [pc, #340]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
				I2S2_DMA_Half_Duplex.RX.stream = DMA1_Stream3;
 8001024:	4b53      	ldr	r3, [pc, #332]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001026:	4a54      	ldr	r2, [pc, #336]	@ (8001178 <I2S_Mode_Set+0x444>)
 8001028:	605a      	str	r2, [r3, #4]
				I2S2_DMA_Half_Duplex.RX.circular_mode = DMA_Circular_Mode.Disable;
 800102a:	2200      	movs	r2, #0
 800102c:	4b51      	ldr	r3, [pc, #324]	@ (8001174 <I2S_Mode_Set+0x440>)
 800102e:	621a      	str	r2, [r3, #32]
				I2S2_DMA_Half_Duplex.RX.controller = DMA1;
 8001030:	4b50      	ldr	r3, [pc, #320]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001032:	4a52      	ldr	r2, [pc, #328]	@ (800117c <I2S_Mode_Set+0x448>)
 8001034:	601a      	str	r2, [r3, #0]
				I2S2_DMA_Half_Duplex.RX.flow_control = DMA_Flow_Control.DMA_Control;
 8001036:	2200      	movs	r2, #0
 8001038:	4b4e      	ldr	r3, [pc, #312]	@ (8001174 <I2S_Mode_Set+0x440>)
 800103a:	60da      	str	r2, [r3, #12]
				I2S2_DMA_Half_Duplex.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 800103c:	2208      	movs	r2, #8
 800103e:	2310      	movs	r3, #16
 8001040:	4313      	orrs	r3, r2
 8001042:	4a4c      	ldr	r2, [pc, #304]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001044:	6253      	str	r3, [r2, #36]	@ 0x24
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	429a      	cmp	r2, r3
 8001050:	d108      	bne.n	8001064 <I2S_Mode_Set+0x330>
				{
					I2S2_DMA_Half_Duplex.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8001052:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001056:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001058:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Half_Duplex.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 800105a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800105e:	4b45      	ldr	r3, [pc, #276]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001060:	619a      	str	r2, [r3, #24]
 8001062:	e013      	b.n	800108c <I2S_Mode_Set+0x358>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7a9b      	ldrb	r3, [r3, #10]
 8001068:	461a      	mov	r2, r3
 800106a:	2302      	movs	r3, #2
 800106c:	429a      	cmp	r2, r3
 800106e:	d005      	beq.n	800107c <I2S_Mode_Set+0x348>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7a9b      	ldrb	r3, [r3, #10]
 8001074:	461a      	mov	r2, r3
 8001076:	2303      	movs	r3, #3
 8001078:	429a      	cmp	r2, r3
 800107a:	d107      	bne.n	800108c <I2S_Mode_Set+0x358>
				{
					I2S2_DMA_Half_Duplex.RX.memory_data_size = DMA_Memory_Data_Size.word;
 800107c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001080:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001082:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Half_Duplex.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8001084:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001088:	4b3a      	ldr	r3, [pc, #232]	@ (8001174 <I2S_Mode_Set+0x440>)
 800108a:	619a      	str	r2, [r3, #24]
				}
				I2S2_DMA_Half_Duplex.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 800108c:	2300      	movs	r3, #0
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001092:	869a      	strh	r2, [r3, #52]	@ 0x34
				I2S2_DMA_Half_Duplex.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <I2S_Mode_Set+0x440>)
 800109c:	865a      	strh	r2, [r3, #50]	@ 0x32
				I2S2_DMA_Half_Duplex.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 800109e:	2200      	movs	r2, #0
 80010a0:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010a2:	611a      	str	r2, [r3, #16]

				DMA_Init(&I2S2_DMA_Half_Duplex.RX);
 80010a4:	4833      	ldr	r0, [pc, #204]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010a6:	f7ff f973 	bl	8000390 <DMA_Init>
 80010aa:	e051      	b.n	8001150 <I2S_Mode_Set+0x41c>
			}
			else if((config->Half_Duplex.mode == I2S_Mode.Master.Transmit) || config->Half_Duplex.mode == I2S_Mode.Slave.Transmit)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7d5b      	ldrb	r3, [r3, #21]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d004      	beq.n	80010c0 <I2S_Mode_Set+0x38c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7d5b      	ldrb	r3, [r3, #21]
 80010ba:	2203      	movs	r2, #3
 80010bc:	4293      	cmp	r3, r2
 80010be:	d147      	bne.n	8001150 <I2S_Mode_Set+0x41c>
			{
				I2S2_DMA_Half_Duplex.TX.channel = 0;
 80010c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40
				I2S2_DMA_Half_Duplex.TX.stream = DMA1_Stream4;
 80010c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001180 <I2S_Mode_Set+0x44c>)
 80010ca:	63da      	str	r2, [r3, #60]	@ 0x3c
				I2S2_DMA_Half_Duplex.TX.circular_mode = DMA_Circular_Mode.Disable;
 80010cc:	2200      	movs	r2, #0
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010d0:	659a      	str	r2, [r3, #88]	@ 0x58
				I2S2_DMA_Half_Duplex.TX.controller = DMA1;
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010d4:	4a29      	ldr	r2, [pc, #164]	@ (800117c <I2S_Mode_Set+0x448>)
 80010d6:	639a      	str	r2, [r3, #56]	@ 0x38
				I2S2_DMA_Half_Duplex.TX.flow_control = DMA_Flow_Control.DMA_Control;
 80010d8:	2200      	movs	r2, #0
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010dc:	645a      	str	r2, [r3, #68]	@ 0x44
				I2S2_DMA_Half_Duplex.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 80010de:	2208      	movs	r2, #8
 80010e0:	2310      	movs	r3, #16
 80010e2:	4313      	orrs	r3, r2
 80010e4:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010e6:	65d3      	str	r3, [r2, #92]	@ 0x5c
				if(config->Data_Length == I2S_Data_Length._16_bit)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a9b      	ldrb	r3, [r3, #10]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2301      	movs	r3, #1
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d108      	bne.n	8001106 <I2S_Mode_Set+0x3d2>
				{
					I2S2_DMA_Half_Duplex.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 80010f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <I2S_Mode_Set+0x440>)
 80010fa:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Half_Duplex.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 80010fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001102:	651a      	str	r2, [r3, #80]	@ 0x50
 8001104:	e013      	b.n	800112e <I2S_Mode_Set+0x3fa>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7a9b      	ldrb	r3, [r3, #10]
 800110a:	461a      	mov	r2, r3
 800110c:	2302      	movs	r3, #2
 800110e:	429a      	cmp	r2, r3
 8001110:	d005      	beq.n	800111e <I2S_Mode_Set+0x3ea>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7a9b      	ldrb	r3, [r3, #10]
 8001116:	461a      	mov	r2, r3
 8001118:	2303      	movs	r3, #3
 800111a:	429a      	cmp	r2, r3
 800111c:	d107      	bne.n	800112e <I2S_Mode_Set+0x3fa>
				{
					I2S2_DMA_Half_Duplex.TX.memory_data_size = DMA_Memory_Data_Size.word;
 800111e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001124:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Half_Duplex.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8001126:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <I2S_Mode_Set+0x440>)
 800112c:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				I2S2_DMA_Half_Duplex.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 800112e:	2300      	movs	r3, #0
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001134:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
				I2S2_DMA_Half_Duplex.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
				I2S2_DMA_Half_Duplex.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 8001144:	2240      	movs	r2, #64	@ 0x40
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <I2S_Mode_Set+0x440>)
 8001148:	649a      	str	r2, [r3, #72]	@ 0x48

				DMA_Init(&I2S2_DMA_Half_Duplex.TX);
 800114a:	480e      	ldr	r0, [pc, #56]	@ (8001184 <I2S_Mode_Set+0x450>)
 800114c:	f7ff f920 	bl	8000390 <DMA_Init>
	}
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
	if(config->Port == I2S_Port.I2S3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <I2S_Mode_Set+0x454>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d001      	beq.n	800115e <I2S_Mode_Set+0x42a>
	{

	}
	else
	{
		retval = -1;
 800115a:	23ff      	movs	r3, #255	@ 0xff
 800115c:	73fb      	strb	r3, [r7, #15]
	}


	return retval;
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000088 	.word	0x20000088
 8001170:	20000130 	.word	0x20000130
 8001174:	20000168 	.word	0x20000168
 8001178:	40026058 	.word	0x40026058
 800117c:	40026000 	.word	0x40026000
 8001180:	40026070 	.word	0x40026070
 8001184:	200001a0 	.word	0x200001a0
 8001188:	40003c00 	.word	0x40003c00

0800118c <I2S_Read_Data>:


uint32_t I2S_Read_Data(I2S_Config *config)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	uint32_t retval = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
	if(config->Channel_Length == I2S_Channel_Length._16_bit)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7adb      	ldrb	r3, [r3, #11]
 800119c:	461a      	mov	r2, r3
 800119e:	2301      	movs	r3, #1
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d10c      	bne.n	80011be <I2S_Read_Data+0x32>
	{
		while(!(config -> Port -> SR & SPI_SR_CHSIDE)){}
 80011a4:	bf00      	nop
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f8      	beq.n	80011a6 <I2S_Read_Data+0x1a>
		retval =   (config -> Port -> DR);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	e016      	b.n	80011ec <I2S_Read_Data+0x60>
	}
	else if(config->Channel_Length == I2S_Channel_Length._32_bit)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7adb      	ldrb	r3, [r3, #11]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2303      	movs	r3, #3
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d110      	bne.n	80011ec <I2S_Read_Data+0x60>
	{
		while(!(config -> Port -> SR & SPI_SR_CHSIDE)){}
 80011ca:	bf00      	nop
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f8      	beq.n	80011cc <I2S_Read_Data+0x40>
		retval =   ((config -> Port -> DR) << 16) | ((config -> Port -> DR));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
	}

	return retval;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <I2S_Select_Left_Channel>:

void I2S_Select_Left_Channel(I2S_Config *config)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->LR_Pin_Port, config->LR_Pin_Number);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7a1b      	ldrb	r3, [r3, #8]
 800120a:	4619      	mov	r1, r3
 800120c:	4610      	mov	r0, r2
 800120e:	f7ff f927 	bl	8000460 <GPIO_Pin_High>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ffc2 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 80012ba:	2304      	movs	r3, #4
 80012bc:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 80012be:	23a8      	movs	r3, #168	@ 0xa8
 80012c0:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 80012c6:	2307      	movs	r3, #7
 80012c8:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 80012ca:	4b3d      	ldr	r3, [pc, #244]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80012d0:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a3a      	ldr	r2, [pc, #232]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80012dc:	bf00      	nop
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f9      	beq.n	80012de <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80012ea:	4b35      	ldr	r3, [pc, #212]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a34      	ldr	r2, [pc, #208]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <MCU_Clock_Setup+0x110>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a32      	ldr	r2, [pc, #200]	@ (80013c4 <MCU_Clock_Setup+0x110>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <MCU_Clock_Setup+0x114>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a30      	ldr	r2, [pc, #192]	@ (80013c8 <MCU_Clock_Setup+0x114>)
 8001308:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800130c:	f043 0305 	orr.w	r3, r3, #5
 8001310:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001312:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	793a      	ldrb	r2, [r7, #4]
 8001318:	0611      	lsls	r1, r2, #24
 800131a:	797a      	ldrb	r2, [r7, #5]
 800131c:	0412      	lsls	r2, r2, #16
 800131e:	4311      	orrs	r1, r2
 8001320:	79ba      	ldrb	r2, [r7, #6]
 8001322:	0192      	lsls	r2, r2, #6
 8001324:	4311      	orrs	r1, r2
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	430a      	orrs	r2, r1
 800132a:	4611      	mov	r1, r2
 800132c:	4a24      	ldr	r2, [pc, #144]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 800132e:	430b      	orrs	r3, r1
 8001330:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4a22      	ldr	r2, [pc, #136]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001338:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800133c:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001340:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 800134c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8001350:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800135c:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001364:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001368:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 800136a:	bf00      	nop
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f9      	beq.n	800136c <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001384:	bf00      	nop
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b08      	cmp	r3, #8
 8001390:	d1f9      	bne.n	8001386 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8001392:	f000 f8b3 	bl	80014fc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <MCU_Clock_Setup+0x118>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <MCU_Clock_Setup+0x11c>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff63 	bl	8001270 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <MCU_Clock_Setup+0x10c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000
 80013c8:	40023c00 	.word	0x40023c00
 80013cc:	20000000 	.word	0x20000000
 80013d0:	18618619 	.word	0x18618619

080013d4 <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80013da:	f7ff ff6b 	bl	80012b4 <MCU_Clock_Setup>


	INMP441_I2S.Port = I2S_Port.I2S2;
 80013de:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <main+0x88>)
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <main+0x8c>)
 80013e2:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 80013e4:	2206      	movs	r2, #6
 80013e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <main+0x8c>)
 80013e8:	731a      	strb	r2, [r3, #12]
	INMP441_I2S.Channel_Length = I2S_Channel_Length._16_bit;
 80013ea:	2301      	movs	r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <main+0x8c>)
 80013f0:	72da      	strb	r2, [r3, #11]
	INMP441_I2S.Data_Length = I2S_Data_Length._16_bit;
 80013f2:	2301      	movs	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <main+0x8c>)
 80013f8:	729a      	strb	r2, [r3, #10]
	INMP441_I2S.LR_Pin_Port = GPIOB;
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <main+0x8c>)
 80013fc:	4a19      	ldr	r2, [pc, #100]	@ (8001464 <main+0x90>)
 80013fe:	605a      	str	r2, [r3, #4]
	INMP441_I2S.LR_Pin_Number = 12;
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <main+0x8c>)
 8001402:	220c      	movs	r2, #12
 8001404:	721a      	strb	r2, [r3, #8]
	INMP441_I2S.Standard = I2S_Standard.Standard_Philips;
 8001406:	2301      	movs	r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <main+0x8c>)
 800140c:	725a      	strb	r2, [r3, #9]
	INMP441_I2S.Half_Duplex.Enable = true;
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <main+0x8c>)
 8001410:	2201      	movs	r2, #1
 8001412:	751a      	strb	r2, [r3, #20]
	INMP441_I2S.Half_Duplex.mode = I2S_Mode.Master.Receive;
 8001414:	2202      	movs	r2, #2
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <main+0x8c>)
 8001418:	755a      	strb	r2, [r3, #21]
	INMP441_I2S.Half_Duplex.WS_Pin = I2S_Pin.WS.I2S2.PB09;
 800141a:	22d1      	movs	r2, #209	@ 0xd1
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <main+0x8c>)
 800141e:	765a      	strb	r2, [r3, #25]
	INMP441_I2S.Half_Duplex.SD_Pin = I2S_Pin.SD.I2S2.PB15;
 8001420:	22d5      	movs	r2, #213	@ 0xd5
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <main+0x8c>)
 8001424:	761a      	strb	r2, [r3, #24]
	INMP441_I2S.Half_Duplex.SCK_Pin = I2S_Pin.SCK.I2S2.PB13;
 8001426:	22d5      	movs	r2, #213	@ 0xd5
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <main+0x8c>)
 800142a:	75da      	strb	r2, [r3, #23]

	if(I2S_Init(&INMP441_I2S)) I2S_Print_Errors(&INMP441_I2S);
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <main+0x8c>)
 800142e:	f7ff f9f3 	bl	8000818 <I2S_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <main+0x6a>
 8001438:	4809      	ldr	r0, [pc, #36]	@ (8001460 <main+0x8c>)
 800143a:	f7ff fc0b 	bl	8000c54 <I2S_Print_Errors>



	I2S_Select_Left_Channel(&INMP441_I2S);
 800143e:	4808      	ldr	r0, [pc, #32]	@ (8001460 <main+0x8c>)
 8001440:	f7ff fedb 	bl	80011fa <I2S_Select_Left_Channel>
	uint32_t x = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]

	for(;;)
	{


		x = I2S_Read_Data(&INMP441_I2S);
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <main+0x8c>)
 800144a:	f7ff fe9f 	bl	800118c <I2S_Read_Data>
 800144e:	6078      	str	r0, [r7, #4]
		printConsole("%"PRId32"\r\n",x);
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <main+0x94>)
 8001454:	f7fe ff14 	bl	8000280 <printConsole>
		x = I2S_Read_Data(&INMP441_I2S);
 8001458:	bf00      	nop
 800145a:	e7f5      	b.n	8001448 <main+0x74>
 800145c:	40003800 	.word	0x40003800
 8001460:	200001d8 	.word	0x200001d8
 8001464:	40020400 	.word	0x40020400
 8001468:	08002070 	.word	0x08002070

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	@ (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f000 f8f8 	bl	8001690 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20020000 	.word	0x20020000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	20000200 	.word	0x20000200
 80014d4:	20000350 	.word	0x20000350

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	2302      	movs	r3, #2
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	2302      	movs	r3, #2
 8001514:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001516:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <SystemCoreClockUpdate+0xec>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b08      	cmp	r3, #8
 8001524:	d011      	beq.n	800154a <SystemCoreClockUpdate+0x4e>
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b08      	cmp	r3, #8
 800152a:	d844      	bhi.n	80015b6 <SystemCoreClockUpdate+0xba>
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <SystemCoreClockUpdate+0x3e>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b04      	cmp	r3, #4
 8001536:	d004      	beq.n	8001542 <SystemCoreClockUpdate+0x46>
 8001538:	e03d      	b.n	80015b6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <SystemCoreClockUpdate+0xf0>)
 800153c:	4a2c      	ldr	r2, [pc, #176]	@ (80015f0 <SystemCoreClockUpdate+0xf4>)
 800153e:	601a      	str	r2, [r3, #0]
      break;
 8001540:	e03d      	b.n	80015be <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001542:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <SystemCoreClockUpdate+0xf0>)
 8001544:	4a2b      	ldr	r2, [pc, #172]	@ (80015f4 <SystemCoreClockUpdate+0xf8>)
 8001546:	601a      	str	r2, [r3, #0]
      break;
 8001548:	e039      	b.n	80015be <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800154a:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <SystemCoreClockUpdate+0xec>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0d9b      	lsrs	r3, r3, #22
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <SystemCoreClockUpdate+0xec>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800155e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001566:	4a23      	ldr	r2, [pc, #140]	@ (80015f4 <SystemCoreClockUpdate+0xf8>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <SystemCoreClockUpdate+0xec>)
 8001570:	6852      	ldr	r2, [r2, #4]
 8001572:	0992      	lsrs	r2, r2, #6
 8001574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e00b      	b.n	8001598 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001580:	4a1b      	ldr	r2, [pc, #108]	@ (80015f0 <SystemCoreClockUpdate+0xf4>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <SystemCoreClockUpdate+0xec>)
 800158a:	6852      	ldr	r2, [r2, #4]
 800158c:	0992      	lsrs	r2, r2, #6
 800158e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <SystemCoreClockUpdate+0xec>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b0:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <SystemCoreClockUpdate+0xf0>)
 80015b2:	6013      	str	r3, [r2, #0]
      break;
 80015b4:	e003      	b.n	80015be <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <SystemCoreClockUpdate+0xf0>)
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <SystemCoreClockUpdate+0xf4>)
 80015ba:	601a      	str	r2, [r3, #0]
      break;
 80015bc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <SystemCoreClockUpdate+0xec>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <SystemCoreClockUpdate+0xfc>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <SystemCoreClockUpdate+0xf0>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <SystemCoreClockUpdate+0xf0>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40023800 	.word	0x40023800
 80015ec:	20000000 	.word	0x20000000
 80015f0:	00f42400 	.word	0x00f42400
 80015f4:	007a1200 	.word	0x007a1200
 80015f8:	08002078 	.word	0x08002078

080015fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015fc:	480d      	ldr	r0, [pc, #52]	@ (8001634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001600:	f7ff ff6a 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	@ (800163c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	@ (8001648 <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800162a:	f000 f837 	bl	800169c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fed1 	bl	80013d4 <main>

08001632 <LoopForever>:

LoopForever:
  b LoopForever
 8001632:	e7fe      	b.n	8001632 <LoopForever>
  ldr   r0, =_estack
 8001634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001640:	080020cc 	.word	0x080020cc
  ldr r2, =_sbss
 8001644:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001648:	2000034c 	.word	0x2000034c

0800164c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <_vsiprintf_r>:
 8001650:	b500      	push	{lr}
 8001652:	b09b      	sub	sp, #108	@ 0x6c
 8001654:	9100      	str	r1, [sp, #0]
 8001656:	9104      	str	r1, [sp, #16]
 8001658:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800165c:	9105      	str	r1, [sp, #20]
 800165e:	9102      	str	r1, [sp, #8]
 8001660:	4905      	ldr	r1, [pc, #20]	@ (8001678 <_vsiprintf_r+0x28>)
 8001662:	9103      	str	r1, [sp, #12]
 8001664:	4669      	mov	r1, sp
 8001666:	f000 f993 	bl	8001990 <_svfiprintf_r>
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	b01b      	add	sp, #108	@ 0x6c
 8001672:	f85d fb04 	ldr.w	pc, [sp], #4
 8001676:	bf00      	nop
 8001678:	ffff0208 	.word	0xffff0208

0800167c <vsiprintf>:
 800167c:	4613      	mov	r3, r2
 800167e:	460a      	mov	r2, r1
 8001680:	4601      	mov	r1, r0
 8001682:	4802      	ldr	r0, [pc, #8]	@ (800168c <vsiprintf+0x10>)
 8001684:	6800      	ldr	r0, [r0, #0]
 8001686:	f7ff bfe3 	b.w	8001650 <_vsiprintf_r>
 800168a:	bf00      	nop
 800168c:	20000004 	.word	0x20000004

08001690 <__errno>:
 8001690:	4b01      	ldr	r3, [pc, #4]	@ (8001698 <__errno+0x8>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000004 	.word	0x20000004

0800169c <__libc_init_array>:
 800169c:	b570      	push	{r4, r5, r6, lr}
 800169e:	4d0d      	ldr	r5, [pc, #52]	@ (80016d4 <__libc_init_array+0x38>)
 80016a0:	4c0d      	ldr	r4, [pc, #52]	@ (80016d8 <__libc_init_array+0x3c>)
 80016a2:	1b64      	subs	r4, r4, r5
 80016a4:	10a4      	asrs	r4, r4, #2
 80016a6:	2600      	movs	r6, #0
 80016a8:	42a6      	cmp	r6, r4
 80016aa:	d109      	bne.n	80016c0 <__libc_init_array+0x24>
 80016ac:	4d0b      	ldr	r5, [pc, #44]	@ (80016dc <__libc_init_array+0x40>)
 80016ae:	4c0c      	ldr	r4, [pc, #48]	@ (80016e0 <__libc_init_array+0x44>)
 80016b0:	f000 fc66 	bl	8001f80 <_init>
 80016b4:	1b64      	subs	r4, r4, r5
 80016b6:	10a4      	asrs	r4, r4, #2
 80016b8:	2600      	movs	r6, #0
 80016ba:	42a6      	cmp	r6, r4
 80016bc:	d105      	bne.n	80016ca <__libc_init_array+0x2e>
 80016be:	bd70      	pop	{r4, r5, r6, pc}
 80016c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c4:	4798      	blx	r3
 80016c6:	3601      	adds	r6, #1
 80016c8:	e7ee      	b.n	80016a8 <__libc_init_array+0xc>
 80016ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ce:	4798      	blx	r3
 80016d0:	3601      	adds	r6, #1
 80016d2:	e7f2      	b.n	80016ba <__libc_init_array+0x1e>
 80016d4:	080020c4 	.word	0x080020c4
 80016d8:	080020c4 	.word	0x080020c4
 80016dc:	080020c4 	.word	0x080020c4
 80016e0:	080020c8 	.word	0x080020c8

080016e4 <__retarget_lock_acquire_recursive>:
 80016e4:	4770      	bx	lr

080016e6 <__retarget_lock_release_recursive>:
 80016e6:	4770      	bx	lr

080016e8 <_free_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	4605      	mov	r5, r0
 80016ec:	2900      	cmp	r1, #0
 80016ee:	d041      	beq.n	8001774 <_free_r+0x8c>
 80016f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016f4:	1f0c      	subs	r4, r1, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bfb8      	it	lt
 80016fa:	18e4      	addlt	r4, r4, r3
 80016fc:	f000 f8e0 	bl	80018c0 <__malloc_lock>
 8001700:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <_free_r+0x90>)
 8001702:	6813      	ldr	r3, [r2, #0]
 8001704:	b933      	cbnz	r3, 8001714 <_free_r+0x2c>
 8001706:	6063      	str	r3, [r4, #4]
 8001708:	6014      	str	r4, [r2, #0]
 800170a:	4628      	mov	r0, r5
 800170c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001710:	f000 b8dc 	b.w	80018cc <__malloc_unlock>
 8001714:	42a3      	cmp	r3, r4
 8001716:	d908      	bls.n	800172a <_free_r+0x42>
 8001718:	6820      	ldr	r0, [r4, #0]
 800171a:	1821      	adds	r1, r4, r0
 800171c:	428b      	cmp	r3, r1
 800171e:	bf01      	itttt	eq
 8001720:	6819      	ldreq	r1, [r3, #0]
 8001722:	685b      	ldreq	r3, [r3, #4]
 8001724:	1809      	addeq	r1, r1, r0
 8001726:	6021      	streq	r1, [r4, #0]
 8001728:	e7ed      	b.n	8001706 <_free_r+0x1e>
 800172a:	461a      	mov	r2, r3
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	b10b      	cbz	r3, 8001734 <_free_r+0x4c>
 8001730:	42a3      	cmp	r3, r4
 8001732:	d9fa      	bls.n	800172a <_free_r+0x42>
 8001734:	6811      	ldr	r1, [r2, #0]
 8001736:	1850      	adds	r0, r2, r1
 8001738:	42a0      	cmp	r0, r4
 800173a:	d10b      	bne.n	8001754 <_free_r+0x6c>
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	4401      	add	r1, r0
 8001740:	1850      	adds	r0, r2, r1
 8001742:	4283      	cmp	r3, r0
 8001744:	6011      	str	r1, [r2, #0]
 8001746:	d1e0      	bne.n	800170a <_free_r+0x22>
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	6053      	str	r3, [r2, #4]
 800174e:	4408      	add	r0, r1
 8001750:	6010      	str	r0, [r2, #0]
 8001752:	e7da      	b.n	800170a <_free_r+0x22>
 8001754:	d902      	bls.n	800175c <_free_r+0x74>
 8001756:	230c      	movs	r3, #12
 8001758:	602b      	str	r3, [r5, #0]
 800175a:	e7d6      	b.n	800170a <_free_r+0x22>
 800175c:	6820      	ldr	r0, [r4, #0]
 800175e:	1821      	adds	r1, r4, r0
 8001760:	428b      	cmp	r3, r1
 8001762:	bf04      	itt	eq
 8001764:	6819      	ldreq	r1, [r3, #0]
 8001766:	685b      	ldreq	r3, [r3, #4]
 8001768:	6063      	str	r3, [r4, #4]
 800176a:	bf04      	itt	eq
 800176c:	1809      	addeq	r1, r1, r0
 800176e:	6021      	streq	r1, [r4, #0]
 8001770:	6054      	str	r4, [r2, #4]
 8001772:	e7ca      	b.n	800170a <_free_r+0x22>
 8001774:	bd38      	pop	{r3, r4, r5, pc}
 8001776:	bf00      	nop
 8001778:	20000348 	.word	0x20000348

0800177c <sbrk_aligned>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4e0f      	ldr	r6, [pc, #60]	@ (80017bc <sbrk_aligned+0x40>)
 8001780:	460c      	mov	r4, r1
 8001782:	6831      	ldr	r1, [r6, #0]
 8001784:	4605      	mov	r5, r0
 8001786:	b911      	cbnz	r1, 800178e <sbrk_aligned+0x12>
 8001788:	f000 fba6 	bl	8001ed8 <_sbrk_r>
 800178c:	6030      	str	r0, [r6, #0]
 800178e:	4621      	mov	r1, r4
 8001790:	4628      	mov	r0, r5
 8001792:	f000 fba1 	bl	8001ed8 <_sbrk_r>
 8001796:	1c43      	adds	r3, r0, #1
 8001798:	d103      	bne.n	80017a2 <sbrk_aligned+0x26>
 800179a:	f04f 34ff 	mov.w	r4, #4294967295
 800179e:	4620      	mov	r0, r4
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
 80017a2:	1cc4      	adds	r4, r0, #3
 80017a4:	f024 0403 	bic.w	r4, r4, #3
 80017a8:	42a0      	cmp	r0, r4
 80017aa:	d0f8      	beq.n	800179e <sbrk_aligned+0x22>
 80017ac:	1a21      	subs	r1, r4, r0
 80017ae:	4628      	mov	r0, r5
 80017b0:	f000 fb92 	bl	8001ed8 <_sbrk_r>
 80017b4:	3001      	adds	r0, #1
 80017b6:	d1f2      	bne.n	800179e <sbrk_aligned+0x22>
 80017b8:	e7ef      	b.n	800179a <sbrk_aligned+0x1e>
 80017ba:	bf00      	nop
 80017bc:	20000344 	.word	0x20000344

080017c0 <_malloc_r>:
 80017c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017c4:	1ccd      	adds	r5, r1, #3
 80017c6:	f025 0503 	bic.w	r5, r5, #3
 80017ca:	3508      	adds	r5, #8
 80017cc:	2d0c      	cmp	r5, #12
 80017ce:	bf38      	it	cc
 80017d0:	250c      	movcc	r5, #12
 80017d2:	2d00      	cmp	r5, #0
 80017d4:	4606      	mov	r6, r0
 80017d6:	db01      	blt.n	80017dc <_malloc_r+0x1c>
 80017d8:	42a9      	cmp	r1, r5
 80017da:	d904      	bls.n	80017e6 <_malloc_r+0x26>
 80017dc:	230c      	movs	r3, #12
 80017de:	6033      	str	r3, [r6, #0]
 80017e0:	2000      	movs	r0, #0
 80017e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80018bc <_malloc_r+0xfc>
 80017ea:	f000 f869 	bl	80018c0 <__malloc_lock>
 80017ee:	f8d8 3000 	ldr.w	r3, [r8]
 80017f2:	461c      	mov	r4, r3
 80017f4:	bb44      	cbnz	r4, 8001848 <_malloc_r+0x88>
 80017f6:	4629      	mov	r1, r5
 80017f8:	4630      	mov	r0, r6
 80017fa:	f7ff ffbf 	bl	800177c <sbrk_aligned>
 80017fe:	1c43      	adds	r3, r0, #1
 8001800:	4604      	mov	r4, r0
 8001802:	d158      	bne.n	80018b6 <_malloc_r+0xf6>
 8001804:	f8d8 4000 	ldr.w	r4, [r8]
 8001808:	4627      	mov	r7, r4
 800180a:	2f00      	cmp	r7, #0
 800180c:	d143      	bne.n	8001896 <_malloc_r+0xd6>
 800180e:	2c00      	cmp	r4, #0
 8001810:	d04b      	beq.n	80018aa <_malloc_r+0xea>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	4639      	mov	r1, r7
 8001816:	4630      	mov	r0, r6
 8001818:	eb04 0903 	add.w	r9, r4, r3
 800181c:	f000 fb5c 	bl	8001ed8 <_sbrk_r>
 8001820:	4581      	cmp	r9, r0
 8001822:	d142      	bne.n	80018aa <_malloc_r+0xea>
 8001824:	6821      	ldr	r1, [r4, #0]
 8001826:	1a6d      	subs	r5, r5, r1
 8001828:	4629      	mov	r1, r5
 800182a:	4630      	mov	r0, r6
 800182c:	f7ff ffa6 	bl	800177c <sbrk_aligned>
 8001830:	3001      	adds	r0, #1
 8001832:	d03a      	beq.n	80018aa <_malloc_r+0xea>
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	442b      	add	r3, r5
 8001838:	6023      	str	r3, [r4, #0]
 800183a:	f8d8 3000 	ldr.w	r3, [r8]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	bb62      	cbnz	r2, 800189c <_malloc_r+0xdc>
 8001842:	f8c8 7000 	str.w	r7, [r8]
 8001846:	e00f      	b.n	8001868 <_malloc_r+0xa8>
 8001848:	6822      	ldr	r2, [r4, #0]
 800184a:	1b52      	subs	r2, r2, r5
 800184c:	d420      	bmi.n	8001890 <_malloc_r+0xd0>
 800184e:	2a0b      	cmp	r2, #11
 8001850:	d917      	bls.n	8001882 <_malloc_r+0xc2>
 8001852:	1961      	adds	r1, r4, r5
 8001854:	42a3      	cmp	r3, r4
 8001856:	6025      	str	r5, [r4, #0]
 8001858:	bf18      	it	ne
 800185a:	6059      	strne	r1, [r3, #4]
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	bf08      	it	eq
 8001860:	f8c8 1000 	streq.w	r1, [r8]
 8001864:	5162      	str	r2, [r4, r5]
 8001866:	604b      	str	r3, [r1, #4]
 8001868:	4630      	mov	r0, r6
 800186a:	f000 f82f 	bl	80018cc <__malloc_unlock>
 800186e:	f104 000b 	add.w	r0, r4, #11
 8001872:	1d23      	adds	r3, r4, #4
 8001874:	f020 0007 	bic.w	r0, r0, #7
 8001878:	1ac2      	subs	r2, r0, r3
 800187a:	bf1c      	itt	ne
 800187c:	1a1b      	subne	r3, r3, r0
 800187e:	50a3      	strne	r3, [r4, r2]
 8001880:	e7af      	b.n	80017e2 <_malloc_r+0x22>
 8001882:	6862      	ldr	r2, [r4, #4]
 8001884:	42a3      	cmp	r3, r4
 8001886:	bf0c      	ite	eq
 8001888:	f8c8 2000 	streq.w	r2, [r8]
 800188c:	605a      	strne	r2, [r3, #4]
 800188e:	e7eb      	b.n	8001868 <_malloc_r+0xa8>
 8001890:	4623      	mov	r3, r4
 8001892:	6864      	ldr	r4, [r4, #4]
 8001894:	e7ae      	b.n	80017f4 <_malloc_r+0x34>
 8001896:	463c      	mov	r4, r7
 8001898:	687f      	ldr	r7, [r7, #4]
 800189a:	e7b6      	b.n	800180a <_malloc_r+0x4a>
 800189c:	461a      	mov	r2, r3
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	42a3      	cmp	r3, r4
 80018a2:	d1fb      	bne.n	800189c <_malloc_r+0xdc>
 80018a4:	2300      	movs	r3, #0
 80018a6:	6053      	str	r3, [r2, #4]
 80018a8:	e7de      	b.n	8001868 <_malloc_r+0xa8>
 80018aa:	230c      	movs	r3, #12
 80018ac:	6033      	str	r3, [r6, #0]
 80018ae:	4630      	mov	r0, r6
 80018b0:	f000 f80c 	bl	80018cc <__malloc_unlock>
 80018b4:	e794      	b.n	80017e0 <_malloc_r+0x20>
 80018b6:	6005      	str	r5, [r0, #0]
 80018b8:	e7d6      	b.n	8001868 <_malloc_r+0xa8>
 80018ba:	bf00      	nop
 80018bc:	20000348 	.word	0x20000348

080018c0 <__malloc_lock>:
 80018c0:	4801      	ldr	r0, [pc, #4]	@ (80018c8 <__malloc_lock+0x8>)
 80018c2:	f7ff bf0f 	b.w	80016e4 <__retarget_lock_acquire_recursive>
 80018c6:	bf00      	nop
 80018c8:	20000340 	.word	0x20000340

080018cc <__malloc_unlock>:
 80018cc:	4801      	ldr	r0, [pc, #4]	@ (80018d4 <__malloc_unlock+0x8>)
 80018ce:	f7ff bf0a 	b.w	80016e6 <__retarget_lock_release_recursive>
 80018d2:	bf00      	nop
 80018d4:	20000340 	.word	0x20000340

080018d8 <__ssputs_r>:
 80018d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018dc:	688e      	ldr	r6, [r1, #8]
 80018de:	461f      	mov	r7, r3
 80018e0:	42be      	cmp	r6, r7
 80018e2:	680b      	ldr	r3, [r1, #0]
 80018e4:	4682      	mov	sl, r0
 80018e6:	460c      	mov	r4, r1
 80018e8:	4690      	mov	r8, r2
 80018ea:	d82d      	bhi.n	8001948 <__ssputs_r+0x70>
 80018ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018f4:	d026      	beq.n	8001944 <__ssputs_r+0x6c>
 80018f6:	6965      	ldr	r5, [r4, #20]
 80018f8:	6909      	ldr	r1, [r1, #16]
 80018fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018fe:	eba3 0901 	sub.w	r9, r3, r1
 8001902:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001906:	1c7b      	adds	r3, r7, #1
 8001908:	444b      	add	r3, r9
 800190a:	106d      	asrs	r5, r5, #1
 800190c:	429d      	cmp	r5, r3
 800190e:	bf38      	it	cc
 8001910:	461d      	movcc	r5, r3
 8001912:	0553      	lsls	r3, r2, #21
 8001914:	d527      	bpl.n	8001966 <__ssputs_r+0x8e>
 8001916:	4629      	mov	r1, r5
 8001918:	f7ff ff52 	bl	80017c0 <_malloc_r>
 800191c:	4606      	mov	r6, r0
 800191e:	b360      	cbz	r0, 800197a <__ssputs_r+0xa2>
 8001920:	6921      	ldr	r1, [r4, #16]
 8001922:	464a      	mov	r2, r9
 8001924:	f000 fae8 	bl	8001ef8 <memcpy>
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800192e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001932:	81a3      	strh	r3, [r4, #12]
 8001934:	6126      	str	r6, [r4, #16]
 8001936:	6165      	str	r5, [r4, #20]
 8001938:	444e      	add	r6, r9
 800193a:	eba5 0509 	sub.w	r5, r5, r9
 800193e:	6026      	str	r6, [r4, #0]
 8001940:	60a5      	str	r5, [r4, #8]
 8001942:	463e      	mov	r6, r7
 8001944:	42be      	cmp	r6, r7
 8001946:	d900      	bls.n	800194a <__ssputs_r+0x72>
 8001948:	463e      	mov	r6, r7
 800194a:	6820      	ldr	r0, [r4, #0]
 800194c:	4632      	mov	r2, r6
 800194e:	4641      	mov	r1, r8
 8001950:	f000 faa8 	bl	8001ea4 <memmove>
 8001954:	68a3      	ldr	r3, [r4, #8]
 8001956:	1b9b      	subs	r3, r3, r6
 8001958:	60a3      	str	r3, [r4, #8]
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	4433      	add	r3, r6
 800195e:	6023      	str	r3, [r4, #0]
 8001960:	2000      	movs	r0, #0
 8001962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001966:	462a      	mov	r2, r5
 8001968:	f000 fad4 	bl	8001f14 <_realloc_r>
 800196c:	4606      	mov	r6, r0
 800196e:	2800      	cmp	r0, #0
 8001970:	d1e0      	bne.n	8001934 <__ssputs_r+0x5c>
 8001972:	6921      	ldr	r1, [r4, #16]
 8001974:	4650      	mov	r0, sl
 8001976:	f7ff feb7 	bl	80016e8 <_free_r>
 800197a:	230c      	movs	r3, #12
 800197c:	f8ca 3000 	str.w	r3, [sl]
 8001980:	89a3      	ldrh	r3, [r4, #12]
 8001982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001986:	81a3      	strh	r3, [r4, #12]
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	e7e9      	b.n	8001962 <__ssputs_r+0x8a>
	...

08001990 <_svfiprintf_r>:
 8001990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001994:	4698      	mov	r8, r3
 8001996:	898b      	ldrh	r3, [r1, #12]
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	b09d      	sub	sp, #116	@ 0x74
 800199c:	4607      	mov	r7, r0
 800199e:	460d      	mov	r5, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	d510      	bpl.n	80019c6 <_svfiprintf_r+0x36>
 80019a4:	690b      	ldr	r3, [r1, #16]
 80019a6:	b973      	cbnz	r3, 80019c6 <_svfiprintf_r+0x36>
 80019a8:	2140      	movs	r1, #64	@ 0x40
 80019aa:	f7ff ff09 	bl	80017c0 <_malloc_r>
 80019ae:	6028      	str	r0, [r5, #0]
 80019b0:	6128      	str	r0, [r5, #16]
 80019b2:	b930      	cbnz	r0, 80019c2 <_svfiprintf_r+0x32>
 80019b4:	230c      	movs	r3, #12
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	b01d      	add	sp, #116	@ 0x74
 80019be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019c2:	2340      	movs	r3, #64	@ 0x40
 80019c4:	616b      	str	r3, [r5, #20]
 80019c6:	2300      	movs	r3, #0
 80019c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80019ca:	2320      	movs	r3, #32
 80019cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80019d4:	2330      	movs	r3, #48	@ 0x30
 80019d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001b74 <_svfiprintf_r+0x1e4>
 80019da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019de:	f04f 0901 	mov.w	r9, #1
 80019e2:	4623      	mov	r3, r4
 80019e4:	469a      	mov	sl, r3
 80019e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019ea:	b10a      	cbz	r2, 80019f0 <_svfiprintf_r+0x60>
 80019ec:	2a25      	cmp	r2, #37	@ 0x25
 80019ee:	d1f9      	bne.n	80019e4 <_svfiprintf_r+0x54>
 80019f0:	ebba 0b04 	subs.w	fp, sl, r4
 80019f4:	d00b      	beq.n	8001a0e <_svfiprintf_r+0x7e>
 80019f6:	465b      	mov	r3, fp
 80019f8:	4622      	mov	r2, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	4638      	mov	r0, r7
 80019fe:	f7ff ff6b 	bl	80018d8 <__ssputs_r>
 8001a02:	3001      	adds	r0, #1
 8001a04:	f000 80a7 	beq.w	8001b56 <_svfiprintf_r+0x1c6>
 8001a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a0a:	445a      	add	r2, fp
 8001a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 809f 	beq.w	8001b56 <_svfiprintf_r+0x1c6>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a22:	f10a 0a01 	add.w	sl, sl, #1
 8001a26:	9304      	str	r3, [sp, #16]
 8001a28:	9307      	str	r3, [sp, #28]
 8001a2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a30:	4654      	mov	r4, sl
 8001a32:	2205      	movs	r2, #5
 8001a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a38:	484e      	ldr	r0, [pc, #312]	@ (8001b74 <_svfiprintf_r+0x1e4>)
 8001a3a:	f7fe fbd1 	bl	80001e0 <memchr>
 8001a3e:	9a04      	ldr	r2, [sp, #16]
 8001a40:	b9d8      	cbnz	r0, 8001a7a <_svfiprintf_r+0xea>
 8001a42:	06d0      	lsls	r0, r2, #27
 8001a44:	bf44      	itt	mi
 8001a46:	2320      	movmi	r3, #32
 8001a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a4c:	0711      	lsls	r1, r2, #28
 8001a4e:	bf44      	itt	mi
 8001a50:	232b      	movmi	r3, #43	@ 0x2b
 8001a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a56:	f89a 3000 	ldrb.w	r3, [sl]
 8001a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a5c:	d015      	beq.n	8001a8a <_svfiprintf_r+0xfa>
 8001a5e:	9a07      	ldr	r2, [sp, #28]
 8001a60:	4654      	mov	r4, sl
 8001a62:	2000      	movs	r0, #0
 8001a64:	f04f 0c0a 	mov.w	ip, #10
 8001a68:	4621      	mov	r1, r4
 8001a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a6e:	3b30      	subs	r3, #48	@ 0x30
 8001a70:	2b09      	cmp	r3, #9
 8001a72:	d94b      	bls.n	8001b0c <_svfiprintf_r+0x17c>
 8001a74:	b1b0      	cbz	r0, 8001aa4 <_svfiprintf_r+0x114>
 8001a76:	9207      	str	r2, [sp, #28]
 8001a78:	e014      	b.n	8001aa4 <_svfiprintf_r+0x114>
 8001a7a:	eba0 0308 	sub.w	r3, r0, r8
 8001a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	9304      	str	r3, [sp, #16]
 8001a86:	46a2      	mov	sl, r4
 8001a88:	e7d2      	b.n	8001a30 <_svfiprintf_r+0xa0>
 8001a8a:	9b03      	ldr	r3, [sp, #12]
 8001a8c:	1d19      	adds	r1, r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	9103      	str	r1, [sp, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bfbb      	ittet	lt
 8001a96:	425b      	neglt	r3, r3
 8001a98:	f042 0202 	orrlt.w	r2, r2, #2
 8001a9c:	9307      	strge	r3, [sp, #28]
 8001a9e:	9307      	strlt	r3, [sp, #28]
 8001aa0:	bfb8      	it	lt
 8001aa2:	9204      	strlt	r2, [sp, #16]
 8001aa4:	7823      	ldrb	r3, [r4, #0]
 8001aa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001aa8:	d10a      	bne.n	8001ac0 <_svfiprintf_r+0x130>
 8001aaa:	7863      	ldrb	r3, [r4, #1]
 8001aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8001aae:	d132      	bne.n	8001b16 <_svfiprintf_r+0x186>
 8001ab0:	9b03      	ldr	r3, [sp, #12]
 8001ab2:	1d1a      	adds	r2, r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	9203      	str	r2, [sp, #12]
 8001ab8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001abc:	3402      	adds	r4, #2
 8001abe:	9305      	str	r3, [sp, #20]
 8001ac0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001b84 <_svfiprintf_r+0x1f4>
 8001ac4:	7821      	ldrb	r1, [r4, #0]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	4650      	mov	r0, sl
 8001aca:	f7fe fb89 	bl	80001e0 <memchr>
 8001ace:	b138      	cbz	r0, 8001ae0 <_svfiprintf_r+0x150>
 8001ad0:	9b04      	ldr	r3, [sp, #16]
 8001ad2:	eba0 000a 	sub.w	r0, r0, sl
 8001ad6:	2240      	movs	r2, #64	@ 0x40
 8001ad8:	4082      	lsls	r2, r0
 8001ada:	4313      	orrs	r3, r2
 8001adc:	3401      	adds	r4, #1
 8001ade:	9304      	str	r3, [sp, #16]
 8001ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae4:	4824      	ldr	r0, [pc, #144]	@ (8001b78 <_svfiprintf_r+0x1e8>)
 8001ae6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001aea:	2206      	movs	r2, #6
 8001aec:	f7fe fb78 	bl	80001e0 <memchr>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d036      	beq.n	8001b62 <_svfiprintf_r+0x1d2>
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <_svfiprintf_r+0x1ec>)
 8001af6:	bb1b      	cbnz	r3, 8001b40 <_svfiprintf_r+0x1b0>
 8001af8:	9b03      	ldr	r3, [sp, #12]
 8001afa:	3307      	adds	r3, #7
 8001afc:	f023 0307 	bic.w	r3, r3, #7
 8001b00:	3308      	adds	r3, #8
 8001b02:	9303      	str	r3, [sp, #12]
 8001b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b06:	4433      	add	r3, r6
 8001b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b0a:	e76a      	b.n	80019e2 <_svfiprintf_r+0x52>
 8001b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b10:	460c      	mov	r4, r1
 8001b12:	2001      	movs	r0, #1
 8001b14:	e7a8      	b.n	8001a68 <_svfiprintf_r+0xd8>
 8001b16:	2300      	movs	r3, #0
 8001b18:	3401      	adds	r4, #1
 8001b1a:	9305      	str	r3, [sp, #20]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 0c0a 	mov.w	ip, #10
 8001b22:	4620      	mov	r0, r4
 8001b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b28:	3a30      	subs	r2, #48	@ 0x30
 8001b2a:	2a09      	cmp	r2, #9
 8001b2c:	d903      	bls.n	8001b36 <_svfiprintf_r+0x1a6>
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0c6      	beq.n	8001ac0 <_svfiprintf_r+0x130>
 8001b32:	9105      	str	r1, [sp, #20]
 8001b34:	e7c4      	b.n	8001ac0 <_svfiprintf_r+0x130>
 8001b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e7f0      	b.n	8001b22 <_svfiprintf_r+0x192>
 8001b40:	ab03      	add	r3, sp, #12
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	462a      	mov	r2, r5
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <_svfiprintf_r+0x1f0>)
 8001b48:	a904      	add	r1, sp, #16
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	f3af 8000 	nop.w
 8001b50:	1c42      	adds	r2, r0, #1
 8001b52:	4606      	mov	r6, r0
 8001b54:	d1d6      	bne.n	8001b04 <_svfiprintf_r+0x174>
 8001b56:	89ab      	ldrh	r3, [r5, #12]
 8001b58:	065b      	lsls	r3, r3, #25
 8001b5a:	f53f af2d 	bmi.w	80019b8 <_svfiprintf_r+0x28>
 8001b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b60:	e72c      	b.n	80019bc <_svfiprintf_r+0x2c>
 8001b62:	ab03      	add	r3, sp, #12
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	462a      	mov	r2, r5
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <_svfiprintf_r+0x1f0>)
 8001b6a:	a904      	add	r1, sp, #16
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	f000 f879 	bl	8001c64 <_printf_i>
 8001b72:	e7ed      	b.n	8001b50 <_svfiprintf_r+0x1c0>
 8001b74:	08002088 	.word	0x08002088
 8001b78:	08002092 	.word	0x08002092
 8001b7c:	00000000 	.word	0x00000000
 8001b80:	080018d9 	.word	0x080018d9
 8001b84:	0800208e 	.word	0x0800208e

08001b88 <_printf_common>:
 8001b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b8c:	4616      	mov	r6, r2
 8001b8e:	4698      	mov	r8, r3
 8001b90:	688a      	ldr	r2, [r1, #8]
 8001b92:	690b      	ldr	r3, [r1, #16]
 8001b94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	bfb8      	it	lt
 8001b9c:	4613      	movlt	r3, r2
 8001b9e:	6033      	str	r3, [r6, #0]
 8001ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ba4:	4607      	mov	r7, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	b10a      	cbz	r2, 8001bae <_printf_common+0x26>
 8001baa:	3301      	adds	r3, #1
 8001bac:	6033      	str	r3, [r6, #0]
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	0699      	lsls	r1, r3, #26
 8001bb2:	bf42      	ittt	mi
 8001bb4:	6833      	ldrmi	r3, [r6, #0]
 8001bb6:	3302      	addmi	r3, #2
 8001bb8:	6033      	strmi	r3, [r6, #0]
 8001bba:	6825      	ldr	r5, [r4, #0]
 8001bbc:	f015 0506 	ands.w	r5, r5, #6
 8001bc0:	d106      	bne.n	8001bd0 <_printf_common+0x48>
 8001bc2:	f104 0a19 	add.w	sl, r4, #25
 8001bc6:	68e3      	ldr	r3, [r4, #12]
 8001bc8:	6832      	ldr	r2, [r6, #0]
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	42ab      	cmp	r3, r5
 8001bce:	dc26      	bgt.n	8001c1e <_printf_common+0x96>
 8001bd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	3b00      	subs	r3, #0
 8001bd8:	bf18      	it	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	0692      	lsls	r2, r2, #26
 8001bde:	d42b      	bmi.n	8001c38 <_printf_common+0xb0>
 8001be0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001be4:	4641      	mov	r1, r8
 8001be6:	4638      	mov	r0, r7
 8001be8:	47c8      	blx	r9
 8001bea:	3001      	adds	r0, #1
 8001bec:	d01e      	beq.n	8001c2c <_printf_common+0xa4>
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	6922      	ldr	r2, [r4, #16]
 8001bf2:	f003 0306 	and.w	r3, r3, #6
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf02      	ittt	eq
 8001bfa:	68e5      	ldreq	r5, [r4, #12]
 8001bfc:	6833      	ldreq	r3, [r6, #0]
 8001bfe:	1aed      	subeq	r5, r5, r3
 8001c00:	68a3      	ldr	r3, [r4, #8]
 8001c02:	bf0c      	ite	eq
 8001c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c08:	2500      	movne	r5, #0
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	bfc4      	itt	gt
 8001c0e:	1a9b      	subgt	r3, r3, r2
 8001c10:	18ed      	addgt	r5, r5, r3
 8001c12:	2600      	movs	r6, #0
 8001c14:	341a      	adds	r4, #26
 8001c16:	42b5      	cmp	r5, r6
 8001c18:	d11a      	bne.n	8001c50 <_printf_common+0xc8>
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	e008      	b.n	8001c30 <_printf_common+0xa8>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	4652      	mov	r2, sl
 8001c22:	4641      	mov	r1, r8
 8001c24:	4638      	mov	r0, r7
 8001c26:	47c8      	blx	r9
 8001c28:	3001      	adds	r0, #1
 8001c2a:	d103      	bne.n	8001c34 <_printf_common+0xac>
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c34:	3501      	adds	r5, #1
 8001c36:	e7c6      	b.n	8001bc6 <_printf_common+0x3e>
 8001c38:	18e1      	adds	r1, r4, r3
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	2030      	movs	r0, #48	@ 0x30
 8001c3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c42:	4422      	add	r2, r4
 8001c44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	e7c7      	b.n	8001be0 <_printf_common+0x58>
 8001c50:	2301      	movs	r3, #1
 8001c52:	4622      	mov	r2, r4
 8001c54:	4641      	mov	r1, r8
 8001c56:	4638      	mov	r0, r7
 8001c58:	47c8      	blx	r9
 8001c5a:	3001      	adds	r0, #1
 8001c5c:	d0e6      	beq.n	8001c2c <_printf_common+0xa4>
 8001c5e:	3601      	adds	r6, #1
 8001c60:	e7d9      	b.n	8001c16 <_printf_common+0x8e>
	...

08001c64 <_printf_i>:
 8001c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c68:	7e0f      	ldrb	r7, [r1, #24]
 8001c6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c6c:	2f78      	cmp	r7, #120	@ 0x78
 8001c6e:	4691      	mov	r9, r2
 8001c70:	4680      	mov	r8, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	469a      	mov	sl, r3
 8001c76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c7a:	d807      	bhi.n	8001c8c <_printf_i+0x28>
 8001c7c:	2f62      	cmp	r7, #98	@ 0x62
 8001c7e:	d80a      	bhi.n	8001c96 <_printf_i+0x32>
 8001c80:	2f00      	cmp	r7, #0
 8001c82:	f000 80d2 	beq.w	8001e2a <_printf_i+0x1c6>
 8001c86:	2f58      	cmp	r7, #88	@ 0x58
 8001c88:	f000 80b9 	beq.w	8001dfe <_printf_i+0x19a>
 8001c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c94:	e03a      	b.n	8001d0c <_printf_i+0xa8>
 8001c96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c9a:	2b15      	cmp	r3, #21
 8001c9c:	d8f6      	bhi.n	8001c8c <_printf_i+0x28>
 8001c9e:	a101      	add	r1, pc, #4	@ (adr r1, 8001ca4 <_printf_i+0x40>)
 8001ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ca4:	08001cfd 	.word	0x08001cfd
 8001ca8:	08001d11 	.word	0x08001d11
 8001cac:	08001c8d 	.word	0x08001c8d
 8001cb0:	08001c8d 	.word	0x08001c8d
 8001cb4:	08001c8d 	.word	0x08001c8d
 8001cb8:	08001c8d 	.word	0x08001c8d
 8001cbc:	08001d11 	.word	0x08001d11
 8001cc0:	08001c8d 	.word	0x08001c8d
 8001cc4:	08001c8d 	.word	0x08001c8d
 8001cc8:	08001c8d 	.word	0x08001c8d
 8001ccc:	08001c8d 	.word	0x08001c8d
 8001cd0:	08001e11 	.word	0x08001e11
 8001cd4:	08001d3b 	.word	0x08001d3b
 8001cd8:	08001dcb 	.word	0x08001dcb
 8001cdc:	08001c8d 	.word	0x08001c8d
 8001ce0:	08001c8d 	.word	0x08001c8d
 8001ce4:	08001e33 	.word	0x08001e33
 8001ce8:	08001c8d 	.word	0x08001c8d
 8001cec:	08001d3b 	.word	0x08001d3b
 8001cf0:	08001c8d 	.word	0x08001c8d
 8001cf4:	08001c8d 	.word	0x08001c8d
 8001cf8:	08001dd3 	.word	0x08001dd3
 8001cfc:	6833      	ldr	r3, [r6, #0]
 8001cfe:	1d1a      	adds	r2, r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6032      	str	r2, [r6, #0]
 8001d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e09d      	b.n	8001e4c <_printf_i+0x1e8>
 8001d10:	6833      	ldr	r3, [r6, #0]
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	1d19      	adds	r1, r3, #4
 8001d16:	6031      	str	r1, [r6, #0]
 8001d18:	0606      	lsls	r6, r0, #24
 8001d1a:	d501      	bpl.n	8001d20 <_printf_i+0xbc>
 8001d1c:	681d      	ldr	r5, [r3, #0]
 8001d1e:	e003      	b.n	8001d28 <_printf_i+0xc4>
 8001d20:	0645      	lsls	r5, r0, #25
 8001d22:	d5fb      	bpl.n	8001d1c <_printf_i+0xb8>
 8001d24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d28:	2d00      	cmp	r5, #0
 8001d2a:	da03      	bge.n	8001d34 <_printf_i+0xd0>
 8001d2c:	232d      	movs	r3, #45	@ 0x2d
 8001d2e:	426d      	negs	r5, r5
 8001d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d34:	4859      	ldr	r0, [pc, #356]	@ (8001e9c <_printf_i+0x238>)
 8001d36:	230a      	movs	r3, #10
 8001d38:	e011      	b.n	8001d5e <_printf_i+0xfa>
 8001d3a:	6821      	ldr	r1, [r4, #0]
 8001d3c:	6833      	ldr	r3, [r6, #0]
 8001d3e:	0608      	lsls	r0, r1, #24
 8001d40:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d44:	d402      	bmi.n	8001d4c <_printf_i+0xe8>
 8001d46:	0649      	lsls	r1, r1, #25
 8001d48:	bf48      	it	mi
 8001d4a:	b2ad      	uxthmi	r5, r5
 8001d4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d4e:	4853      	ldr	r0, [pc, #332]	@ (8001e9c <_printf_i+0x238>)
 8001d50:	6033      	str	r3, [r6, #0]
 8001d52:	bf14      	ite	ne
 8001d54:	230a      	movne	r3, #10
 8001d56:	2308      	moveq	r3, #8
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d5e:	6866      	ldr	r6, [r4, #4]
 8001d60:	60a6      	str	r6, [r4, #8]
 8001d62:	2e00      	cmp	r6, #0
 8001d64:	bfa2      	ittt	ge
 8001d66:	6821      	ldrge	r1, [r4, #0]
 8001d68:	f021 0104 	bicge.w	r1, r1, #4
 8001d6c:	6021      	strge	r1, [r4, #0]
 8001d6e:	b90d      	cbnz	r5, 8001d74 <_printf_i+0x110>
 8001d70:	2e00      	cmp	r6, #0
 8001d72:	d04b      	beq.n	8001e0c <_printf_i+0x1a8>
 8001d74:	4616      	mov	r6, r2
 8001d76:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d7a:	fb03 5711 	mls	r7, r3, r1, r5
 8001d7e:	5dc7      	ldrb	r7, [r0, r7]
 8001d80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d84:	462f      	mov	r7, r5
 8001d86:	42bb      	cmp	r3, r7
 8001d88:	460d      	mov	r5, r1
 8001d8a:	d9f4      	bls.n	8001d76 <_printf_i+0x112>
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d10b      	bne.n	8001da8 <_printf_i+0x144>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	07df      	lsls	r7, r3, #31
 8001d94:	d508      	bpl.n	8001da8 <_printf_i+0x144>
 8001d96:	6923      	ldr	r3, [r4, #16]
 8001d98:	6861      	ldr	r1, [r4, #4]
 8001d9a:	4299      	cmp	r1, r3
 8001d9c:	bfde      	ittt	le
 8001d9e:	2330      	movle	r3, #48	@ 0x30
 8001da0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001da4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001da8:	1b92      	subs	r2, r2, r6
 8001daa:	6122      	str	r2, [r4, #16]
 8001dac:	f8cd a000 	str.w	sl, [sp]
 8001db0:	464b      	mov	r3, r9
 8001db2:	aa03      	add	r2, sp, #12
 8001db4:	4621      	mov	r1, r4
 8001db6:	4640      	mov	r0, r8
 8001db8:	f7ff fee6 	bl	8001b88 <_printf_common>
 8001dbc:	3001      	adds	r0, #1
 8001dbe:	d14a      	bne.n	8001e56 <_printf_i+0x1f2>
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	b004      	add	sp, #16
 8001dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	f043 0320 	orr.w	r3, r3, #32
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	4833      	ldr	r0, [pc, #204]	@ (8001ea0 <_printf_i+0x23c>)
 8001dd4:	2778      	movs	r7, #120	@ 0x78
 8001dd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	6831      	ldr	r1, [r6, #0]
 8001dde:	061f      	lsls	r7, r3, #24
 8001de0:	f851 5b04 	ldr.w	r5, [r1], #4
 8001de4:	d402      	bmi.n	8001dec <_printf_i+0x188>
 8001de6:	065f      	lsls	r7, r3, #25
 8001de8:	bf48      	it	mi
 8001dea:	b2ad      	uxthmi	r5, r5
 8001dec:	6031      	str	r1, [r6, #0]
 8001dee:	07d9      	lsls	r1, r3, #31
 8001df0:	bf44      	itt	mi
 8001df2:	f043 0320 	orrmi.w	r3, r3, #32
 8001df6:	6023      	strmi	r3, [r4, #0]
 8001df8:	b11d      	cbz	r5, 8001e02 <_printf_i+0x19e>
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	e7ac      	b.n	8001d58 <_printf_i+0xf4>
 8001dfe:	4827      	ldr	r0, [pc, #156]	@ (8001e9c <_printf_i+0x238>)
 8001e00:	e7e9      	b.n	8001dd6 <_printf_i+0x172>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	f023 0320 	bic.w	r3, r3, #32
 8001e08:	6023      	str	r3, [r4, #0]
 8001e0a:	e7f6      	b.n	8001dfa <_printf_i+0x196>
 8001e0c:	4616      	mov	r6, r2
 8001e0e:	e7bd      	b.n	8001d8c <_printf_i+0x128>
 8001e10:	6833      	ldr	r3, [r6, #0]
 8001e12:	6825      	ldr	r5, [r4, #0]
 8001e14:	6961      	ldr	r1, [r4, #20]
 8001e16:	1d18      	adds	r0, r3, #4
 8001e18:	6030      	str	r0, [r6, #0]
 8001e1a:	062e      	lsls	r6, r5, #24
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	d501      	bpl.n	8001e24 <_printf_i+0x1c0>
 8001e20:	6019      	str	r1, [r3, #0]
 8001e22:	e002      	b.n	8001e2a <_printf_i+0x1c6>
 8001e24:	0668      	lsls	r0, r5, #25
 8001e26:	d5fb      	bpl.n	8001e20 <_printf_i+0x1bc>
 8001e28:	8019      	strh	r1, [r3, #0]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6123      	str	r3, [r4, #16]
 8001e2e:	4616      	mov	r6, r2
 8001e30:	e7bc      	b.n	8001dac <_printf_i+0x148>
 8001e32:	6833      	ldr	r3, [r6, #0]
 8001e34:	1d1a      	adds	r2, r3, #4
 8001e36:	6032      	str	r2, [r6, #0]
 8001e38:	681e      	ldr	r6, [r3, #0]
 8001e3a:	6862      	ldr	r2, [r4, #4]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f7fe f9ce 	bl	80001e0 <memchr>
 8001e44:	b108      	cbz	r0, 8001e4a <_printf_i+0x1e6>
 8001e46:	1b80      	subs	r0, r0, r6
 8001e48:	6060      	str	r0, [r4, #4]
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	6123      	str	r3, [r4, #16]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e54:	e7aa      	b.n	8001dac <_printf_i+0x148>
 8001e56:	6923      	ldr	r3, [r4, #16]
 8001e58:	4632      	mov	r2, r6
 8001e5a:	4649      	mov	r1, r9
 8001e5c:	4640      	mov	r0, r8
 8001e5e:	47d0      	blx	sl
 8001e60:	3001      	adds	r0, #1
 8001e62:	d0ad      	beq.n	8001dc0 <_printf_i+0x15c>
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	079b      	lsls	r3, r3, #30
 8001e68:	d413      	bmi.n	8001e92 <_printf_i+0x22e>
 8001e6a:	68e0      	ldr	r0, [r4, #12]
 8001e6c:	9b03      	ldr	r3, [sp, #12]
 8001e6e:	4298      	cmp	r0, r3
 8001e70:	bfb8      	it	lt
 8001e72:	4618      	movlt	r0, r3
 8001e74:	e7a6      	b.n	8001dc4 <_printf_i+0x160>
 8001e76:	2301      	movs	r3, #1
 8001e78:	4632      	mov	r2, r6
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	47d0      	blx	sl
 8001e80:	3001      	adds	r0, #1
 8001e82:	d09d      	beq.n	8001dc0 <_printf_i+0x15c>
 8001e84:	3501      	adds	r5, #1
 8001e86:	68e3      	ldr	r3, [r4, #12]
 8001e88:	9903      	ldr	r1, [sp, #12]
 8001e8a:	1a5b      	subs	r3, r3, r1
 8001e8c:	42ab      	cmp	r3, r5
 8001e8e:	dcf2      	bgt.n	8001e76 <_printf_i+0x212>
 8001e90:	e7eb      	b.n	8001e6a <_printf_i+0x206>
 8001e92:	2500      	movs	r5, #0
 8001e94:	f104 0619 	add.w	r6, r4, #25
 8001e98:	e7f5      	b.n	8001e86 <_printf_i+0x222>
 8001e9a:	bf00      	nop
 8001e9c:	08002099 	.word	0x08002099
 8001ea0:	080020aa 	.word	0x080020aa

08001ea4 <memmove>:
 8001ea4:	4288      	cmp	r0, r1
 8001ea6:	b510      	push	{r4, lr}
 8001ea8:	eb01 0402 	add.w	r4, r1, r2
 8001eac:	d902      	bls.n	8001eb4 <memmove+0x10>
 8001eae:	4284      	cmp	r4, r0
 8001eb0:	4623      	mov	r3, r4
 8001eb2:	d807      	bhi.n	8001ec4 <memmove+0x20>
 8001eb4:	1e43      	subs	r3, r0, #1
 8001eb6:	42a1      	cmp	r1, r4
 8001eb8:	d008      	beq.n	8001ecc <memmove+0x28>
 8001eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ec2:	e7f8      	b.n	8001eb6 <memmove+0x12>
 8001ec4:	4402      	add	r2, r0
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	d100      	bne.n	8001ece <memmove+0x2a>
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ed6:	e7f7      	b.n	8001ec8 <memmove+0x24>

08001ed8 <_sbrk_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	4d06      	ldr	r5, [pc, #24]	@ (8001ef4 <_sbrk_r+0x1c>)
 8001edc:	2300      	movs	r3, #0
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	602b      	str	r3, [r5, #0]
 8001ee4:	f7ff fac2 	bl	800146c <_sbrk>
 8001ee8:	1c43      	adds	r3, r0, #1
 8001eea:	d102      	bne.n	8001ef2 <_sbrk_r+0x1a>
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	b103      	cbz	r3, 8001ef2 <_sbrk_r+0x1a>
 8001ef0:	6023      	str	r3, [r4, #0]
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
 8001ef4:	2000033c 	.word	0x2000033c

08001ef8 <memcpy>:
 8001ef8:	440a      	add	r2, r1
 8001efa:	4291      	cmp	r1, r2
 8001efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f00:	d100      	bne.n	8001f04 <memcpy+0xc>
 8001f02:	4770      	bx	lr
 8001f04:	b510      	push	{r4, lr}
 8001f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f0e:	4291      	cmp	r1, r2
 8001f10:	d1f9      	bne.n	8001f06 <memcpy+0xe>
 8001f12:	bd10      	pop	{r4, pc}

08001f14 <_realloc_r>:
 8001f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f18:	4680      	mov	r8, r0
 8001f1a:	4615      	mov	r5, r2
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	b921      	cbnz	r1, 8001f2a <_realloc_r+0x16>
 8001f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f24:	4611      	mov	r1, r2
 8001f26:	f7ff bc4b 	b.w	80017c0 <_malloc_r>
 8001f2a:	b92a      	cbnz	r2, 8001f38 <_realloc_r+0x24>
 8001f2c:	f7ff fbdc 	bl	80016e8 <_free_r>
 8001f30:	2400      	movs	r4, #0
 8001f32:	4620      	mov	r0, r4
 8001f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f38:	f000 f81a 	bl	8001f70 <_malloc_usable_size_r>
 8001f3c:	4285      	cmp	r5, r0
 8001f3e:	4606      	mov	r6, r0
 8001f40:	d802      	bhi.n	8001f48 <_realloc_r+0x34>
 8001f42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001f46:	d8f4      	bhi.n	8001f32 <_realloc_r+0x1e>
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4640      	mov	r0, r8
 8001f4c:	f7ff fc38 	bl	80017c0 <_malloc_r>
 8001f50:	4607      	mov	r7, r0
 8001f52:	2800      	cmp	r0, #0
 8001f54:	d0ec      	beq.n	8001f30 <_realloc_r+0x1c>
 8001f56:	42b5      	cmp	r5, r6
 8001f58:	462a      	mov	r2, r5
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	bf28      	it	cs
 8001f5e:	4632      	movcs	r2, r6
 8001f60:	f7ff ffca 	bl	8001ef8 <memcpy>
 8001f64:	4621      	mov	r1, r4
 8001f66:	4640      	mov	r0, r8
 8001f68:	f7ff fbbe 	bl	80016e8 <_free_r>
 8001f6c:	463c      	mov	r4, r7
 8001f6e:	e7e0      	b.n	8001f32 <_realloc_r+0x1e>

08001f70 <_malloc_usable_size_r>:
 8001f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f74:	1f18      	subs	r0, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bfbc      	itt	lt
 8001f7a:	580b      	ldrlt	r3, [r1, r0]
 8001f7c:	18c0      	addlt	r0, r0, r3
 8001f7e:	4770      	bx	lr

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
