
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08001f50  08001f50  00002f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002074  08002074  00004054  2**0
                  CONTENTS
  4 .ARM          00000008  08002074  08002074  00003074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800207c  0800207c  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002080  08002080  00003080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002084  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004054  2**0
                  CONTENTS
 10 .bss          000002f8  20000054  20000054  00004054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00004054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007396  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c2e  00000000  00000000  0000b41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  0000c048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000172  00000000  00000000  0000c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a445  00000000  00000000  0000c3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000428d  00000000  00000000  0002680f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f230  00000000  00000000  0002aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b9ccc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bc4  00000000  00000000  000b9d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000ba8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f38 	.word	0x08001f38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001f38 	.word	0x08001f38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <printConsole>:
	 serial.RX_Pin = USART1_RX_Pin.PA10;
	 USART_Init(&serial);
}

 void printConsole(char *msg, ...)
{
 8000280:	b40f      	push	{r0, r1, r2, r3}
 8000282:	b580      	push	{r7, lr}
 8000284:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 800028c:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000290:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000294:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8000298:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 800029c:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800029e:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002a2:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	3b14      	subs	r3, #20
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 80002b2:	f101 0120 	add.w	r1, r1, #32
 80002b6:	6809      	ldr	r1, [r1, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 f9bb 	bl	8001634 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 80002be:	2300      	movs	r3, #0
 80002c0:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80002c4:	f102 0214 	add.w	r2, r2, #20
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e020      	b.n	800030e <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 80002cc:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002d0:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 80002d4:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80002d8:	f103 0314 	add.w	r3, r3, #20
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <printConsole+0xc0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 80002e8:	bf00      	nop
 80002ea:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <printConsole+0xc0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 80002f8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80002fc:	f103 0314 	add.w	r3, r3, #20
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000308:	f102 0214 	add.w	r2, r2, #20
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	3b14      	subs	r3, #20
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff5b 	bl	80001d0 <strlen>
 800031a:	4603      	mov	r3, r0
 800031c:	1e5a      	subs	r2, r3, #1
 800031e:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000322:	f103 0314 	add.w	r3, r3, #20
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d2cf      	bcs.n	80002cc <printConsole+0x4c>
	}
}
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr
 8000340:	20000070 	.word	0x20000070

08000344 <DMA_Clock_Enable>:
 * DMA_Config structure.
 * 
 * @param config Pointer to the DMA configuration structure.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	if(config->controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0c      	ldr	r2, [pc, #48]	@ (8000384 <DMA_Clock_Enable+0x40>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d105      	bne.n	8000362 <DMA_Clock_Enable+0x1e>
 8000356:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <DMA_Clock_Enable+0x44>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	4a0b      	ldr	r2, [pc, #44]	@ (8000388 <DMA_Clock_Enable+0x44>)
 800035c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000360:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config->controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a09      	ldr	r2, [pc, #36]	@ (800038c <DMA_Clock_Enable+0x48>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d105      	bne.n	8000378 <DMA_Clock_Enable+0x34>
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <DMA_Clock_Enable+0x44>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <DMA_Clock_Enable+0x44>)
 8000372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40026000 	.word	0x40026000
 8000388:	40023800 	.word	0x40023800
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_Init>:
 * 
 * @param config Pointer to the DMA configuration structure.
 */

void DMA_Init(DMA_Config *config)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f7ff ffd3 	bl	8000344 <DMA_Clock_Enable>
	config -> stream -> CR |= config -> channel << DMA_SxCR_CHSEL_Pos;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	6819      	ldr	r1, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	065a      	lsls	r2, r3, #25
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> circular_mode;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	6819      	ldr	r1, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6a1a      	ldr	r2, [r3, #32]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	430a      	orrs	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> flow_control;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> priority_level;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	6819      	ldr	r1, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	695a      	ldr	r2, [r3, #20]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	430a      	orrs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_data_size;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	69da      	ldr	r2, [r3, #28]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_data_size;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	6819      	ldr	r1, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	699a      	ldr	r2, [r3, #24]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	430a      	orrs	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> transfer_direction;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	691a      	ldr	r2, [r3, #16]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	430a      	orrs	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> interrupts;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	430a      	orrs	r2, r1
 800042e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_pointer_increment;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800043a:	4619      	mov	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	430a      	orrs	r2, r1
 8000442:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_pointer_increment;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800044e:	4619      	mov	r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a25      	ldr	r2, [pc, #148]	@ (8000500 <GPIO_Clock_Enable+0xa0>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000470:	4b24      	ldr	r3, [pc, #144]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000474:	4a23      	ldr	r2, [pc, #140]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6313      	str	r3, [r2, #48]	@ 0x30
 800047c:	e039      	b.n	80004f2 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a21      	ldr	r2, [pc, #132]	@ (8000508 <GPIO_Clock_Enable+0xa8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8000486:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048a:	4a1e      	ldr	r2, [pc, #120]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 800048c:	f043 0302 	orr.w	r3, r3, #2
 8000490:	6313      	str	r3, [r2, #48]	@ 0x30
 8000492:	e02e      	b.n	80004f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a1d      	ldr	r2, [pc, #116]	@ (800050c <GPIO_Clock_Enable+0xac>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800049c:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a18      	ldr	r2, [pc, #96]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80004a8:	e023      	b.n	80004f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a18      	ldr	r2, [pc, #96]	@ (8000510 <GPIO_Clock_Enable+0xb0>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80004b2:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b6:	4a13      	ldr	r2, [pc, #76]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 80004b8:	f043 0308 	orr.w	r3, r3, #8
 80004bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004be:	e018      	b.n	80004f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <GPIO_Clock_Enable+0xb4>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80004d4:	e00d      	b.n	80004f2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000518 <GPIO_Clock_Enable+0xb8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <GPIO_Clock_Enable+0xa4>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	e002      	b.n	80004f2 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	e000      	b.n	80004f4 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40020000 	.word	0x40020000
 8000504:	40023800 	.word	0x40023800
 8000508:	40020400 	.word	0x40020400
 800050c:	40020800 	.word	0x40020800
 8000510:	40020c00 	.word	0x40020c00
 8000514:	40021000 	.word	0x40021000
 8000518:	40021c00 	.word	0x40021c00

0800051c <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	4608      	mov	r0, r1
 8000526:	4611      	mov	r1, r2
 8000528:	461a      	mov	r2, r3
 800052a:	4603      	mov	r3, r0
 800052c:	70fb      	strb	r3, [r7, #3]
 800052e:	460b      	mov	r3, r1
 8000530:	70bb      	strb	r3, [r7, #2]
 8000532:	4613      	mov	r3, r2
 8000534:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff ff92 	bl	8000460 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	78b9      	ldrb	r1, [r7, #2]
 8000542:	78fa      	ldrb	r2, [r7, #3]
 8000544:	0052      	lsls	r2, r2, #1
 8000546:	fa01 f202 	lsl.w	r2, r1, r2
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	7879      	ldrb	r1, [r7, #1]
 8000556:	78fa      	ldrb	r2, [r7, #3]
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	7c39      	ldrb	r1, [r7, #16]
 8000568:	78fa      	ldrb	r2, [r7, #3]
 800056a:	0052      	lsls	r2, r2, #1
 800056c:	fa01 f202 	lsl.w	r2, r1, r2
 8000570:	431a      	orrs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	7d39      	ldrb	r1, [r7, #20]
 800057c:	78fa      	ldrb	r2, [r7, #3]
 800057e:	0052      	lsls	r2, r2, #1
 8000580:	fa01 f202 	lsl.w	r2, r1, r2
 8000584:	431a      	orrs	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	2b07      	cmp	r3, #7
 800058e:	d80a      	bhi.n	80005a6 <GPIO_Pin_Init+0x8a>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	7e39      	ldrb	r1, [r7, #24]
 8000596:	78fa      	ldrb	r2, [r7, #3]
 8000598:	0092      	lsls	r2, r2, #2
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80005a4:	e00a      	b.n	80005bc <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005aa:	7e39      	ldrb	r1, [r7, #24]
 80005ac:	78fa      	ldrb	r2, [r7, #3]
 80005ae:	3a08      	subs	r2, #8
 80005b0:	0092      	lsls	r2, r2, #2
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SCK_PIN_INIT2>:




static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af04      	add	r7, sp, #16
 80005ca:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7c1b      	ldrb	r3, [r3, #16]
 80005d0:	22d2      	movs	r2, #210	@ 0xd2
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d10e      	bne.n	80005f4 <SCK_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80005d6:	2002      	movs	r0, #2
 80005d8:	2400      	movs	r4, #0
 80005da:	2303      	movs	r3, #3
 80005dc:	2200      	movs	r2, #0
 80005de:	2105      	movs	r1, #5
 80005e0:	9102      	str	r1, [sp, #8]
 80005e2:	9201      	str	r2, [sp, #4]
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4623      	mov	r3, r4
 80005e8:	4602      	mov	r2, r0
 80005ea:	210a      	movs	r1, #10
 80005ec:	4811      	ldr	r0, [pc, #68]	@ (8000634 <SCK_PIN_INIT2+0x70>)
 80005ee:	f7ff ff95 	bl	800051c <GPIO_Pin_Init>
 80005f2:	e019      	b.n	8000628 <SCK_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7c1b      	ldrb	r3, [r3, #16]
 80005f8:	22d5      	movs	r2, #213	@ 0xd5
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d10e      	bne.n	800061c <SCK_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80005fe:	2002      	movs	r0, #2
 8000600:	2400      	movs	r4, #0
 8000602:	2303      	movs	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	2105      	movs	r1, #5
 8000608:	9102      	str	r1, [sp, #8]
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4623      	mov	r3, r4
 8000610:	4602      	mov	r2, r0
 8000612:	210d      	movs	r1, #13
 8000614:	4807      	ldr	r0, [pc, #28]	@ (8000634 <SCK_PIN_INIT2+0x70>)
 8000616:	f7ff ff81 	bl	800051c <GPIO_Pin_Init>
 800061a:	e005      	b.n	8000628 <SCK_PIN_INIT2+0x64>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2201      	movs	r2, #1
 8000620:	77da      	strb	r2, [r3, #31]
		return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e000      	b.n	800062a <SCK_PIN_INIT2+0x66>
	}
	return 1;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	bf00      	nop
 8000634:	40020400 	.word	0x40020400

08000638 <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b087      	sub	sp, #28
 800063c:	af04      	add	r7, sp, #16
 800063e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7c9b      	ldrb	r3, [r3, #18]
 8000644:	22d1      	movs	r2, #209	@ 0xd1
 8000646:	4293      	cmp	r3, r2
 8000648:	d10e      	bne.n	8000668 <WS_PIN_INIT2+0x30>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800064a:	2002      	movs	r0, #2
 800064c:	2400      	movs	r4, #0
 800064e:	2303      	movs	r3, #3
 8000650:	2200      	movs	r2, #0
 8000652:	2105      	movs	r1, #5
 8000654:	9102      	str	r1, [sp, #8]
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	4623      	mov	r3, r4
 800065c:	4602      	mov	r2, r0
 800065e:	2109      	movs	r1, #9
 8000660:	4811      	ldr	r0, [pc, #68]	@ (80006a8 <WS_PIN_INIT2+0x70>)
 8000662:	f7ff ff5b 	bl	800051c <GPIO_Pin_Init>
 8000666:	e019      	b.n	800069c <WS_PIN_INIT2+0x64>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7c9b      	ldrb	r3, [r3, #18]
 800066c:	22d4      	movs	r2, #212	@ 0xd4
 800066e:	4293      	cmp	r3, r2
 8000670:	d10e      	bne.n	8000690 <WS_PIN_INIT2+0x58>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000672:	2002      	movs	r0, #2
 8000674:	2400      	movs	r4, #0
 8000676:	2303      	movs	r3, #3
 8000678:	2200      	movs	r2, #0
 800067a:	2105      	movs	r1, #5
 800067c:	9102      	str	r1, [sp, #8]
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	4623      	mov	r3, r4
 8000684:	4602      	mov	r2, r0
 8000686:	210c      	movs	r1, #12
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <WS_PIN_INIT2+0x70>)
 800068a:	f7ff ff47 	bl	800051c <GPIO_Pin_Init>
 800068e:	e005      	b.n	800069c <WS_PIN_INIT2+0x64>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	779a      	strb	r2, [r3, #30]
		return -1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e000      	b.n	800069e <WS_PIN_INIT2+0x66>
	}
	return 1;
 800069c:	2301      	movs	r3, #1
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020400 	.word	0x40020400

080006ac <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7c5b      	ldrb	r3, [r3, #17]
 80006b8:	22d5      	movs	r2, #213	@ 0xd5
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10e      	bne.n	80006dc <SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80006be:	2002      	movs	r0, #2
 80006c0:	2400      	movs	r4, #0
 80006c2:	2303      	movs	r3, #3
 80006c4:	2200      	movs	r2, #0
 80006c6:	2105      	movs	r1, #5
 80006c8:	9102      	str	r1, [sp, #8]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4623      	mov	r3, r4
 80006d0:	4602      	mov	r2, r0
 80006d2:	210f      	movs	r1, #15
 80006d4:	4811      	ldr	r0, [pc, #68]	@ (800071c <SD_PIN_Init2+0x70>)
 80006d6:	f7ff ff21 	bl	800051c <GPIO_Pin_Init>
 80006da:	e019      	b.n	8000710 <SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7c5b      	ldrb	r3, [r3, #17]
 80006e0:	22df      	movs	r2, #223	@ 0xdf
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d10e      	bne.n	8000704 <SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80006e6:	2002      	movs	r0, #2
 80006e8:	2400      	movs	r4, #0
 80006ea:	2303      	movs	r3, #3
 80006ec:	2200      	movs	r2, #0
 80006ee:	2105      	movs	r1, #5
 80006f0:	9102      	str	r1, [sp, #8]
 80006f2:	9201      	str	r2, [sp, #4]
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4623      	mov	r3, r4
 80006f8:	4602      	mov	r2, r0
 80006fa:	2103      	movs	r1, #3
 80006fc:	4808      	ldr	r0, [pc, #32]	@ (8000720 <SD_PIN_Init2+0x74>)
 80006fe:	f7ff ff0d 	bl	800051c <GPIO_Pin_Init>
 8000702:	e005      	b.n	8000710 <SD_PIN_Init2+0x64>
	}
	else{
		config->Error.SD_Pin_Error = true;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2201      	movs	r2, #1
 8000708:	775a      	strb	r2, [r3, #29]
		return -1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e000      	b.n	8000712 <SD_PIN_Init2+0x66>
	}
	return 1;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	bf00      	nop
 800071c:	40020400 	.word	0x40020400
 8000720:	40020800 	.word	0x40020800

08000724 <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b087      	sub	sp, #28
 8000728:	af04      	add	r7, sp, #16
 800072a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7bdb      	ldrb	r3, [r3, #15]
 8000730:	22ff      	movs	r2, #255	@ 0xff
 8000732:	4293      	cmp	r3, r2
 8000734:	d01a      	beq.n	800076c <MCK_PIN_Init2+0x48>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7bdb      	ldrb	r3, [r3, #15]
 800073a:	2225      	movs	r2, #37	@ 0x25
 800073c:	4293      	cmp	r3, r2
 800073e:	d10e      	bne.n	800075e <MCK_PIN_Init2+0x3a>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000740:	2002      	movs	r0, #2
 8000742:	2400      	movs	r4, #0
 8000744:	2303      	movs	r3, #3
 8000746:	2200      	movs	r2, #0
 8000748:	2105      	movs	r1, #5
 800074a:	9102      	str	r1, [sp, #8]
 800074c:	9201      	str	r2, [sp, #4]
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	4623      	mov	r3, r4
 8000752:	4602      	mov	r2, r0
 8000754:	2107      	movs	r1, #7
 8000756:	4808      	ldr	r0, [pc, #32]	@ (8000778 <MCK_PIN_Init2+0x54>)
 8000758:	f7ff fee0 	bl	800051c <GPIO_Pin_Init>
 800075c:	e006      	b.n	800076c <MCK_PIN_Init2+0x48>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2201      	movs	r2, #1
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e000      	b.n	800076e <MCK_PIN_Init2+0x4a>
		}
	}
	return 1;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	40020800 	.word	0x40020800

0800077c <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b087      	sub	sp, #28
 8000780:	af04      	add	r7, sp, #16
 8000782:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7cdb      	ldrb	r3, [r3, #19]
 8000788:	22d6      	movs	r2, #214	@ 0xd6
 800078a:	4293      	cmp	r3, r2
 800078c:	d10e      	bne.n	80007ac <EXT_SD_PIN_Init2+0x30>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800078e:	2002      	movs	r0, #2
 8000790:	2400      	movs	r4, #0
 8000792:	2303      	movs	r3, #3
 8000794:	2200      	movs	r2, #0
 8000796:	2105      	movs	r1, #5
 8000798:	9102      	str	r1, [sp, #8]
 800079a:	9201      	str	r2, [sp, #4]
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4623      	mov	r3, r4
 80007a0:	4602      	mov	r2, r0
 80007a2:	210e      	movs	r1, #14
 80007a4:	4811      	ldr	r0, [pc, #68]	@ (80007ec <EXT_SD_PIN_Init2+0x70>)
 80007a6:	f7ff feb9 	bl	800051c <GPIO_Pin_Init>
 80007aa:	e019      	b.n	80007e0 <EXT_SD_PIN_Init2+0x64>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7cdb      	ldrb	r3, [r3, #19]
 80007b0:	22ca      	movs	r2, #202	@ 0xca
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d10e      	bne.n	80007d4 <EXT_SD_PIN_Init2+0x58>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80007b6:	2002      	movs	r0, #2
 80007b8:	2400      	movs	r4, #0
 80007ba:	2303      	movs	r3, #3
 80007bc:	2200      	movs	r2, #0
 80007be:	2105      	movs	r1, #5
 80007c0:	9102      	str	r1, [sp, #8]
 80007c2:	9201      	str	r2, [sp, #4]
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	4623      	mov	r3, r4
 80007c8:	4602      	mov	r2, r0
 80007ca:	2102      	movs	r1, #2
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <EXT_SD_PIN_Init2+0x74>)
 80007ce:	f7ff fea5 	bl	800051c <GPIO_Pin_Init>
 80007d2:	e005      	b.n	80007e0 <EXT_SD_PIN_Init2+0x64>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2201      	movs	r2, #1
 80007d8:	771a      	strb	r2, [r3, #28]
		return -1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e000      	b.n	80007e2 <EXT_SD_PIN_Init2+0x66>
	}
	return 1;
 80007e0:	2301      	movs	r3, #1
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40020800 	.word	0x40020800

080007f4 <I2S_Init>:



/********************************************************************************************************/
int8_t I2S_Init(I2S_Config *config)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a90      	ldr	r2, [pc, #576]	@ (8000a44 <I2S_Init+0x250>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d119      	bne.n	800083a <I2S_Init+0x46>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000806:	4b90      	ldr	r3, [pc, #576]	@ (8000a48 <I2S_Init+0x254>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a8f      	ldr	r2, [pc, #572]	@ (8000a48 <I2S_Init+0x254>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40

		SD_PIN_Init2(config);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ff4a 	bl	80006ac <SD_PIN_Init2>
		WS_PIN_INIT2(config);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff0d 	bl	8000638 <WS_PIN_INIT2>
		SCK_PIN_INIT2(config);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fed0 	bl	80005c4 <SCK_PIN_INIT2>
		MCK_PIN_Init2(config);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff7d 	bl	8000724 <MCK_PIN_Init2>
		if(config->Full_Duplex.Enable == true){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7b5b      	ldrb	r3, [r3, #13]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d012      	beq.n	8000858 <I2S_Init+0x64>
			EXT_SD_PIN_Init2(config);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffa2 	bl	800077c <EXT_SD_PIN_Init2>
 8000838:	e00e      	b.n	8000858 <I2S_Init+0x64>





	}else if(config->Port == I2S_Port.I2S3)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a83      	ldr	r2, [pc, #524]	@ (8000a4c <I2S_Init+0x258>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d106      	bne.n	8000852 <I2S_Init+0x5e>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000844:	4b80      	ldr	r3, [pc, #512]	@ (8000a48 <I2S_Init+0x254>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a7f      	ldr	r2, [pc, #508]	@ (8000a48 <I2S_Init+0x254>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	e002      	b.n	8000858 <I2S_Init+0x64>

	}else{

		config->Error.Port_Error = true;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	769a      	strb	r2, [r3, #26]

	}



	config->Port->I2SCFGR |= 1 << 11;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	69da      	ldr	r2, [r3, #28]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000866:	61da      	str	r2, [r3, #28]


	// I2S Mode
	if(config->Full_Duplex.mode == I2S_Mode.Master.Transmit){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7b9b      	ldrb	r3, [r3, #14]
 800086c:	2201      	movs	r2, #1
 800086e:	4293      	cmp	r3, r2
 8000870:	d108      	bne.n	8000884 <I2S_Init+0x90>
		config->Port->I2SCFGR |= 2 << 8;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69da      	ldr	r2, [r3, #28]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000880:	61da      	str	r2, [r3, #28]
 8000882:	e028      	b.n	80008d6 <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Master.Receive){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7b9b      	ldrb	r3, [r3, #14]
 8000888:	2202      	movs	r2, #2
 800088a:	4293      	cmp	r3, r2
 800088c:	d108      	bne.n	80008a0 <I2S_Init+0xac>
		config->Port->I2SCFGR |= 3 << 8;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800089c:	61da      	str	r2, [r3, #28]
 800089e:	e01a      	b.n	80008d6 <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Transmit){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7b9b      	ldrb	r3, [r3, #14]
 80008a4:	2203      	movs	r2, #3
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d108      	bne.n	80008bc <I2S_Init+0xc8>
		config->Port->I2SCFGR &= ~(3 << 8);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69da      	ldr	r2, [r3, #28]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80008b8:	61da      	str	r2, [r3, #28]
 80008ba:	e00c      	b.n	80008d6 <I2S_Init+0xe2>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Receive){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7b9b      	ldrb	r3, [r3, #14]
 80008c0:	2204      	movs	r2, #4
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d107      	bne.n	80008d6 <I2S_Init+0xe2>
		config->Port->I2SCFGR |= (1 << 8);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80008d4:	61da      	str	r2, [r3, #28]
	}

	// Standard
	if(config->Standard == I2S_Standard.Standard_Philips){
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7a5b      	ldrb	r3, [r3, #9]
 80008da:	461a      	mov	r2, r3
 80008dc:	2301      	movs	r3, #1
 80008de:	429a      	cmp	r2, r3
 80008e0:	d108      	bne.n	80008f4 <I2S_Init+0x100>
		config->Port->I2SCFGR &= ~(3 << 4);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	69da      	ldr	r2, [r3, #28]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80008f0:	61da      	str	r2, [r3, #28]
 80008f2:	e030      	b.n	8000956 <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7a5b      	ldrb	r3, [r3, #9]
 80008f8:	461a      	mov	r2, r3
 80008fa:	2302      	movs	r3, #2
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d108      	bne.n	8000912 <I2S_Init+0x11e>
		config->Port->I2SCFGR |= (1 << 4);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	69da      	ldr	r2, [r3, #28]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0210 	orr.w	r2, r2, #16
 800090e:	61da      	str	r2, [r3, #28]
 8000910:	e021      	b.n	8000956 <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7a5b      	ldrb	r3, [r3, #9]
 8000916:	461a      	mov	r2, r3
 8000918:	2303      	movs	r3, #3
 800091a:	429a      	cmp	r2, r3
 800091c:	d108      	bne.n	8000930 <I2S_Init+0x13c>
		config->Port->I2SCFGR |= (2 << 4);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f042 0220 	orr.w	r2, r2, #32
 800092c:	61da      	str	r2, [r3, #28]
 800092e:	e012      	b.n	8000956 <I2S_Init+0x162>
	}else if(config->Standard == I2S_Standard.PCM){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7a5b      	ldrb	r3, [r3, #9]
 8000934:	461a      	mov	r2, r3
 8000936:	2304      	movs	r3, #4
 8000938:	429a      	cmp	r2, r3
 800093a:	d108      	bne.n	800094e <I2S_Init+0x15a>
		config->Port->I2SCFGR |= (3 << 4);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	69da      	ldr	r2, [r3, #28]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800094a:	61da      	str	r2, [r3, #28]
 800094c:	e003      	b.n	8000956 <I2S_Init+0x162>
	}else{
		config->Error.Standard_Error  = true;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2201      	movs	r2, #1
 8000952:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}

	if(config->Data_Length == I2S_Data_Length._16_bit){
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a9b      	ldrb	r3, [r3, #10]
 800095a:	461a      	mov	r2, r3
 800095c:	2301      	movs	r3, #1
 800095e:	429a      	cmp	r2, r3
 8000960:	d108      	bne.n	8000974 <I2S_Init+0x180>
		config->Port->I2SCFGR &= ~(3<<1);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	69da      	ldr	r2, [r3, #28]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f022 0206 	bic.w	r2, r2, #6
 8000970:	61da      	str	r2, [r3, #28]
 8000972:	e01d      	b.n	80009b0 <I2S_Init+0x1bc>
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a9b      	ldrb	r3, [r3, #10]
 8000978:	461a      	mov	r2, r3
 800097a:	2302      	movs	r3, #2
 800097c:	429a      	cmp	r2, r3
 800097e:	d106      	bne.n	800098e <I2S_Init+0x19a>
		config->Port->I2SCFGR |= (1<1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	69d2      	ldr	r2, [r2, #28]
 800098a:	61da      	str	r2, [r3, #28]
 800098c:	e010      	b.n	80009b0 <I2S_Init+0x1bc>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7a9b      	ldrb	r3, [r3, #10]
 8000992:	461a      	mov	r2, r3
 8000994:	2303      	movs	r3, #3
 8000996:	429a      	cmp	r2, r3
 8000998:	d106      	bne.n	80009a8 <I2S_Init+0x1b4>
		config->Port->I2SCFGR |= (2<1);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69d2      	ldr	r2, [r2, #28]
 80009a4:	61da      	str	r2, [r3, #28]
 80009a6:	e003      	b.n	80009b0 <I2S_Init+0x1bc>
	}else{
		config->Error.Data_Len_Error = true;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7adb      	ldrb	r3, [r3, #11]
 80009b4:	461a      	mov	r2, r3
 80009b6:	2301      	movs	r3, #1
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d108      	bne.n	80009ce <I2S_Init+0x1da>
		config->Port->I2SCFGR &= ~(1<<0);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	69da      	ldr	r2, [r3, #28]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 0201 	bic.w	r2, r2, #1
 80009ca:	61da      	str	r2, [r3, #28]
 80009cc:	e00e      	b.n	80009ec <I2S_Init+0x1f8>
	}else if(config->Channel_Length == I2S_Channel_Length._16_bit){
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7adb      	ldrb	r3, [r3, #11]
 80009d2:	461a      	mov	r2, r3
 80009d4:	2301      	movs	r3, #1
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d104      	bne.n	80009e4 <I2S_Init+0x1f0>
		config->Port->I2SCFGR =  (1<<0);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
 80009e2:	e003      	b.n	80009ec <I2S_Init+0x1f8>
	}else{
		config->Error.Channel_Length_Error = true;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2201      	movs	r2, #1
 80009e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}


	int plli2s_n = 128;
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	60fb      	str	r3, [r7, #12]
	int plli2s_r = 5;
 80009f0:	2305      	movs	r3, #5
 80009f2:	60bb      	str	r3, [r7, #8]
	if(config->Audio_Frequency == I2S_Audio_Frequency._8000KHz)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7b1b      	ldrb	r3, [r3, #12]
 80009f8:	2201      	movs	r2, #1
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d128      	bne.n	8000a50 <I2S_Init+0x25c>
	{
		//
		  plli2s_n = 64;
 80009fe:	2340      	movs	r3, #64	@ 0x40
 8000a00:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000a02:	2305      	movs	r3, #5
 8000a04:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	019a      	lsls	r2, r3, #6
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	071b      	lsls	r3, r3, #28
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <I2S_Init+0x254>)
 8000a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <I2S_Init+0x254>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a48 <I2S_Init+0x254>)
 8000a1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a20:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000a22:	bf00      	nop
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <I2S_Init+0x254>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f9      	beq.n	8000a24 <I2S_Init+0x230>
		config->Port->I2SPR |= 50;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6a1a      	ldr	r2, [r3, #32]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8000a3e:	621a      	str	r2, [r3, #32]
 8000a40:	e0e3      	b.n	8000c0a <I2S_Init+0x416>
 8000a42:	bf00      	nop
 8000a44:	40003800 	.word	0x40003800
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40003c00 	.word	0x40003c00
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._16000Hz)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7b1b      	ldrb	r3, [r3, #12]
 8000a54:	2202      	movs	r2, #2
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d121      	bne.n	8000a9e <I2S_Init+0x2aa>
	{
		//
		  plli2s_n = 128;
 8000a5a:	2380      	movs	r3, #128	@ 0x80
 8000a5c:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	019a      	lsls	r2, r3, #6
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	071b      	lsls	r3, r3, #28
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8000c2c <I2S_Init+0x438>)
 8000a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000a72:	4b6e      	ldr	r3, [pc, #440]	@ (8000c2c <I2S_Init+0x438>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a6d      	ldr	r2, [pc, #436]	@ (8000c2c <I2S_Init+0x438>)
 8000a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a7c:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000a7e:	bf00      	nop
 8000a80:	4b6a      	ldr	r3, [pc, #424]	@ (8000c2c <I2S_Init+0x438>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f9      	beq.n	8000a80 <I2S_Init+0x28c>
		config->Port->I2SPR |= 50;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6a1a      	ldr	r2, [r3, #32]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8000a9a:	621a      	str	r2, [r3, #32]
 8000a9c:	e0b5      	b.n	8000c0a <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._22050Hz)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	7b1b      	ldrb	r3, [r3, #12]
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	f000 80b0 	beq.w	8000c0a <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._32000Hz)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7b1b      	ldrb	r3, [r3, #12]
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d121      	bne.n	8000af8 <I2S_Init+0x304>
	{
		//
		  plli2s_n = 64;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000ab8:	2305      	movs	r3, #5
 8000aba:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	019a      	lsls	r2, r3, #6
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	071b      	lsls	r3, r3, #28
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4b59      	ldr	r3, [pc, #356]	@ (8000c2c <I2S_Init+0x438>)
 8000ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000acc:	4b57      	ldr	r3, [pc, #348]	@ (8000c2c <I2S_Init+0x438>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a56      	ldr	r2, [pc, #344]	@ (8000c2c <I2S_Init+0x438>)
 8000ad2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ad6:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000ad8:	bf00      	nop
 8000ada:	4b54      	ldr	r3, [pc, #336]	@ (8000c2c <I2S_Init+0x438>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f9      	beq.n	8000ada <I2S_Init+0x2e6>
		config->Port->I2SPR |= 12;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6a1a      	ldr	r2, [r3, #32]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 020c 	orr.w	r2, r2, #12
 8000af4:	621a      	str	r2, [r3, #32]
 8000af6:	e088      	b.n	8000c0a <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._44100Hz)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7b1b      	ldrb	r3, [r3, #12]
 8000afc:	2205      	movs	r2, #5
 8000afe:	4293      	cmp	r3, r2
 8000b00:	f000 8083 	beq.w	8000c0a <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._48000Hz)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7b1b      	ldrb	r3, [r3, #12]
 8000b08:	2206      	movs	r2, #6
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d121      	bne.n	8000b52 <I2S_Init+0x35e>
	{
		//
		  plli2s_n = 96;
 8000b0e:	2360      	movs	r3, #96	@ 0x60
 8000b10:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000b12:	2305      	movs	r3, #5
 8000b14:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	019a      	lsls	r2, r3, #6
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	071b      	lsls	r3, r3, #28
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	4b42      	ldr	r3, [pc, #264]	@ (8000c2c <I2S_Init+0x438>)
 8000b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000b26:	4b41      	ldr	r3, [pc, #260]	@ (8000c2c <I2S_Init+0x438>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a40      	ldr	r2, [pc, #256]	@ (8000c2c <I2S_Init+0x438>)
 8000b2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b30:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000b32:	bf00      	nop
 8000b34:	4b3d      	ldr	r3, [pc, #244]	@ (8000c2c <I2S_Init+0x438>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f9      	beq.n	8000b34 <I2S_Init+0x340>
		config->Port->I2SPR |= 12;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6a1a      	ldr	r2, [r3, #32]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f042 020c 	orr.w	r2, r2, #12
 8000b4e:	621a      	str	r2, [r3, #32]
 8000b50:	e05b      	b.n	8000c0a <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._64000Hz)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7b1b      	ldrb	r3, [r3, #12]
 8000b56:	2207      	movs	r2, #7
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d121      	bne.n	8000ba0 <I2S_Init+0x3ac>
	{
		//
		  plli2s_n = 128;
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000b60:	2305      	movs	r3, #5
 8000b62:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	019a      	lsls	r2, r3, #6
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	071b      	lsls	r3, r3, #28
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <I2S_Init+0x438>)
 8000b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000b74:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <I2S_Init+0x438>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a2c      	ldr	r2, [pc, #176]	@ (8000c2c <I2S_Init+0x438>)
 8000b7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b7e:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000b80:	bf00      	nop
 8000b82:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <I2S_Init+0x438>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f9      	beq.n	8000b82 <I2S_Init+0x38e>
		config->Port->I2SPR |= 12;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a1a      	ldr	r2, [r3, #32]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 020c 	orr.w	r2, r2, #12
 8000b9c:	621a      	str	r2, [r3, #32]
 8000b9e:	e034      	b.n	8000c0a <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._96000Hz)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d121      	bne.n	8000bee <I2S_Init+0x3fa>
	{
		//
		  plli2s_n = 192;
 8000baa:	23c0      	movs	r3, #192	@ 0xc0
 8000bac:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	019a      	lsls	r2, r3, #6
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	071b      	lsls	r3, r3, #28
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <I2S_Init+0x438>)
 8000bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <I2S_Init+0x438>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a19      	ldr	r2, [pc, #100]	@ (8000c2c <I2S_Init+0x438>)
 8000bc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bcc:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000bce:	bf00      	nop
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <I2S_Init+0x438>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f9      	beq.n	8000bd0 <I2S_Init+0x3dc>
		config->Port->I2SPR |= 12;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 020c 	orr.w	r2, r2, #12
 8000bea:	621a      	str	r2, [r3, #32]
 8000bec:	e00d      	b.n	8000c0a <I2S_Init+0x416>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._192000Hz)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7b1b      	ldrb	r3, [r3, #12]
 8000bf2:	2209      	movs	r2, #9
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d008      	beq.n	8000c0a <I2S_Init+0x416>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._384000Hz)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7b1b      	ldrb	r3, [r3, #12]
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d003      	beq.n	8000c0a <I2S_Init+0x416>
	{
		//
	}else
	{
		config->Error.Audio_Frequency_Error = true;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	//  I2S Enable
	config->Port->I2SCFGR |= 1 << 10;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	69da      	ldr	r2, [r3, #28]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c18:	61da      	str	r2, [r3, #28]


	I2S_Mode_Set(config);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f878 	bl	8000d10 <I2S_Mode_Set>

	return 1;
 8000c20:	2301      	movs	r3, #1

}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <I2S_Print_Errors>:
/********************************************************************************************************/
/********************************************************************************************************/
void I2S_Print_Errors(I2S_Config *config)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if(config->Error.Audio_Frequency_Error) printConsole("Audio_Frequency_Error \r\n");
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <I2S_Print_Errors+0x18>
 8000c42:	4828      	ldr	r0, [pc, #160]	@ (8000ce4 <I2S_Print_Errors+0xb4>)
 8000c44:	f7ff fb1c 	bl	8000280 <printConsole>
	if(config->Error.Channel_Length_Error) printConsole("Channel_Length_Error \r\n");
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <I2S_Print_Errors+0x28>
 8000c52:	4825      	ldr	r0, [pc, #148]	@ (8000ce8 <I2S_Print_Errors+0xb8>)
 8000c54:	f7ff fb14 	bl	8000280 <printConsole>
	if(config->Error.Data_Len_Error) printConsole("Data_Len_Error \r\n");
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <I2S_Print_Errors+0x38>
 8000c62:	4822      	ldr	r0, [pc, #136]	@ (8000cec <I2S_Print_Errors+0xbc>)
 8000c64:	f7ff fb0c 	bl	8000280 <printConsole>
	if(config->Error.Ext_SD_Pin_Error) printConsole("Ext_SD_Pin_Error \r\n");
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7f1b      	ldrb	r3, [r3, #28]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <I2S_Print_Errors+0x46>
 8000c70:	481f      	ldr	r0, [pc, #124]	@ (8000cf0 <I2S_Print_Errors+0xc0>)
 8000c72:	f7ff fb05 	bl	8000280 <printConsole>
	if(config->Error.MCK_PIN_Error) printConsole("MCK_PIN_Error \r\n");
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <I2S_Print_Errors+0x56>
 8000c80:	481c      	ldr	r0, [pc, #112]	@ (8000cf4 <I2S_Print_Errors+0xc4>)
 8000c82:	f7ff fafd 	bl	8000280 <printConsole>
	if(config->Error.Mode_Error) printConsole("Mode_Error \r\n");
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7edb      	ldrb	r3, [r3, #27]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <I2S_Print_Errors+0x64>
 8000c8e:	481a      	ldr	r0, [pc, #104]	@ (8000cf8 <I2S_Print_Errors+0xc8>)
 8000c90:	f7ff faf6 	bl	8000280 <printConsole>
	if(config->Error.Port_Error) printConsole("Port_Error \r\n");
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e9b      	ldrb	r3, [r3, #26]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <I2S_Print_Errors+0x72>
 8000c9c:	4817      	ldr	r0, [pc, #92]	@ (8000cfc <I2S_Print_Errors+0xcc>)
 8000c9e:	f7ff faef 	bl	8000280 <printConsole>
	if(config->Error.SCK_Pin_Error) printConsole("SCK_Pin_Error \r\n");
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7fdb      	ldrb	r3, [r3, #31]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <I2S_Print_Errors+0x80>
 8000caa:	4815      	ldr	r0, [pc, #84]	@ (8000d00 <I2S_Print_Errors+0xd0>)
 8000cac:	f7ff fae8 	bl	8000280 <printConsole>
	if(config->Error.SD_Pin_Error) printConsole("SD_Pin_Error \r\n");
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7f5b      	ldrb	r3, [r3, #29]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <I2S_Print_Errors+0x8e>
 8000cb8:	4812      	ldr	r0, [pc, #72]	@ (8000d04 <I2S_Print_Errors+0xd4>)
 8000cba:	f7ff fae1 	bl	8000280 <printConsole>
	if(config->Error.Standard_Error) printConsole("Standard_Error \r\n");
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <I2S_Print_Errors+0x9e>
 8000cc8:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <I2S_Print_Errors+0xd8>)
 8000cca:	f7ff fad9 	bl	8000280 <printConsole>
	if(config->Error.WS_Pin_Error) printConsole("WS_Pin_Error \r\n");
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7f9b      	ldrb	r3, [r3, #30]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <I2S_Print_Errors+0xac>
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <I2S_Print_Errors+0xdc>)
 8000cd8:	f7ff fad2 	bl	8000280 <printConsole>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	08001f50 	.word	0x08001f50
 8000ce8:	08001f6c 	.word	0x08001f6c
 8000cec:	08001f84 	.word	0x08001f84
 8000cf0:	08001f98 	.word	0x08001f98
 8000cf4:	08001fac 	.word	0x08001fac
 8000cf8:	08001fc0 	.word	0x08001fc0
 8000cfc:	08001fd0 	.word	0x08001fd0
 8000d00:	08001fe0 	.word	0x08001fe0
 8000d04:	08001ff4 	.word	0x08001ff4
 8000d08:	08002004 	.word	0x08002004
 8000d0c:	08002018 	.word	0x08002018

08000d10 <I2S_Mode_Set>:


}
/********************************************************************************************************/
int8_t I2S_Mode_Set(I2S_Config *config)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
	if(config->Port == I2S_Port.I2S2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a93      	ldr	r2, [pc, #588]	@ (8000f70 <I2S_Mode_Set+0x260>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	f040 8202 	bne.w	800112c <I2S_Mode_Set+0x41c>
	{
		if(config->Full_Duplex.Enable == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7b5b      	ldrb	r3, [r3, #13]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 8155 	beq.w	8000fdc <I2S_Mode_Set+0x2cc>
		{
			if((config->Full_Duplex.mode == I2S_Mode.Master.Receive) || config->Full_Duplex.mode == I2S_Mode.Slave.Receive)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7b9b      	ldrb	r3, [r3, #14]
 8000d36:	2202      	movs	r2, #2
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d005      	beq.n	8000d48 <I2S_Mode_Set+0x38>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7b9b      	ldrb	r3, [r3, #14]
 8000d40:	2204      	movs	r2, #4
 8000d42:	4293      	cmp	r3, r2
 8000d44:	f040 808f 	bne.w	8000e66 <I2S_Mode_Set+0x156>
			{
				I2S2_DMA_Full_Duplex.Receiver.RX.channel = 0;
 8000d48:	4b8a      	ldr	r3, [pc, #552]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
				I2S2_DMA_Full_Duplex.Receiver.RX.stream = DMA1_Stream3;
 8000d4e:	4b89      	ldr	r3, [pc, #548]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d50:	4a89      	ldr	r2, [pc, #548]	@ (8000f78 <I2S_Mode_Set+0x268>)
 8000d52:	605a      	str	r2, [r3, #4]
				I2S2_DMA_Full_Duplex.Receiver.RX.circular_mode = DMA_Circular_Mode.Disable;
 8000d54:	2200      	movs	r2, #0
 8000d56:	4b87      	ldr	r3, [pc, #540]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d58:	621a      	str	r2, [r3, #32]
				I2S2_DMA_Full_Duplex.Receiver.RX.controller = DMA1;
 8000d5a:	4b86      	ldr	r3, [pc, #536]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d5c:	4a87      	ldr	r2, [pc, #540]	@ (8000f7c <I2S_Mode_Set+0x26c>)
 8000d5e:	601a      	str	r2, [r3, #0]
				I2S2_DMA_Full_Duplex.Receiver.RX.flow_control = DMA_Flow_Control.DMA_Control;
 8000d60:	2200      	movs	r2, #0
 8000d62:	4b84      	ldr	r3, [pc, #528]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d64:	60da      	str	r2, [r3, #12]
				I2S2_DMA_Full_Duplex.Receiver.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000d66:	2208      	movs	r2, #8
 8000d68:	2310      	movs	r3, #16
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	4a81      	ldr	r2, [pc, #516]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d6e:	6253      	str	r3, [r2, #36]	@ 0x24
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7a9b      	ldrb	r3, [r3, #10]
 8000d74:	461a      	mov	r2, r3
 8000d76:	2301      	movs	r3, #1
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d108      	bne.n	8000d8e <I2S_Mode_Set+0x7e>
				{
					I2S2_DMA_Full_Duplex.Receiver.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000d7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d80:	4b7c      	ldr	r3, [pc, #496]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d82:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000d84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d88:	4b7a      	ldr	r3, [pc, #488]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000d8a:	619a      	str	r2, [r3, #24]
 8000d8c:	e013      	b.n	8000db6 <I2S_Mode_Set+0xa6>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7a9b      	ldrb	r3, [r3, #10]
 8000d92:	461a      	mov	r2, r3
 8000d94:	2302      	movs	r3, #2
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d005      	beq.n	8000da6 <I2S_Mode_Set+0x96>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a9b      	ldrb	r3, [r3, #10]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	2303      	movs	r3, #3
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d107      	bne.n	8000db6 <I2S_Mode_Set+0xa6>
				{
					I2S2_DMA_Full_Duplex.Receiver.RX.memory_data_size = DMA_Memory_Data_Size.word;
 8000da6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000daa:	4b72      	ldr	r3, [pc, #456]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000dac:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000dae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db2:	4b70      	ldr	r3, [pc, #448]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000db4:	619a      	str	r2, [r3, #24]
				}
				I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000db6:	2300      	movs	r3, #0
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b6e      	ldr	r3, [pc, #440]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000dbc:	869a      	strh	r2, [r3, #52]	@ 0x34
				I2S2_DMA_Full_Duplex.Receiver.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000dc6:	865a      	strh	r2, [r3, #50]	@ 0x32
				I2S2_DMA_Full_Duplex.Receiver.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4b6a      	ldr	r3, [pc, #424]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000dcc:	611a      	str	r2, [r3, #16]

				DMA_Init(&I2S2_DMA_Full_Duplex.Receiver.RX);
 8000dce:	4869      	ldr	r0, [pc, #420]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000dd0:	f7ff fade 	bl	8000390 <DMA_Init>

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

				I2S2_DMA_Full_Duplex.Receiver.TX.channel = 2;
 8000dd4:	4b67      	ldr	r3, [pc, #412]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	641a      	str	r2, [r3, #64]	@ 0x40
				I2S2_DMA_Full_Duplex.Receiver.TX.stream = DMA1_Stream4;
 8000dda:	4b66      	ldr	r3, [pc, #408]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000ddc:	4a68      	ldr	r2, [pc, #416]	@ (8000f80 <I2S_Mode_Set+0x270>)
 8000dde:	63da      	str	r2, [r3, #60]	@ 0x3c
				I2S2_DMA_Full_Duplex.Receiver.TX.circular_mode = DMA_Circular_Mode.Disable;
 8000de0:	2200      	movs	r2, #0
 8000de2:	4b64      	ldr	r3, [pc, #400]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000de4:	659a      	str	r2, [r3, #88]	@ 0x58
				I2S2_DMA_Full_Duplex.Receiver.TX.controller = DMA1;
 8000de6:	4b63      	ldr	r3, [pc, #396]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000de8:	4a64      	ldr	r2, [pc, #400]	@ (8000f7c <I2S_Mode_Set+0x26c>)
 8000dea:	639a      	str	r2, [r3, #56]	@ 0x38
				I2S2_DMA_Full_Duplex.Receiver.TX.flow_control = DMA_Flow_Control.DMA_Control;
 8000dec:	2200      	movs	r2, #0
 8000dee:	4b61      	ldr	r3, [pc, #388]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000df0:	645a      	str	r2, [r3, #68]	@ 0x44
				I2S2_DMA_Full_Duplex.Receiver.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000df2:	2208      	movs	r2, #8
 8000df4:	2310      	movs	r3, #16
 8000df6:	4313      	orrs	r3, r2
 8000df8:	4a5e      	ldr	r2, [pc, #376]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000dfa:	65d3      	str	r3, [r2, #92]	@ 0x5c
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7a9b      	ldrb	r3, [r3, #10]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2301      	movs	r3, #1
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d108      	bne.n	8000e1a <I2S_Mode_Set+0x10a>
				{
					I2S2_DMA_Full_Duplex.Receiver.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e0c:	4b59      	ldr	r3, [pc, #356]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e0e:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000e10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e14:	4b57      	ldr	r3, [pc, #348]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e16:	651a      	str	r2, [r3, #80]	@ 0x50
 8000e18:	e013      	b.n	8000e42 <I2S_Mode_Set+0x132>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7a9b      	ldrb	r3, [r3, #10]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2302      	movs	r3, #2
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d005      	beq.n	8000e32 <I2S_Mode_Set+0x122>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7a9b      	ldrb	r3, [r3, #10]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d107      	bne.n	8000e42 <I2S_Mode_Set+0x132>
				{
					I2S2_DMA_Full_Duplex.Receiver.TX.memory_data_size = DMA_Memory_Data_Size.word;
 8000e32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e36:	4b4f      	ldr	r3, [pc, #316]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e38:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000e3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e40:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000e42:	2300      	movs	r3, #0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b4b      	ldr	r3, [pc, #300]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e48:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
				I2S2_DMA_Full_Duplex.Receiver.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b48      	ldr	r3, [pc, #288]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
				I2S2_DMA_Full_Duplex.Receiver.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 8000e58:	2240      	movs	r2, #64	@ 0x40
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e5c:	649a      	str	r2, [r3, #72]	@ 0x48
				DMA_Init(&I2S2_DMA_Full_Duplex.Receiver.TX);
 8000e5e:	4849      	ldr	r0, [pc, #292]	@ (8000f84 <I2S_Mode_Set+0x274>)
 8000e60:	f7ff fa96 	bl	8000390 <DMA_Init>
 8000e64:	e0ba      	b.n	8000fdc <I2S_Mode_Set+0x2cc>
			}

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

			else if((config->Full_Duplex.mode == I2S_Mode.Master.Transmit) || config->Full_Duplex.mode == I2S_Mode.Slave.Transmit)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7b9b      	ldrb	r3, [r3, #14]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d005      	beq.n	8000e7c <I2S_Mode_Set+0x16c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7b9b      	ldrb	r3, [r3, #14]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4293      	cmp	r3, r2
 8000e78:	f040 80b0 	bne.w	8000fdc <I2S_Mode_Set+0x2cc>
			{
				I2S2_DMA_Full_Duplex.Transmitter.RX.channel = 0;
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	679a      	str	r2, [r3, #120]	@ 0x78
				I2S2_DMA_Full_Duplex.Transmitter.RX.stream = DMA1_Stream4;
 8000e82:	4b3c      	ldr	r3, [pc, #240]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e84:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <I2S_Mode_Set+0x270>)
 8000e86:	675a      	str	r2, [r3, #116]	@ 0x74
				I2S2_DMA_Full_Duplex.Transmitter.RX.circular_mode = DMA_Circular_Mode.Disable;
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
				I2S2_DMA_Full_Duplex.Transmitter.RX.controller = DMA1;
 8000e90:	4b38      	ldr	r3, [pc, #224]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e92:	4a3a      	ldr	r2, [pc, #232]	@ (8000f7c <I2S_Mode_Set+0x26c>)
 8000e94:	671a      	str	r2, [r3, #112]	@ 0x70
				I2S2_DMA_Full_Duplex.Transmitter.RX.flow_control = DMA_Flow_Control.DMA_Control;
 8000e96:	2200      	movs	r2, #0
 8000e98:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000e9a:	67da      	str	r2, [r3, #124]	@ 0x7c
				I2S2_DMA_Full_Duplex.Transmitter.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	4a34      	ldr	r2, [pc, #208]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000ea4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7a9b      	ldrb	r3, [r3, #10]
 8000eac:	461a      	mov	r2, r3
 8000eae:	2301      	movs	r3, #1
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d10a      	bne.n	8000eca <I2S_Mode_Set+0x1ba>
				{
					I2S2_DMA_Full_Duplex.Transmitter.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
					I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000ec8:	e015      	b.n	8000ef6 <I2S_Mode_Set+0x1e6>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7a9b      	ldrb	r3, [r3, #10]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d005      	beq.n	8000ee2 <I2S_Mode_Set+0x1d2>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7a9b      	ldrb	r3, [r3, #10]
 8000eda:	461a      	mov	r2, r3
 8000edc:	2303      	movs	r3, #3
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d109      	bne.n	8000ef6 <I2S_Mode_Set+0x1e6>
				{
					I2S2_DMA_Full_Duplex.Transmitter.RX.memory_data_size = DMA_Memory_Data_Size.word;
 8000ee2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000ee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
					I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000eec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ef0:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
				}
				I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000efc:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
				I2S2_DMA_Full_Duplex.Transmitter.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f08:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
				I2S2_DMA_Full_Duplex.Transmitter.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

				DMA_Init(&I2S2_DMA_Full_Duplex.Transmitter.RX);
 8000f14:	481c      	ldr	r0, [pc, #112]	@ (8000f88 <I2S_Mode_Set+0x278>)
 8000f16:	f7ff fa3b 	bl	8000390 <DMA_Init>

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

				I2S2_DMA_Full_Duplex.Transmitter.TX.channel = 2;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
				I2S2_DMA_Full_Duplex.Transmitter.TX.stream = DMA1_Stream3;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f24:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <I2S_Mode_Set+0x268>)
 8000f26:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
				I2S2_DMA_Full_Duplex.Transmitter.TX.circular_mode = DMA_Circular_Mode.Disable;
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f2e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
				I2S2_DMA_Full_Duplex.Transmitter.TX.controller = DMA1;
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f34:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <I2S_Mode_Set+0x26c>)
 8000f36:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				I2S2_DMA_Full_Duplex.Transmitter.TX.flow_control = DMA_Flow_Control.DMA_Control;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f3e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				I2S2_DMA_Full_Duplex.Transmitter.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8000f42:	2208      	movs	r2, #8
 8000f44:	2310      	movs	r3, #16
 8000f46:	4313      	orrs	r3, r2
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f4a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7a9b      	ldrb	r3, [r3, #10]
 8000f52:	461a      	mov	r2, r3
 8000f54:	2301      	movs	r3, #1
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d118      	bne.n	8000f8c <I2S_Mode_Set+0x27c>
				{
					I2S2_DMA_Full_Duplex.Transmitter.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8000f5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f60:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8000f64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f68:	4b02      	ldr	r3, [pc, #8]	@ (8000f74 <I2S_Mode_Set+0x264>)
 8000f6a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8000f6e:	e023      	b.n	8000fb8 <I2S_Mode_Set+0x2a8>
 8000f70:	40003800 	.word	0x40003800
 8000f74:	20000088 	.word	0x20000088
 8000f78:	40026058 	.word	0x40026058
 8000f7c:	40026000 	.word	0x40026000
 8000f80:	40026070 	.word	0x40026070
 8000f84:	200000c0 	.word	0x200000c0
 8000f88:	200000f8 	.word	0x200000f8
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7a9b      	ldrb	r3, [r3, #10]
 8000f90:	461a      	mov	r2, r3
 8000f92:	2302      	movs	r3, #2
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d005      	beq.n	8000fa4 <I2S_Mode_Set+0x294>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7a9b      	ldrb	r3, [r3, #10]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d109      	bne.n	8000fb8 <I2S_Mode_Set+0x2a8>
				{
					I2S2_DMA_Full_Duplex.Transmitter.TX.memory_data_size = DMA_Memory_Data_Size.word;
 8000fa4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa8:	4b67      	ldr	r3, [pc, #412]	@ (8001148 <I2S_Mode_Set+0x438>)
 8000faa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8000fae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fb2:	4b65      	ldr	r3, [pc, #404]	@ (8001148 <I2S_Mode_Set+0x438>)
 8000fb4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
				}
				I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b62      	ldr	r3, [pc, #392]	@ (8001148 <I2S_Mode_Set+0x438>)
 8000fbe:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
				I2S2_DMA_Full_Duplex.Transmitter.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8001148 <I2S_Mode_Set+0x438>)
 8000fca:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
				I2S2_DMA_Full_Duplex.Transmitter.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 8000fce:	2240      	movs	r2, #64	@ 0x40
 8000fd0:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <I2S_Mode_Set+0x438>)
 8000fd2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
				DMA_Init(&I2S2_DMA_Full_Duplex.Transmitter.TX);
 8000fd6:	485d      	ldr	r0, [pc, #372]	@ (800114c <I2S_Mode_Set+0x43c>)
 8000fd8:	f7ff f9da 	bl	8000390 <DMA_Init>
			}



		}
		if(config->Half_Duplex.Enable == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7d1b      	ldrb	r3, [r3, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a3 	beq.w	800112c <I2S_Mode_Set+0x41c>
		{
			if((config->Half_Duplex.mode == I2S_Mode.Master.Receive) || config->Half_Duplex.mode == I2S_Mode.Slave.Receive)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7d5b      	ldrb	r3, [r3, #21]
 8000fea:	2202      	movs	r2, #2
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d004      	beq.n	8000ffa <I2S_Mode_Set+0x2ea>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7d5b      	ldrb	r3, [r3, #21]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d146      	bne.n	8001088 <I2S_Mode_Set+0x378>
			{
				I2S2_DMA_Half_Duplex.RX.channel = 0;
 8000ffa:	4b55      	ldr	r3, [pc, #340]	@ (8001150 <I2S_Mode_Set+0x440>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
				I2S2_DMA_Half_Duplex.RX.stream = DMA1_Stream3;
 8001000:	4b53      	ldr	r3, [pc, #332]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001002:	4a54      	ldr	r2, [pc, #336]	@ (8001154 <I2S_Mode_Set+0x444>)
 8001004:	605a      	str	r2, [r3, #4]
				I2S2_DMA_Half_Duplex.RX.circular_mode = DMA_Circular_Mode.Disable;
 8001006:	2200      	movs	r2, #0
 8001008:	4b51      	ldr	r3, [pc, #324]	@ (8001150 <I2S_Mode_Set+0x440>)
 800100a:	621a      	str	r2, [r3, #32]
				I2S2_DMA_Half_Duplex.RX.controller = DMA1;
 800100c:	4b50      	ldr	r3, [pc, #320]	@ (8001150 <I2S_Mode_Set+0x440>)
 800100e:	4a52      	ldr	r2, [pc, #328]	@ (8001158 <I2S_Mode_Set+0x448>)
 8001010:	601a      	str	r2, [r3, #0]
				I2S2_DMA_Half_Duplex.RX.flow_control = DMA_Flow_Control.DMA_Control;
 8001012:	2200      	movs	r2, #0
 8001014:	4b4e      	ldr	r3, [pc, #312]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001016:	60da      	str	r2, [r3, #12]
				I2S2_DMA_Half_Duplex.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8001018:	2208      	movs	r2, #8
 800101a:	2310      	movs	r3, #16
 800101c:	4313      	orrs	r3, r2
 800101e:	4a4c      	ldr	r2, [pc, #304]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001020:	6253      	str	r3, [r2, #36]	@ 0x24
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7a9b      	ldrb	r3, [r3, #10]
 8001026:	461a      	mov	r2, r3
 8001028:	2301      	movs	r3, #1
 800102a:	429a      	cmp	r2, r3
 800102c:	d108      	bne.n	8001040 <I2S_Mode_Set+0x330>
				{
					I2S2_DMA_Half_Duplex.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 800102e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001032:	4b47      	ldr	r3, [pc, #284]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001034:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Half_Duplex.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8001036:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800103a:	4b45      	ldr	r3, [pc, #276]	@ (8001150 <I2S_Mode_Set+0x440>)
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	e013      	b.n	8001068 <I2S_Mode_Set+0x358>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7a9b      	ldrb	r3, [r3, #10]
 8001044:	461a      	mov	r2, r3
 8001046:	2302      	movs	r3, #2
 8001048:	429a      	cmp	r2, r3
 800104a:	d005      	beq.n	8001058 <I2S_Mode_Set+0x348>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7a9b      	ldrb	r3, [r3, #10]
 8001050:	461a      	mov	r2, r3
 8001052:	2303      	movs	r3, #3
 8001054:	429a      	cmp	r2, r3
 8001056:	d107      	bne.n	8001068 <I2S_Mode_Set+0x358>
				{
					I2S2_DMA_Half_Duplex.RX.memory_data_size = DMA_Memory_Data_Size.word;
 8001058:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800105c:	4b3c      	ldr	r3, [pc, #240]	@ (8001150 <I2S_Mode_Set+0x440>)
 800105e:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Half_Duplex.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8001060:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001064:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001066:	619a      	str	r2, [r3, #24]
				}
				I2S2_DMA_Half_Duplex.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8001068:	2300      	movs	r3, #0
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <I2S_Mode_Set+0x440>)
 800106e:	869a      	strh	r2, [r3, #52]	@ 0x34
				I2S2_DMA_Half_Duplex.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b36      	ldr	r3, [pc, #216]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001078:	865a      	strh	r2, [r3, #50]	@ 0x32
				I2S2_DMA_Half_Duplex.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 800107a:	2200      	movs	r2, #0
 800107c:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <I2S_Mode_Set+0x440>)
 800107e:	611a      	str	r2, [r3, #16]

				DMA_Init(&I2S2_DMA_Half_Duplex.RX);
 8001080:	4833      	ldr	r0, [pc, #204]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001082:	f7ff f985 	bl	8000390 <DMA_Init>
 8001086:	e051      	b.n	800112c <I2S_Mode_Set+0x41c>
			}
			else if((config->Half_Duplex.mode == I2S_Mode.Master.Transmit) || config->Half_Duplex.mode == I2S_Mode.Slave.Transmit)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7d5b      	ldrb	r3, [r3, #21]
 800108c:	2201      	movs	r2, #1
 800108e:	4293      	cmp	r3, r2
 8001090:	d004      	beq.n	800109c <I2S_Mode_Set+0x38c>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7d5b      	ldrb	r3, [r3, #21]
 8001096:	2203      	movs	r2, #3
 8001098:	4293      	cmp	r3, r2
 800109a:	d147      	bne.n	800112c <I2S_Mode_Set+0x41c>
			{
				I2S2_DMA_Half_Duplex.TX.channel = 0;
 800109c:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <I2S_Mode_Set+0x440>)
 800109e:	2200      	movs	r2, #0
 80010a0:	641a      	str	r2, [r3, #64]	@ 0x40
				I2S2_DMA_Half_Duplex.TX.stream = DMA1_Stream4;
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <I2S_Mode_Set+0x440>)
 80010a4:	4a2d      	ldr	r2, [pc, #180]	@ (800115c <I2S_Mode_Set+0x44c>)
 80010a6:	63da      	str	r2, [r3, #60]	@ 0x3c
				I2S2_DMA_Half_Duplex.TX.circular_mode = DMA_Circular_Mode.Disable;
 80010a8:	2200      	movs	r2, #0
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <I2S_Mode_Set+0x440>)
 80010ac:	659a      	str	r2, [r3, #88]	@ 0x58
				I2S2_DMA_Half_Duplex.TX.controller = DMA1;
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <I2S_Mode_Set+0x440>)
 80010b0:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <I2S_Mode_Set+0x448>)
 80010b2:	639a      	str	r2, [r3, #56]	@ 0x38
				I2S2_DMA_Half_Duplex.TX.flow_control = DMA_Flow_Control.DMA_Control;
 80010b4:	2200      	movs	r2, #0
 80010b6:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <I2S_Mode_Set+0x440>)
 80010b8:	645a      	str	r2, [r3, #68]	@ 0x44
				I2S2_DMA_Half_Duplex.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 80010ba:	2208      	movs	r2, #8
 80010bc:	2310      	movs	r3, #16
 80010be:	4313      	orrs	r3, r2
 80010c0:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <I2S_Mode_Set+0x440>)
 80010c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
				if(config->Data_Length == I2S_Data_Length._16_bit)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	2301      	movs	r3, #1
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d108      	bne.n	80010e2 <I2S_Mode_Set+0x3d2>
				{
					I2S2_DMA_Half_Duplex.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 80010d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <I2S_Mode_Set+0x440>)
 80010d6:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Half_Duplex.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 80010d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <I2S_Mode_Set+0x440>)
 80010de:	651a      	str	r2, [r3, #80]	@ 0x50
 80010e0:	e013      	b.n	800110a <I2S_Mode_Set+0x3fa>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7a9b      	ldrb	r3, [r3, #10]
 80010e6:	461a      	mov	r2, r3
 80010e8:	2302      	movs	r3, #2
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d005      	beq.n	80010fa <I2S_Mode_Set+0x3ea>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7a9b      	ldrb	r3, [r3, #10]
 80010f2:	461a      	mov	r2, r3
 80010f4:	2303      	movs	r3, #3
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d107      	bne.n	800110a <I2S_Mode_Set+0x3fa>
				{
					I2S2_DMA_Half_Duplex.TX.memory_data_size = DMA_Memory_Data_Size.word;
 80010fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001100:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Half_Duplex.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8001102:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001108:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				I2S2_DMA_Half_Duplex.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 800110a:	2300      	movs	r3, #0
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001110:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
				I2S2_DMA_Half_Duplex.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <I2S_Mode_Set+0x440>)
 800111c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
				I2S2_DMA_Half_Duplex.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 8001120:	2240      	movs	r2, #64	@ 0x40
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <I2S_Mode_Set+0x440>)
 8001124:	649a      	str	r2, [r3, #72]	@ 0x48

				DMA_Init(&I2S2_DMA_Half_Duplex.TX);
 8001126:	480e      	ldr	r0, [pc, #56]	@ (8001160 <I2S_Mode_Set+0x450>)
 8001128:	f7ff f932 	bl	8000390 <DMA_Init>
	}
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
	if(config->Port == I2S_Port.I2S3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0c      	ldr	r2, [pc, #48]	@ (8001164 <I2S_Mode_Set+0x454>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d001      	beq.n	800113a <I2S_Mode_Set+0x42a>
	{

	}
	else
	{
		retval = -1;
 8001136:	23ff      	movs	r3, #255	@ 0xff
 8001138:	73fb      	strb	r3, [r7, #15]
	}


	return retval;
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000088 	.word	0x20000088
 800114c:	20000130 	.word	0x20000130
 8001150:	20000168 	.word	0x20000168
 8001154:	40026058 	.word	0x40026058
 8001158:	40026000 	.word	0x40026000
 800115c:	40026070 	.word	0x40026070
 8001160:	200001a0 	.word	0x200001a0
 8001164:	40003c00 	.word	0x40003c00

08001168 <I2S_Read_Data>:


uint32_t I2S_Read_Data(I2S_Config *config)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uint32_t retval = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
	if(config->Channel_Length == I2S_Channel_Length._16_bit)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7adb      	ldrb	r3, [r3, #11]
 8001178:	461a      	mov	r2, r3
 800117a:	2301      	movs	r3, #1
 800117c:	429a      	cmp	r2, r3
 800117e:	d10c      	bne.n	800119a <I2S_Read_Data+0x32>
	{
		while(!(config -> Port -> SR & SPI_SR_CHSIDE)){}
 8001180:	bf00      	nop
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f8      	beq.n	8001182 <I2S_Read_Data+0x1a>
		retval =   (config -> Port -> DR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e016      	b.n	80011c8 <I2S_Read_Data+0x60>
	}
	else if(config->Channel_Length == I2S_Channel_Length._32_bit)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7adb      	ldrb	r3, [r3, #11]
 800119e:	461a      	mov	r2, r3
 80011a0:	2303      	movs	r3, #3
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d110      	bne.n	80011c8 <I2S_Read_Data+0x60>
	{
		while(!(config -> Port -> SR & SPI_SR_CHSIDE)){}
 80011a6:	bf00      	nop
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f8      	beq.n	80011a8 <I2S_Read_Data+0x40>
		retval =   ((config -> Port -> DR) << 16) | ((config -> Port -> DR));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
	}

	return retval;
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ffc2 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001276:	2304      	movs	r3, #4
 8001278:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 800127a:	23a8      	movs	r3, #168	@ 0xa8
 800127c:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8001282:	2307      	movs	r3, #7
 8001284:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8001286:	4b3d      	ldr	r3, [pc, #244]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800128c:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <MCU_Clock_Setup+0x10c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a3a      	ldr	r2, [pc, #232]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001296:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001298:	bf00      	nop
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <MCU_Clock_Setup+0x10c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f9      	beq.n	800129a <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80012a6:	4b35      	ldr	r3, [pc, #212]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	4a34      	ldr	r2, [pc, #208]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <MCU_Clock_Setup+0x110>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a32      	ldr	r2, [pc, #200]	@ (8001380 <MCU_Clock_Setup+0x110>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80012be:	4b31      	ldr	r3, [pc, #196]	@ (8001384 <MCU_Clock_Setup+0x114>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a30      	ldr	r2, [pc, #192]	@ (8001384 <MCU_Clock_Setup+0x114>)
 80012c4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012c8:	f043 0305 	orr.w	r3, r3, #5
 80012cc:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	793a      	ldrb	r2, [r7, #4]
 80012d4:	0611      	lsls	r1, r2, #24
 80012d6:	797a      	ldrb	r2, [r7, #5]
 80012d8:	0412      	lsls	r2, r2, #16
 80012da:	4311      	orrs	r1, r2
 80012dc:	79ba      	ldrb	r2, [r7, #6]
 80012de:	0192      	lsls	r2, r2, #6
 80012e0:	4311      	orrs	r1, r2
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	4a24      	ldr	r2, [pc, #144]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012ea:	430b      	orrs	r3, r1
 80012ec:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80012ee:	4b23      	ldr	r3, [pc, #140]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a22      	ldr	r2, [pc, #136]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012f8:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012fc:	4a1f      	ldr	r2, [pc, #124]	@ (800137c <MCU_Clock_Setup+0x10c>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4a1d      	ldr	r2, [pc, #116]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001308:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800130c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800130e:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001318:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <MCU_Clock_Setup+0x10c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a17      	ldr	r2, [pc, #92]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001324:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001326:	bf00      	nop
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MCU_Clock_Setup+0x10c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f9      	beq.n	8001328 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a10      	ldr	r2, [pc, #64]	@ (800137c <MCU_Clock_Setup+0x10c>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001340:	bf00      	nop
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b08      	cmp	r3, #8
 800134c:	d1f9      	bne.n	8001342 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 800134e:	f000 f8b1 	bl	80014b4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <MCU_Clock_Setup+0x118>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	4a0c      	ldr	r2, [pc, #48]	@ (800138c <MCU_Clock_Setup+0x11c>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	085b      	lsrs	r3, r3, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff63 	bl	800122c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <MCU_Clock_Setup+0x10c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a04      	ldr	r2, [pc, #16]	@ (800137c <MCU_Clock_Setup+0x10c>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000
 8001384:	40023c00 	.word	0x40023c00
 8001388:	20000000 	.word	0x20000000
 800138c:	18618619 	.word	0x18618619

08001390 <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8001396:	f7ff ff6b 	bl	8001270 <MCU_Clock_Setup>


	INMP441_I2S.Port = I2S_Port.I2S2;
 800139a:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <main+0x84>)
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <main+0x88>)
 800139e:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 80013a0:	2206      	movs	r2, #6
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <main+0x88>)
 80013a4:	731a      	strb	r2, [r3, #12]
	INMP441_I2S.Channel_Length = I2S_Channel_Length._16_bit;
 80013a6:	2301      	movs	r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <main+0x88>)
 80013ac:	72da      	strb	r2, [r3, #11]
	INMP441_I2S.Data_Length = I2S_Data_Length._16_bit;
 80013ae:	2301      	movs	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <main+0x88>)
 80013b4:	729a      	strb	r2, [r3, #10]
	INMP441_I2S.LR_Pin_Port = GPIOB;
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <main+0x88>)
 80013b8:	4a18      	ldr	r2, [pc, #96]	@ (800141c <main+0x8c>)
 80013ba:	605a      	str	r2, [r3, #4]
	INMP441_I2S.LR_Pin_Number = 12;
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <main+0x88>)
 80013be:	220c      	movs	r2, #12
 80013c0:	721a      	strb	r2, [r3, #8]
	INMP441_I2S.Standard = I2S_Standard.Standard_Philips;
 80013c2:	2301      	movs	r3, #1
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <main+0x88>)
 80013c8:	725a      	strb	r2, [r3, #9]
	INMP441_I2S.Half_Duplex.Enable = true;
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <main+0x88>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	751a      	strb	r2, [r3, #20]
	INMP441_I2S.Half_Duplex.mode = I2S_Mode.Master.Receive;
 80013d0:	2202      	movs	r2, #2
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <main+0x88>)
 80013d4:	755a      	strb	r2, [r3, #21]
	INMP441_I2S.Half_Duplex.WS_Pin = I2S_Pin.WS.I2S2.PB09;
 80013d6:	22d1      	movs	r2, #209	@ 0xd1
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <main+0x88>)
 80013da:	765a      	strb	r2, [r3, #25]
	INMP441_I2S.Half_Duplex.SD_Pin = I2S_Pin.SD.I2S2.PB15;
 80013dc:	22d5      	movs	r2, #213	@ 0xd5
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <main+0x88>)
 80013e0:	761a      	strb	r2, [r3, #24]
	INMP441_I2S.Half_Duplex.SCK_Pin = I2S_Pin.SCK.I2S2.PB13;
 80013e2:	22d5      	movs	r2, #213	@ 0xd5
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <main+0x88>)
 80013e6:	75da      	strb	r2, [r3, #23]

	if(I2S_Init(&INMP441_I2S)) I2S_Print_Errors(&INMP441_I2S);
 80013e8:	480b      	ldr	r0, [pc, #44]	@ (8001418 <main+0x88>)
 80013ea:	f7ff fa03 	bl	80007f4 <I2S_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <main+0x6a>
 80013f4:	4808      	ldr	r0, [pc, #32]	@ (8001418 <main+0x88>)
 80013f6:	f7ff fc1b 	bl	8000c30 <I2S_Print_Errors>




	uint32_t x = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]


	for(;;)
	{

		x = I2S_Read_Data(&INMP441_I2S);
 80013fe:	4806      	ldr	r0, [pc, #24]	@ (8001418 <main+0x88>)
 8001400:	f7ff feb2 	bl	8001168 <I2S_Read_Data>
 8001404:	6078      	str	r0, [r7, #4]
		printConsole("%"PRId32"\r\n",x);
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <main+0x90>)
 800140a:	f7fe ff39 	bl	8000280 <printConsole>
		x = I2S_Read_Data(&INMP441_I2S);
 800140e:	bf00      	nop
 8001410:	e7f5      	b.n	80013fe <main+0x6e>
 8001412:	bf00      	nop
 8001414:	40003800 	.word	0x40003800
 8001418:	200001d8 	.word	0x200001d8
 800141c:	40020400 	.word	0x40020400
 8001420:	08002028 	.word	0x08002028

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f000 f8f8 	bl	8001648 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20020000 	.word	0x20020000
 8001484:	00000400 	.word	0x00000400
 8001488:	20000200 	.word	0x20000200
 800148c:	20000350 	.word	0x20000350

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	2302      	movs	r3, #2
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	2302      	movs	r3, #2
 80014cc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <SystemCoreClockUpdate+0xec>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d011      	beq.n	8001502 <SystemCoreClockUpdate+0x4e>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d844      	bhi.n	800156e <SystemCoreClockUpdate+0xba>
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <SystemCoreClockUpdate+0x3e>
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d004      	beq.n	80014fa <SystemCoreClockUpdate+0x46>
 80014f0:	e03d      	b.n	800156e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	@ (80015a4 <SystemCoreClockUpdate+0xf0>)
 80014f4:	4a2c      	ldr	r2, [pc, #176]	@ (80015a8 <SystemCoreClockUpdate+0xf4>)
 80014f6:	601a      	str	r2, [r3, #0]
      break;
 80014f8:	e03d      	b.n	8001576 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80014fa:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <SystemCoreClockUpdate+0xf0>)
 80014fc:	4a2b      	ldr	r2, [pc, #172]	@ (80015ac <SystemCoreClockUpdate+0xf8>)
 80014fe:	601a      	str	r2, [r3, #0]
      break;
 8001500:	e039      	b.n	8001576 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001502:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <SystemCoreClockUpdate+0xec>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0d9b      	lsrs	r3, r3, #22
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <SystemCoreClockUpdate+0xec>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001516:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00c      	beq.n	8001538 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800151e:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <SystemCoreClockUpdate+0xf8>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4a1e      	ldr	r2, [pc, #120]	@ (80015a0 <SystemCoreClockUpdate+0xec>)
 8001528:	6852      	ldr	r2, [r2, #4]
 800152a:	0992      	lsrs	r2, r2, #6
 800152c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e00b      	b.n	8001550 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001538:	4a1b      	ldr	r2, [pc, #108]	@ (80015a8 <SystemCoreClockUpdate+0xf4>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <SystemCoreClockUpdate+0xec>)
 8001542:	6852      	ldr	r2, [r2, #4]
 8001544:	0992      	lsrs	r2, r2, #6
 8001546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <SystemCoreClockUpdate+0xec>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <SystemCoreClockUpdate+0xf0>)
 800156a:	6013      	str	r3, [r2, #0]
      break;
 800156c:	e003      	b.n	8001576 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <SystemCoreClockUpdate+0xf0>)
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <SystemCoreClockUpdate+0xf4>)
 8001572:	601a      	str	r2, [r3, #0]
      break;
 8001574:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <SystemCoreClockUpdate+0xec>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <SystemCoreClockUpdate+0xfc>)
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <SystemCoreClockUpdate+0xf0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <SystemCoreClockUpdate+0xf0>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40023800 	.word	0x40023800
 80015a4:	20000000 	.word	0x20000000
 80015a8:	00f42400 	.word	0x00f42400
 80015ac:	007a1200 	.word	0x007a1200
 80015b0:	08002030 	.word	0x08002030

080015b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b4:	480d      	ldr	r0, [pc, #52]	@ (80015ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b8:	f7ff ff6a 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001600 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015e2:	f000 f837 	bl	8001654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015e6:	f7ff fed3 	bl	8001390 <main>

080015ea <LoopForever>:

LoopForever:
  b LoopForever
 80015ea:	e7fe      	b.n	80015ea <LoopForever>
  ldr   r0, =_estack
 80015ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80015f8:	08002084 	.word	0x08002084
  ldr r2, =_sbss
 80015fc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001600:	2000034c 	.word	0x2000034c

08001604 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <_vsiprintf_r>:
 8001608:	b500      	push	{lr}
 800160a:	b09b      	sub	sp, #108	@ 0x6c
 800160c:	9100      	str	r1, [sp, #0]
 800160e:	9104      	str	r1, [sp, #16]
 8001610:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001614:	9105      	str	r1, [sp, #20]
 8001616:	9102      	str	r1, [sp, #8]
 8001618:	4905      	ldr	r1, [pc, #20]	@ (8001630 <_vsiprintf_r+0x28>)
 800161a:	9103      	str	r1, [sp, #12]
 800161c:	4669      	mov	r1, sp
 800161e:	f000 f993 	bl	8001948 <_svfiprintf_r>
 8001622:	9b00      	ldr	r3, [sp, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	b01b      	add	sp, #108	@ 0x6c
 800162a:	f85d fb04 	ldr.w	pc, [sp], #4
 800162e:	bf00      	nop
 8001630:	ffff0208 	.word	0xffff0208

08001634 <vsiprintf>:
 8001634:	4613      	mov	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	4601      	mov	r1, r0
 800163a:	4802      	ldr	r0, [pc, #8]	@ (8001644 <vsiprintf+0x10>)
 800163c:	6800      	ldr	r0, [r0, #0]
 800163e:	f7ff bfe3 	b.w	8001608 <_vsiprintf_r>
 8001642:	bf00      	nop
 8001644:	20000004 	.word	0x20000004

08001648 <__errno>:
 8001648:	4b01      	ldr	r3, [pc, #4]	@ (8001650 <__errno+0x8>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000004 	.word	0x20000004

08001654 <__libc_init_array>:
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	4d0d      	ldr	r5, [pc, #52]	@ (800168c <__libc_init_array+0x38>)
 8001658:	4c0d      	ldr	r4, [pc, #52]	@ (8001690 <__libc_init_array+0x3c>)
 800165a:	1b64      	subs	r4, r4, r5
 800165c:	10a4      	asrs	r4, r4, #2
 800165e:	2600      	movs	r6, #0
 8001660:	42a6      	cmp	r6, r4
 8001662:	d109      	bne.n	8001678 <__libc_init_array+0x24>
 8001664:	4d0b      	ldr	r5, [pc, #44]	@ (8001694 <__libc_init_array+0x40>)
 8001666:	4c0c      	ldr	r4, [pc, #48]	@ (8001698 <__libc_init_array+0x44>)
 8001668:	f000 fc66 	bl	8001f38 <_init>
 800166c:	1b64      	subs	r4, r4, r5
 800166e:	10a4      	asrs	r4, r4, #2
 8001670:	2600      	movs	r6, #0
 8001672:	42a6      	cmp	r6, r4
 8001674:	d105      	bne.n	8001682 <__libc_init_array+0x2e>
 8001676:	bd70      	pop	{r4, r5, r6, pc}
 8001678:	f855 3b04 	ldr.w	r3, [r5], #4
 800167c:	4798      	blx	r3
 800167e:	3601      	adds	r6, #1
 8001680:	e7ee      	b.n	8001660 <__libc_init_array+0xc>
 8001682:	f855 3b04 	ldr.w	r3, [r5], #4
 8001686:	4798      	blx	r3
 8001688:	3601      	adds	r6, #1
 800168a:	e7f2      	b.n	8001672 <__libc_init_array+0x1e>
 800168c:	0800207c 	.word	0x0800207c
 8001690:	0800207c 	.word	0x0800207c
 8001694:	0800207c 	.word	0x0800207c
 8001698:	08002080 	.word	0x08002080

0800169c <__retarget_lock_acquire_recursive>:
 800169c:	4770      	bx	lr

0800169e <__retarget_lock_release_recursive>:
 800169e:	4770      	bx	lr

080016a0 <_free_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4605      	mov	r5, r0
 80016a4:	2900      	cmp	r1, #0
 80016a6:	d041      	beq.n	800172c <_free_r+0x8c>
 80016a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016ac:	1f0c      	subs	r4, r1, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bfb8      	it	lt
 80016b2:	18e4      	addlt	r4, r4, r3
 80016b4:	f000 f8e0 	bl	8001878 <__malloc_lock>
 80016b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001730 <_free_r+0x90>)
 80016ba:	6813      	ldr	r3, [r2, #0]
 80016bc:	b933      	cbnz	r3, 80016cc <_free_r+0x2c>
 80016be:	6063      	str	r3, [r4, #4]
 80016c0:	6014      	str	r4, [r2, #0]
 80016c2:	4628      	mov	r0, r5
 80016c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016c8:	f000 b8dc 	b.w	8001884 <__malloc_unlock>
 80016cc:	42a3      	cmp	r3, r4
 80016ce:	d908      	bls.n	80016e2 <_free_r+0x42>
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	1821      	adds	r1, r4, r0
 80016d4:	428b      	cmp	r3, r1
 80016d6:	bf01      	itttt	eq
 80016d8:	6819      	ldreq	r1, [r3, #0]
 80016da:	685b      	ldreq	r3, [r3, #4]
 80016dc:	1809      	addeq	r1, r1, r0
 80016de:	6021      	streq	r1, [r4, #0]
 80016e0:	e7ed      	b.n	80016be <_free_r+0x1e>
 80016e2:	461a      	mov	r2, r3
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	b10b      	cbz	r3, 80016ec <_free_r+0x4c>
 80016e8:	42a3      	cmp	r3, r4
 80016ea:	d9fa      	bls.n	80016e2 <_free_r+0x42>
 80016ec:	6811      	ldr	r1, [r2, #0]
 80016ee:	1850      	adds	r0, r2, r1
 80016f0:	42a0      	cmp	r0, r4
 80016f2:	d10b      	bne.n	800170c <_free_r+0x6c>
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	4401      	add	r1, r0
 80016f8:	1850      	adds	r0, r2, r1
 80016fa:	4283      	cmp	r3, r0
 80016fc:	6011      	str	r1, [r2, #0]
 80016fe:	d1e0      	bne.n	80016c2 <_free_r+0x22>
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6053      	str	r3, [r2, #4]
 8001706:	4408      	add	r0, r1
 8001708:	6010      	str	r0, [r2, #0]
 800170a:	e7da      	b.n	80016c2 <_free_r+0x22>
 800170c:	d902      	bls.n	8001714 <_free_r+0x74>
 800170e:	230c      	movs	r3, #12
 8001710:	602b      	str	r3, [r5, #0]
 8001712:	e7d6      	b.n	80016c2 <_free_r+0x22>
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	1821      	adds	r1, r4, r0
 8001718:	428b      	cmp	r3, r1
 800171a:	bf04      	itt	eq
 800171c:	6819      	ldreq	r1, [r3, #0]
 800171e:	685b      	ldreq	r3, [r3, #4]
 8001720:	6063      	str	r3, [r4, #4]
 8001722:	bf04      	itt	eq
 8001724:	1809      	addeq	r1, r1, r0
 8001726:	6021      	streq	r1, [r4, #0]
 8001728:	6054      	str	r4, [r2, #4]
 800172a:	e7ca      	b.n	80016c2 <_free_r+0x22>
 800172c:	bd38      	pop	{r3, r4, r5, pc}
 800172e:	bf00      	nop
 8001730:	20000348 	.word	0x20000348

08001734 <sbrk_aligned>:
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	4e0f      	ldr	r6, [pc, #60]	@ (8001774 <sbrk_aligned+0x40>)
 8001738:	460c      	mov	r4, r1
 800173a:	6831      	ldr	r1, [r6, #0]
 800173c:	4605      	mov	r5, r0
 800173e:	b911      	cbnz	r1, 8001746 <sbrk_aligned+0x12>
 8001740:	f000 fba6 	bl	8001e90 <_sbrk_r>
 8001744:	6030      	str	r0, [r6, #0]
 8001746:	4621      	mov	r1, r4
 8001748:	4628      	mov	r0, r5
 800174a:	f000 fba1 	bl	8001e90 <_sbrk_r>
 800174e:	1c43      	adds	r3, r0, #1
 8001750:	d103      	bne.n	800175a <sbrk_aligned+0x26>
 8001752:	f04f 34ff 	mov.w	r4, #4294967295
 8001756:	4620      	mov	r0, r4
 8001758:	bd70      	pop	{r4, r5, r6, pc}
 800175a:	1cc4      	adds	r4, r0, #3
 800175c:	f024 0403 	bic.w	r4, r4, #3
 8001760:	42a0      	cmp	r0, r4
 8001762:	d0f8      	beq.n	8001756 <sbrk_aligned+0x22>
 8001764:	1a21      	subs	r1, r4, r0
 8001766:	4628      	mov	r0, r5
 8001768:	f000 fb92 	bl	8001e90 <_sbrk_r>
 800176c:	3001      	adds	r0, #1
 800176e:	d1f2      	bne.n	8001756 <sbrk_aligned+0x22>
 8001770:	e7ef      	b.n	8001752 <sbrk_aligned+0x1e>
 8001772:	bf00      	nop
 8001774:	20000344 	.word	0x20000344

08001778 <_malloc_r>:
 8001778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800177c:	1ccd      	adds	r5, r1, #3
 800177e:	f025 0503 	bic.w	r5, r5, #3
 8001782:	3508      	adds	r5, #8
 8001784:	2d0c      	cmp	r5, #12
 8001786:	bf38      	it	cc
 8001788:	250c      	movcc	r5, #12
 800178a:	2d00      	cmp	r5, #0
 800178c:	4606      	mov	r6, r0
 800178e:	db01      	blt.n	8001794 <_malloc_r+0x1c>
 8001790:	42a9      	cmp	r1, r5
 8001792:	d904      	bls.n	800179e <_malloc_r+0x26>
 8001794:	230c      	movs	r3, #12
 8001796:	6033      	str	r3, [r6, #0]
 8001798:	2000      	movs	r0, #0
 800179a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800179e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001874 <_malloc_r+0xfc>
 80017a2:	f000 f869 	bl	8001878 <__malloc_lock>
 80017a6:	f8d8 3000 	ldr.w	r3, [r8]
 80017aa:	461c      	mov	r4, r3
 80017ac:	bb44      	cbnz	r4, 8001800 <_malloc_r+0x88>
 80017ae:	4629      	mov	r1, r5
 80017b0:	4630      	mov	r0, r6
 80017b2:	f7ff ffbf 	bl	8001734 <sbrk_aligned>
 80017b6:	1c43      	adds	r3, r0, #1
 80017b8:	4604      	mov	r4, r0
 80017ba:	d158      	bne.n	800186e <_malloc_r+0xf6>
 80017bc:	f8d8 4000 	ldr.w	r4, [r8]
 80017c0:	4627      	mov	r7, r4
 80017c2:	2f00      	cmp	r7, #0
 80017c4:	d143      	bne.n	800184e <_malloc_r+0xd6>
 80017c6:	2c00      	cmp	r4, #0
 80017c8:	d04b      	beq.n	8001862 <_malloc_r+0xea>
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	4639      	mov	r1, r7
 80017ce:	4630      	mov	r0, r6
 80017d0:	eb04 0903 	add.w	r9, r4, r3
 80017d4:	f000 fb5c 	bl	8001e90 <_sbrk_r>
 80017d8:	4581      	cmp	r9, r0
 80017da:	d142      	bne.n	8001862 <_malloc_r+0xea>
 80017dc:	6821      	ldr	r1, [r4, #0]
 80017de:	1a6d      	subs	r5, r5, r1
 80017e0:	4629      	mov	r1, r5
 80017e2:	4630      	mov	r0, r6
 80017e4:	f7ff ffa6 	bl	8001734 <sbrk_aligned>
 80017e8:	3001      	adds	r0, #1
 80017ea:	d03a      	beq.n	8001862 <_malloc_r+0xea>
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	442b      	add	r3, r5
 80017f0:	6023      	str	r3, [r4, #0]
 80017f2:	f8d8 3000 	ldr.w	r3, [r8]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	bb62      	cbnz	r2, 8001854 <_malloc_r+0xdc>
 80017fa:	f8c8 7000 	str.w	r7, [r8]
 80017fe:	e00f      	b.n	8001820 <_malloc_r+0xa8>
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	1b52      	subs	r2, r2, r5
 8001804:	d420      	bmi.n	8001848 <_malloc_r+0xd0>
 8001806:	2a0b      	cmp	r2, #11
 8001808:	d917      	bls.n	800183a <_malloc_r+0xc2>
 800180a:	1961      	adds	r1, r4, r5
 800180c:	42a3      	cmp	r3, r4
 800180e:	6025      	str	r5, [r4, #0]
 8001810:	bf18      	it	ne
 8001812:	6059      	strne	r1, [r3, #4]
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	bf08      	it	eq
 8001818:	f8c8 1000 	streq.w	r1, [r8]
 800181c:	5162      	str	r2, [r4, r5]
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	4630      	mov	r0, r6
 8001822:	f000 f82f 	bl	8001884 <__malloc_unlock>
 8001826:	f104 000b 	add.w	r0, r4, #11
 800182a:	1d23      	adds	r3, r4, #4
 800182c:	f020 0007 	bic.w	r0, r0, #7
 8001830:	1ac2      	subs	r2, r0, r3
 8001832:	bf1c      	itt	ne
 8001834:	1a1b      	subne	r3, r3, r0
 8001836:	50a3      	strne	r3, [r4, r2]
 8001838:	e7af      	b.n	800179a <_malloc_r+0x22>
 800183a:	6862      	ldr	r2, [r4, #4]
 800183c:	42a3      	cmp	r3, r4
 800183e:	bf0c      	ite	eq
 8001840:	f8c8 2000 	streq.w	r2, [r8]
 8001844:	605a      	strne	r2, [r3, #4]
 8001846:	e7eb      	b.n	8001820 <_malloc_r+0xa8>
 8001848:	4623      	mov	r3, r4
 800184a:	6864      	ldr	r4, [r4, #4]
 800184c:	e7ae      	b.n	80017ac <_malloc_r+0x34>
 800184e:	463c      	mov	r4, r7
 8001850:	687f      	ldr	r7, [r7, #4]
 8001852:	e7b6      	b.n	80017c2 <_malloc_r+0x4a>
 8001854:	461a      	mov	r2, r3
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	42a3      	cmp	r3, r4
 800185a:	d1fb      	bne.n	8001854 <_malloc_r+0xdc>
 800185c:	2300      	movs	r3, #0
 800185e:	6053      	str	r3, [r2, #4]
 8001860:	e7de      	b.n	8001820 <_malloc_r+0xa8>
 8001862:	230c      	movs	r3, #12
 8001864:	6033      	str	r3, [r6, #0]
 8001866:	4630      	mov	r0, r6
 8001868:	f000 f80c 	bl	8001884 <__malloc_unlock>
 800186c:	e794      	b.n	8001798 <_malloc_r+0x20>
 800186e:	6005      	str	r5, [r0, #0]
 8001870:	e7d6      	b.n	8001820 <_malloc_r+0xa8>
 8001872:	bf00      	nop
 8001874:	20000348 	.word	0x20000348

08001878 <__malloc_lock>:
 8001878:	4801      	ldr	r0, [pc, #4]	@ (8001880 <__malloc_lock+0x8>)
 800187a:	f7ff bf0f 	b.w	800169c <__retarget_lock_acquire_recursive>
 800187e:	bf00      	nop
 8001880:	20000340 	.word	0x20000340

08001884 <__malloc_unlock>:
 8001884:	4801      	ldr	r0, [pc, #4]	@ (800188c <__malloc_unlock+0x8>)
 8001886:	f7ff bf0a 	b.w	800169e <__retarget_lock_release_recursive>
 800188a:	bf00      	nop
 800188c:	20000340 	.word	0x20000340

08001890 <__ssputs_r>:
 8001890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001894:	688e      	ldr	r6, [r1, #8]
 8001896:	461f      	mov	r7, r3
 8001898:	42be      	cmp	r6, r7
 800189a:	680b      	ldr	r3, [r1, #0]
 800189c:	4682      	mov	sl, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	4690      	mov	r8, r2
 80018a2:	d82d      	bhi.n	8001900 <__ssputs_r+0x70>
 80018a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018ac:	d026      	beq.n	80018fc <__ssputs_r+0x6c>
 80018ae:	6965      	ldr	r5, [r4, #20]
 80018b0:	6909      	ldr	r1, [r1, #16]
 80018b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018b6:	eba3 0901 	sub.w	r9, r3, r1
 80018ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80018be:	1c7b      	adds	r3, r7, #1
 80018c0:	444b      	add	r3, r9
 80018c2:	106d      	asrs	r5, r5, #1
 80018c4:	429d      	cmp	r5, r3
 80018c6:	bf38      	it	cc
 80018c8:	461d      	movcc	r5, r3
 80018ca:	0553      	lsls	r3, r2, #21
 80018cc:	d527      	bpl.n	800191e <__ssputs_r+0x8e>
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7ff ff52 	bl	8001778 <_malloc_r>
 80018d4:	4606      	mov	r6, r0
 80018d6:	b360      	cbz	r0, 8001932 <__ssputs_r+0xa2>
 80018d8:	6921      	ldr	r1, [r4, #16]
 80018da:	464a      	mov	r2, r9
 80018dc:	f000 fae8 	bl	8001eb0 <memcpy>
 80018e0:	89a3      	ldrh	r3, [r4, #12]
 80018e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80018e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ea:	81a3      	strh	r3, [r4, #12]
 80018ec:	6126      	str	r6, [r4, #16]
 80018ee:	6165      	str	r5, [r4, #20]
 80018f0:	444e      	add	r6, r9
 80018f2:	eba5 0509 	sub.w	r5, r5, r9
 80018f6:	6026      	str	r6, [r4, #0]
 80018f8:	60a5      	str	r5, [r4, #8]
 80018fa:	463e      	mov	r6, r7
 80018fc:	42be      	cmp	r6, r7
 80018fe:	d900      	bls.n	8001902 <__ssputs_r+0x72>
 8001900:	463e      	mov	r6, r7
 8001902:	6820      	ldr	r0, [r4, #0]
 8001904:	4632      	mov	r2, r6
 8001906:	4641      	mov	r1, r8
 8001908:	f000 faa8 	bl	8001e5c <memmove>
 800190c:	68a3      	ldr	r3, [r4, #8]
 800190e:	1b9b      	subs	r3, r3, r6
 8001910:	60a3      	str	r3, [r4, #8]
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	4433      	add	r3, r6
 8001916:	6023      	str	r3, [r4, #0]
 8001918:	2000      	movs	r0, #0
 800191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800191e:	462a      	mov	r2, r5
 8001920:	f000 fad4 	bl	8001ecc <_realloc_r>
 8001924:	4606      	mov	r6, r0
 8001926:	2800      	cmp	r0, #0
 8001928:	d1e0      	bne.n	80018ec <__ssputs_r+0x5c>
 800192a:	6921      	ldr	r1, [r4, #16]
 800192c:	4650      	mov	r0, sl
 800192e:	f7ff feb7 	bl	80016a0 <_free_r>
 8001932:	230c      	movs	r3, #12
 8001934:	f8ca 3000 	str.w	r3, [sl]
 8001938:	89a3      	ldrh	r3, [r4, #12]
 800193a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800193e:	81a3      	strh	r3, [r4, #12]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	e7e9      	b.n	800191a <__ssputs_r+0x8a>
	...

08001948 <_svfiprintf_r>:
 8001948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800194c:	4698      	mov	r8, r3
 800194e:	898b      	ldrh	r3, [r1, #12]
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	b09d      	sub	sp, #116	@ 0x74
 8001954:	4607      	mov	r7, r0
 8001956:	460d      	mov	r5, r1
 8001958:	4614      	mov	r4, r2
 800195a:	d510      	bpl.n	800197e <_svfiprintf_r+0x36>
 800195c:	690b      	ldr	r3, [r1, #16]
 800195e:	b973      	cbnz	r3, 800197e <_svfiprintf_r+0x36>
 8001960:	2140      	movs	r1, #64	@ 0x40
 8001962:	f7ff ff09 	bl	8001778 <_malloc_r>
 8001966:	6028      	str	r0, [r5, #0]
 8001968:	6128      	str	r0, [r5, #16]
 800196a:	b930      	cbnz	r0, 800197a <_svfiprintf_r+0x32>
 800196c:	230c      	movs	r3, #12
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	b01d      	add	sp, #116	@ 0x74
 8001976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197a:	2340      	movs	r3, #64	@ 0x40
 800197c:	616b      	str	r3, [r5, #20]
 800197e:	2300      	movs	r3, #0
 8001980:	9309      	str	r3, [sp, #36]	@ 0x24
 8001982:	2320      	movs	r3, #32
 8001984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001988:	f8cd 800c 	str.w	r8, [sp, #12]
 800198c:	2330      	movs	r3, #48	@ 0x30
 800198e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001b2c <_svfiprintf_r+0x1e4>
 8001992:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001996:	f04f 0901 	mov.w	r9, #1
 800199a:	4623      	mov	r3, r4
 800199c:	469a      	mov	sl, r3
 800199e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019a2:	b10a      	cbz	r2, 80019a8 <_svfiprintf_r+0x60>
 80019a4:	2a25      	cmp	r2, #37	@ 0x25
 80019a6:	d1f9      	bne.n	800199c <_svfiprintf_r+0x54>
 80019a8:	ebba 0b04 	subs.w	fp, sl, r4
 80019ac:	d00b      	beq.n	80019c6 <_svfiprintf_r+0x7e>
 80019ae:	465b      	mov	r3, fp
 80019b0:	4622      	mov	r2, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	4638      	mov	r0, r7
 80019b6:	f7ff ff6b 	bl	8001890 <__ssputs_r>
 80019ba:	3001      	adds	r0, #1
 80019bc:	f000 80a7 	beq.w	8001b0e <_svfiprintf_r+0x1c6>
 80019c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019c2:	445a      	add	r2, fp
 80019c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80019c6:	f89a 3000 	ldrb.w	r3, [sl]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 809f 	beq.w	8001b0e <_svfiprintf_r+0x1c6>
 80019d0:	2300      	movs	r3, #0
 80019d2:	f04f 32ff 	mov.w	r2, #4294967295
 80019d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019da:	f10a 0a01 	add.w	sl, sl, #1
 80019de:	9304      	str	r3, [sp, #16]
 80019e0:	9307      	str	r3, [sp, #28]
 80019e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80019e8:	4654      	mov	r4, sl
 80019ea:	2205      	movs	r2, #5
 80019ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019f0:	484e      	ldr	r0, [pc, #312]	@ (8001b2c <_svfiprintf_r+0x1e4>)
 80019f2:	f7fe fbf5 	bl	80001e0 <memchr>
 80019f6:	9a04      	ldr	r2, [sp, #16]
 80019f8:	b9d8      	cbnz	r0, 8001a32 <_svfiprintf_r+0xea>
 80019fa:	06d0      	lsls	r0, r2, #27
 80019fc:	bf44      	itt	mi
 80019fe:	2320      	movmi	r3, #32
 8001a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a04:	0711      	lsls	r1, r2, #28
 8001a06:	bf44      	itt	mi
 8001a08:	232b      	movmi	r3, #43	@ 0x2b
 8001a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a14:	d015      	beq.n	8001a42 <_svfiprintf_r+0xfa>
 8001a16:	9a07      	ldr	r2, [sp, #28]
 8001a18:	4654      	mov	r4, sl
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f04f 0c0a 	mov.w	ip, #10
 8001a20:	4621      	mov	r1, r4
 8001a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a26:	3b30      	subs	r3, #48	@ 0x30
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d94b      	bls.n	8001ac4 <_svfiprintf_r+0x17c>
 8001a2c:	b1b0      	cbz	r0, 8001a5c <_svfiprintf_r+0x114>
 8001a2e:	9207      	str	r2, [sp, #28]
 8001a30:	e014      	b.n	8001a5c <_svfiprintf_r+0x114>
 8001a32:	eba0 0308 	sub.w	r3, r0, r8
 8001a36:	fa09 f303 	lsl.w	r3, r9, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	9304      	str	r3, [sp, #16]
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	e7d2      	b.n	80019e8 <_svfiprintf_r+0xa0>
 8001a42:	9b03      	ldr	r3, [sp, #12]
 8001a44:	1d19      	adds	r1, r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	9103      	str	r1, [sp, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfbb      	ittet	lt
 8001a4e:	425b      	neglt	r3, r3
 8001a50:	f042 0202 	orrlt.w	r2, r2, #2
 8001a54:	9307      	strge	r3, [sp, #28]
 8001a56:	9307      	strlt	r3, [sp, #28]
 8001a58:	bfb8      	it	lt
 8001a5a:	9204      	strlt	r2, [sp, #16]
 8001a5c:	7823      	ldrb	r3, [r4, #0]
 8001a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a60:	d10a      	bne.n	8001a78 <_svfiprintf_r+0x130>
 8001a62:	7863      	ldrb	r3, [r4, #1]
 8001a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a66:	d132      	bne.n	8001ace <_svfiprintf_r+0x186>
 8001a68:	9b03      	ldr	r3, [sp, #12]
 8001a6a:	1d1a      	adds	r2, r3, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	9203      	str	r2, [sp, #12]
 8001a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a74:	3402      	adds	r4, #2
 8001a76:	9305      	str	r3, [sp, #20]
 8001a78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001b3c <_svfiprintf_r+0x1f4>
 8001a7c:	7821      	ldrb	r1, [r4, #0]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	4650      	mov	r0, sl
 8001a82:	f7fe fbad 	bl	80001e0 <memchr>
 8001a86:	b138      	cbz	r0, 8001a98 <_svfiprintf_r+0x150>
 8001a88:	9b04      	ldr	r3, [sp, #16]
 8001a8a:	eba0 000a 	sub.w	r0, r0, sl
 8001a8e:	2240      	movs	r2, #64	@ 0x40
 8001a90:	4082      	lsls	r2, r0
 8001a92:	4313      	orrs	r3, r2
 8001a94:	3401      	adds	r4, #1
 8001a96:	9304      	str	r3, [sp, #16]
 8001a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a9c:	4824      	ldr	r0, [pc, #144]	@ (8001b30 <_svfiprintf_r+0x1e8>)
 8001a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001aa2:	2206      	movs	r2, #6
 8001aa4:	f7fe fb9c 	bl	80001e0 <memchr>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d036      	beq.n	8001b1a <_svfiprintf_r+0x1d2>
 8001aac:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <_svfiprintf_r+0x1ec>)
 8001aae:	bb1b      	cbnz	r3, 8001af8 <_svfiprintf_r+0x1b0>
 8001ab0:	9b03      	ldr	r3, [sp, #12]
 8001ab2:	3307      	adds	r3, #7
 8001ab4:	f023 0307 	bic.w	r3, r3, #7
 8001ab8:	3308      	adds	r3, #8
 8001aba:	9303      	str	r3, [sp, #12]
 8001abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001abe:	4433      	add	r3, r6
 8001ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ac2:	e76a      	b.n	800199a <_svfiprintf_r+0x52>
 8001ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ac8:	460c      	mov	r4, r1
 8001aca:	2001      	movs	r0, #1
 8001acc:	e7a8      	b.n	8001a20 <_svfiprintf_r+0xd8>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	3401      	adds	r4, #1
 8001ad2:	9305      	str	r3, [sp, #20]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f04f 0c0a 	mov.w	ip, #10
 8001ada:	4620      	mov	r0, r4
 8001adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ae0:	3a30      	subs	r2, #48	@ 0x30
 8001ae2:	2a09      	cmp	r2, #9
 8001ae4:	d903      	bls.n	8001aee <_svfiprintf_r+0x1a6>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0c6      	beq.n	8001a78 <_svfiprintf_r+0x130>
 8001aea:	9105      	str	r1, [sp, #20]
 8001aec:	e7c4      	b.n	8001a78 <_svfiprintf_r+0x130>
 8001aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8001af2:	4604      	mov	r4, r0
 8001af4:	2301      	movs	r3, #1
 8001af6:	e7f0      	b.n	8001ada <_svfiprintf_r+0x192>
 8001af8:	ab03      	add	r3, sp, #12
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	462a      	mov	r2, r5
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <_svfiprintf_r+0x1f0>)
 8001b00:	a904      	add	r1, sp, #16
 8001b02:	4638      	mov	r0, r7
 8001b04:	f3af 8000 	nop.w
 8001b08:	1c42      	adds	r2, r0, #1
 8001b0a:	4606      	mov	r6, r0
 8001b0c:	d1d6      	bne.n	8001abc <_svfiprintf_r+0x174>
 8001b0e:	89ab      	ldrh	r3, [r5, #12]
 8001b10:	065b      	lsls	r3, r3, #25
 8001b12:	f53f af2d 	bmi.w	8001970 <_svfiprintf_r+0x28>
 8001b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b18:	e72c      	b.n	8001974 <_svfiprintf_r+0x2c>
 8001b1a:	ab03      	add	r3, sp, #12
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	462a      	mov	r2, r5
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <_svfiprintf_r+0x1f0>)
 8001b22:	a904      	add	r1, sp, #16
 8001b24:	4638      	mov	r0, r7
 8001b26:	f000 f879 	bl	8001c1c <_printf_i>
 8001b2a:	e7ed      	b.n	8001b08 <_svfiprintf_r+0x1c0>
 8001b2c:	08002040 	.word	0x08002040
 8001b30:	0800204a 	.word	0x0800204a
 8001b34:	00000000 	.word	0x00000000
 8001b38:	08001891 	.word	0x08001891
 8001b3c:	08002046 	.word	0x08002046

08001b40 <_printf_common>:
 8001b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b44:	4616      	mov	r6, r2
 8001b46:	4698      	mov	r8, r3
 8001b48:	688a      	ldr	r2, [r1, #8]
 8001b4a:	690b      	ldr	r3, [r1, #16]
 8001b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b50:	4293      	cmp	r3, r2
 8001b52:	bfb8      	it	lt
 8001b54:	4613      	movlt	r3, r2
 8001b56:	6033      	str	r3, [r6, #0]
 8001b58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b5c:	4607      	mov	r7, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	b10a      	cbz	r2, 8001b66 <_printf_common+0x26>
 8001b62:	3301      	adds	r3, #1
 8001b64:	6033      	str	r3, [r6, #0]
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	0699      	lsls	r1, r3, #26
 8001b6a:	bf42      	ittt	mi
 8001b6c:	6833      	ldrmi	r3, [r6, #0]
 8001b6e:	3302      	addmi	r3, #2
 8001b70:	6033      	strmi	r3, [r6, #0]
 8001b72:	6825      	ldr	r5, [r4, #0]
 8001b74:	f015 0506 	ands.w	r5, r5, #6
 8001b78:	d106      	bne.n	8001b88 <_printf_common+0x48>
 8001b7a:	f104 0a19 	add.w	sl, r4, #25
 8001b7e:	68e3      	ldr	r3, [r4, #12]
 8001b80:	6832      	ldr	r2, [r6, #0]
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	42ab      	cmp	r3, r5
 8001b86:	dc26      	bgt.n	8001bd6 <_printf_common+0x96>
 8001b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	3b00      	subs	r3, #0
 8001b90:	bf18      	it	ne
 8001b92:	2301      	movne	r3, #1
 8001b94:	0692      	lsls	r2, r2, #26
 8001b96:	d42b      	bmi.n	8001bf0 <_printf_common+0xb0>
 8001b98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b9c:	4641      	mov	r1, r8
 8001b9e:	4638      	mov	r0, r7
 8001ba0:	47c8      	blx	r9
 8001ba2:	3001      	adds	r0, #1
 8001ba4:	d01e      	beq.n	8001be4 <_printf_common+0xa4>
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	6922      	ldr	r2, [r4, #16]
 8001baa:	f003 0306 	and.w	r3, r3, #6
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf02      	ittt	eq
 8001bb2:	68e5      	ldreq	r5, [r4, #12]
 8001bb4:	6833      	ldreq	r3, [r6, #0]
 8001bb6:	1aed      	subeq	r5, r5, r3
 8001bb8:	68a3      	ldr	r3, [r4, #8]
 8001bba:	bf0c      	ite	eq
 8001bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bc0:	2500      	movne	r5, #0
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	bfc4      	itt	gt
 8001bc6:	1a9b      	subgt	r3, r3, r2
 8001bc8:	18ed      	addgt	r5, r5, r3
 8001bca:	2600      	movs	r6, #0
 8001bcc:	341a      	adds	r4, #26
 8001bce:	42b5      	cmp	r5, r6
 8001bd0:	d11a      	bne.n	8001c08 <_printf_common+0xc8>
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	e008      	b.n	8001be8 <_printf_common+0xa8>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	4652      	mov	r2, sl
 8001bda:	4641      	mov	r1, r8
 8001bdc:	4638      	mov	r0, r7
 8001bde:	47c8      	blx	r9
 8001be0:	3001      	adds	r0, #1
 8001be2:	d103      	bne.n	8001bec <_printf_common+0xac>
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bec:	3501      	adds	r5, #1
 8001bee:	e7c6      	b.n	8001b7e <_printf_common+0x3e>
 8001bf0:	18e1      	adds	r1, r4, r3
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	2030      	movs	r0, #48	@ 0x30
 8001bf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001bfa:	4422      	add	r2, r4
 8001bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c04:	3302      	adds	r3, #2
 8001c06:	e7c7      	b.n	8001b98 <_printf_common+0x58>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	4641      	mov	r1, r8
 8001c0e:	4638      	mov	r0, r7
 8001c10:	47c8      	blx	r9
 8001c12:	3001      	adds	r0, #1
 8001c14:	d0e6      	beq.n	8001be4 <_printf_common+0xa4>
 8001c16:	3601      	adds	r6, #1
 8001c18:	e7d9      	b.n	8001bce <_printf_common+0x8e>
	...

08001c1c <_printf_i>:
 8001c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c20:	7e0f      	ldrb	r7, [r1, #24]
 8001c22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c24:	2f78      	cmp	r7, #120	@ 0x78
 8001c26:	4691      	mov	r9, r2
 8001c28:	4680      	mov	r8, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	469a      	mov	sl, r3
 8001c2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c32:	d807      	bhi.n	8001c44 <_printf_i+0x28>
 8001c34:	2f62      	cmp	r7, #98	@ 0x62
 8001c36:	d80a      	bhi.n	8001c4e <_printf_i+0x32>
 8001c38:	2f00      	cmp	r7, #0
 8001c3a:	f000 80d2 	beq.w	8001de2 <_printf_i+0x1c6>
 8001c3e:	2f58      	cmp	r7, #88	@ 0x58
 8001c40:	f000 80b9 	beq.w	8001db6 <_printf_i+0x19a>
 8001c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c4c:	e03a      	b.n	8001cc4 <_printf_i+0xa8>
 8001c4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c52:	2b15      	cmp	r3, #21
 8001c54:	d8f6      	bhi.n	8001c44 <_printf_i+0x28>
 8001c56:	a101      	add	r1, pc, #4	@ (adr r1, 8001c5c <_printf_i+0x40>)
 8001c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c5c:	08001cb5 	.word	0x08001cb5
 8001c60:	08001cc9 	.word	0x08001cc9
 8001c64:	08001c45 	.word	0x08001c45
 8001c68:	08001c45 	.word	0x08001c45
 8001c6c:	08001c45 	.word	0x08001c45
 8001c70:	08001c45 	.word	0x08001c45
 8001c74:	08001cc9 	.word	0x08001cc9
 8001c78:	08001c45 	.word	0x08001c45
 8001c7c:	08001c45 	.word	0x08001c45
 8001c80:	08001c45 	.word	0x08001c45
 8001c84:	08001c45 	.word	0x08001c45
 8001c88:	08001dc9 	.word	0x08001dc9
 8001c8c:	08001cf3 	.word	0x08001cf3
 8001c90:	08001d83 	.word	0x08001d83
 8001c94:	08001c45 	.word	0x08001c45
 8001c98:	08001c45 	.word	0x08001c45
 8001c9c:	08001deb 	.word	0x08001deb
 8001ca0:	08001c45 	.word	0x08001c45
 8001ca4:	08001cf3 	.word	0x08001cf3
 8001ca8:	08001c45 	.word	0x08001c45
 8001cac:	08001c45 	.word	0x08001c45
 8001cb0:	08001d8b 	.word	0x08001d8b
 8001cb4:	6833      	ldr	r3, [r6, #0]
 8001cb6:	1d1a      	adds	r2, r3, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6032      	str	r2, [r6, #0]
 8001cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001cc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e09d      	b.n	8001e04 <_printf_i+0x1e8>
 8001cc8:	6833      	ldr	r3, [r6, #0]
 8001cca:	6820      	ldr	r0, [r4, #0]
 8001ccc:	1d19      	adds	r1, r3, #4
 8001cce:	6031      	str	r1, [r6, #0]
 8001cd0:	0606      	lsls	r6, r0, #24
 8001cd2:	d501      	bpl.n	8001cd8 <_printf_i+0xbc>
 8001cd4:	681d      	ldr	r5, [r3, #0]
 8001cd6:	e003      	b.n	8001ce0 <_printf_i+0xc4>
 8001cd8:	0645      	lsls	r5, r0, #25
 8001cda:	d5fb      	bpl.n	8001cd4 <_printf_i+0xb8>
 8001cdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ce0:	2d00      	cmp	r5, #0
 8001ce2:	da03      	bge.n	8001cec <_printf_i+0xd0>
 8001ce4:	232d      	movs	r3, #45	@ 0x2d
 8001ce6:	426d      	negs	r5, r5
 8001ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cec:	4859      	ldr	r0, [pc, #356]	@ (8001e54 <_printf_i+0x238>)
 8001cee:	230a      	movs	r3, #10
 8001cf0:	e011      	b.n	8001d16 <_printf_i+0xfa>
 8001cf2:	6821      	ldr	r1, [r4, #0]
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	0608      	lsls	r0, r1, #24
 8001cf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cfc:	d402      	bmi.n	8001d04 <_printf_i+0xe8>
 8001cfe:	0649      	lsls	r1, r1, #25
 8001d00:	bf48      	it	mi
 8001d02:	b2ad      	uxthmi	r5, r5
 8001d04:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d06:	4853      	ldr	r0, [pc, #332]	@ (8001e54 <_printf_i+0x238>)
 8001d08:	6033      	str	r3, [r6, #0]
 8001d0a:	bf14      	ite	ne
 8001d0c:	230a      	movne	r3, #10
 8001d0e:	2308      	moveq	r3, #8
 8001d10:	2100      	movs	r1, #0
 8001d12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d16:	6866      	ldr	r6, [r4, #4]
 8001d18:	60a6      	str	r6, [r4, #8]
 8001d1a:	2e00      	cmp	r6, #0
 8001d1c:	bfa2      	ittt	ge
 8001d1e:	6821      	ldrge	r1, [r4, #0]
 8001d20:	f021 0104 	bicge.w	r1, r1, #4
 8001d24:	6021      	strge	r1, [r4, #0]
 8001d26:	b90d      	cbnz	r5, 8001d2c <_printf_i+0x110>
 8001d28:	2e00      	cmp	r6, #0
 8001d2a:	d04b      	beq.n	8001dc4 <_printf_i+0x1a8>
 8001d2c:	4616      	mov	r6, r2
 8001d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d32:	fb03 5711 	mls	r7, r3, r1, r5
 8001d36:	5dc7      	ldrb	r7, [r0, r7]
 8001d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d3c:	462f      	mov	r7, r5
 8001d3e:	42bb      	cmp	r3, r7
 8001d40:	460d      	mov	r5, r1
 8001d42:	d9f4      	bls.n	8001d2e <_printf_i+0x112>
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d10b      	bne.n	8001d60 <_printf_i+0x144>
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	07df      	lsls	r7, r3, #31
 8001d4c:	d508      	bpl.n	8001d60 <_printf_i+0x144>
 8001d4e:	6923      	ldr	r3, [r4, #16]
 8001d50:	6861      	ldr	r1, [r4, #4]
 8001d52:	4299      	cmp	r1, r3
 8001d54:	bfde      	ittt	le
 8001d56:	2330      	movle	r3, #48	@ 0x30
 8001d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d60:	1b92      	subs	r2, r2, r6
 8001d62:	6122      	str	r2, [r4, #16]
 8001d64:	f8cd a000 	str.w	sl, [sp]
 8001d68:	464b      	mov	r3, r9
 8001d6a:	aa03      	add	r2, sp, #12
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	4640      	mov	r0, r8
 8001d70:	f7ff fee6 	bl	8001b40 <_printf_common>
 8001d74:	3001      	adds	r0, #1
 8001d76:	d14a      	bne.n	8001e0e <_printf_i+0x1f2>
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	b004      	add	sp, #16
 8001d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	4833      	ldr	r0, [pc, #204]	@ (8001e58 <_printf_i+0x23c>)
 8001d8c:	2778      	movs	r7, #120	@ 0x78
 8001d8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	6831      	ldr	r1, [r6, #0]
 8001d96:	061f      	lsls	r7, r3, #24
 8001d98:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d9c:	d402      	bmi.n	8001da4 <_printf_i+0x188>
 8001d9e:	065f      	lsls	r7, r3, #25
 8001da0:	bf48      	it	mi
 8001da2:	b2ad      	uxthmi	r5, r5
 8001da4:	6031      	str	r1, [r6, #0]
 8001da6:	07d9      	lsls	r1, r3, #31
 8001da8:	bf44      	itt	mi
 8001daa:	f043 0320 	orrmi.w	r3, r3, #32
 8001dae:	6023      	strmi	r3, [r4, #0]
 8001db0:	b11d      	cbz	r5, 8001dba <_printf_i+0x19e>
 8001db2:	2310      	movs	r3, #16
 8001db4:	e7ac      	b.n	8001d10 <_printf_i+0xf4>
 8001db6:	4827      	ldr	r0, [pc, #156]	@ (8001e54 <_printf_i+0x238>)
 8001db8:	e7e9      	b.n	8001d8e <_printf_i+0x172>
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	f023 0320 	bic.w	r3, r3, #32
 8001dc0:	6023      	str	r3, [r4, #0]
 8001dc2:	e7f6      	b.n	8001db2 <_printf_i+0x196>
 8001dc4:	4616      	mov	r6, r2
 8001dc6:	e7bd      	b.n	8001d44 <_printf_i+0x128>
 8001dc8:	6833      	ldr	r3, [r6, #0]
 8001dca:	6825      	ldr	r5, [r4, #0]
 8001dcc:	6961      	ldr	r1, [r4, #20]
 8001dce:	1d18      	adds	r0, r3, #4
 8001dd0:	6030      	str	r0, [r6, #0]
 8001dd2:	062e      	lsls	r6, r5, #24
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	d501      	bpl.n	8001ddc <_printf_i+0x1c0>
 8001dd8:	6019      	str	r1, [r3, #0]
 8001dda:	e002      	b.n	8001de2 <_printf_i+0x1c6>
 8001ddc:	0668      	lsls	r0, r5, #25
 8001dde:	d5fb      	bpl.n	8001dd8 <_printf_i+0x1bc>
 8001de0:	8019      	strh	r1, [r3, #0]
 8001de2:	2300      	movs	r3, #0
 8001de4:	6123      	str	r3, [r4, #16]
 8001de6:	4616      	mov	r6, r2
 8001de8:	e7bc      	b.n	8001d64 <_printf_i+0x148>
 8001dea:	6833      	ldr	r3, [r6, #0]
 8001dec:	1d1a      	adds	r2, r3, #4
 8001dee:	6032      	str	r2, [r6, #0]
 8001df0:	681e      	ldr	r6, [r3, #0]
 8001df2:	6862      	ldr	r2, [r4, #4]
 8001df4:	2100      	movs	r1, #0
 8001df6:	4630      	mov	r0, r6
 8001df8:	f7fe f9f2 	bl	80001e0 <memchr>
 8001dfc:	b108      	cbz	r0, 8001e02 <_printf_i+0x1e6>
 8001dfe:	1b80      	subs	r0, r0, r6
 8001e00:	6060      	str	r0, [r4, #4]
 8001e02:	6863      	ldr	r3, [r4, #4]
 8001e04:	6123      	str	r3, [r4, #16]
 8001e06:	2300      	movs	r3, #0
 8001e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e0c:	e7aa      	b.n	8001d64 <_printf_i+0x148>
 8001e0e:	6923      	ldr	r3, [r4, #16]
 8001e10:	4632      	mov	r2, r6
 8001e12:	4649      	mov	r1, r9
 8001e14:	4640      	mov	r0, r8
 8001e16:	47d0      	blx	sl
 8001e18:	3001      	adds	r0, #1
 8001e1a:	d0ad      	beq.n	8001d78 <_printf_i+0x15c>
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	079b      	lsls	r3, r3, #30
 8001e20:	d413      	bmi.n	8001e4a <_printf_i+0x22e>
 8001e22:	68e0      	ldr	r0, [r4, #12]
 8001e24:	9b03      	ldr	r3, [sp, #12]
 8001e26:	4298      	cmp	r0, r3
 8001e28:	bfb8      	it	lt
 8001e2a:	4618      	movlt	r0, r3
 8001e2c:	e7a6      	b.n	8001d7c <_printf_i+0x160>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4632      	mov	r2, r6
 8001e32:	4649      	mov	r1, r9
 8001e34:	4640      	mov	r0, r8
 8001e36:	47d0      	blx	sl
 8001e38:	3001      	adds	r0, #1
 8001e3a:	d09d      	beq.n	8001d78 <_printf_i+0x15c>
 8001e3c:	3501      	adds	r5, #1
 8001e3e:	68e3      	ldr	r3, [r4, #12]
 8001e40:	9903      	ldr	r1, [sp, #12]
 8001e42:	1a5b      	subs	r3, r3, r1
 8001e44:	42ab      	cmp	r3, r5
 8001e46:	dcf2      	bgt.n	8001e2e <_printf_i+0x212>
 8001e48:	e7eb      	b.n	8001e22 <_printf_i+0x206>
 8001e4a:	2500      	movs	r5, #0
 8001e4c:	f104 0619 	add.w	r6, r4, #25
 8001e50:	e7f5      	b.n	8001e3e <_printf_i+0x222>
 8001e52:	bf00      	nop
 8001e54:	08002051 	.word	0x08002051
 8001e58:	08002062 	.word	0x08002062

08001e5c <memmove>:
 8001e5c:	4288      	cmp	r0, r1
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	eb01 0402 	add.w	r4, r1, r2
 8001e64:	d902      	bls.n	8001e6c <memmove+0x10>
 8001e66:	4284      	cmp	r4, r0
 8001e68:	4623      	mov	r3, r4
 8001e6a:	d807      	bhi.n	8001e7c <memmove+0x20>
 8001e6c:	1e43      	subs	r3, r0, #1
 8001e6e:	42a1      	cmp	r1, r4
 8001e70:	d008      	beq.n	8001e84 <memmove+0x28>
 8001e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e7a:	e7f8      	b.n	8001e6e <memmove+0x12>
 8001e7c:	4402      	add	r2, r0
 8001e7e:	4601      	mov	r1, r0
 8001e80:	428a      	cmp	r2, r1
 8001e82:	d100      	bne.n	8001e86 <memmove+0x2a>
 8001e84:	bd10      	pop	{r4, pc}
 8001e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e8e:	e7f7      	b.n	8001e80 <memmove+0x24>

08001e90 <_sbrk_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	4d06      	ldr	r5, [pc, #24]	@ (8001eac <_sbrk_r+0x1c>)
 8001e94:	2300      	movs	r3, #0
 8001e96:	4604      	mov	r4, r0
 8001e98:	4608      	mov	r0, r1
 8001e9a:	602b      	str	r3, [r5, #0]
 8001e9c:	f7ff fac2 	bl	8001424 <_sbrk>
 8001ea0:	1c43      	adds	r3, r0, #1
 8001ea2:	d102      	bne.n	8001eaa <_sbrk_r+0x1a>
 8001ea4:	682b      	ldr	r3, [r5, #0]
 8001ea6:	b103      	cbz	r3, 8001eaa <_sbrk_r+0x1a>
 8001ea8:	6023      	str	r3, [r4, #0]
 8001eaa:	bd38      	pop	{r3, r4, r5, pc}
 8001eac:	2000033c 	.word	0x2000033c

08001eb0 <memcpy>:
 8001eb0:	440a      	add	r2, r1
 8001eb2:	4291      	cmp	r1, r2
 8001eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001eb8:	d100      	bne.n	8001ebc <memcpy+0xc>
 8001eba:	4770      	bx	lr
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ec6:	4291      	cmp	r1, r2
 8001ec8:	d1f9      	bne.n	8001ebe <memcpy+0xe>
 8001eca:	bd10      	pop	{r4, pc}

08001ecc <_realloc_r>:
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	4680      	mov	r8, r0
 8001ed2:	4615      	mov	r5, r2
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	b921      	cbnz	r1, 8001ee2 <_realloc_r+0x16>
 8001ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001edc:	4611      	mov	r1, r2
 8001ede:	f7ff bc4b 	b.w	8001778 <_malloc_r>
 8001ee2:	b92a      	cbnz	r2, 8001ef0 <_realloc_r+0x24>
 8001ee4:	f7ff fbdc 	bl	80016a0 <_free_r>
 8001ee8:	2400      	movs	r4, #0
 8001eea:	4620      	mov	r0, r4
 8001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef0:	f000 f81a 	bl	8001f28 <_malloc_usable_size_r>
 8001ef4:	4285      	cmp	r5, r0
 8001ef6:	4606      	mov	r6, r0
 8001ef8:	d802      	bhi.n	8001f00 <_realloc_r+0x34>
 8001efa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001efe:	d8f4      	bhi.n	8001eea <_realloc_r+0x1e>
 8001f00:	4629      	mov	r1, r5
 8001f02:	4640      	mov	r0, r8
 8001f04:	f7ff fc38 	bl	8001778 <_malloc_r>
 8001f08:	4607      	mov	r7, r0
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d0ec      	beq.n	8001ee8 <_realloc_r+0x1c>
 8001f0e:	42b5      	cmp	r5, r6
 8001f10:	462a      	mov	r2, r5
 8001f12:	4621      	mov	r1, r4
 8001f14:	bf28      	it	cs
 8001f16:	4632      	movcs	r2, r6
 8001f18:	f7ff ffca 	bl	8001eb0 <memcpy>
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	4640      	mov	r0, r8
 8001f20:	f7ff fbbe 	bl	80016a0 <_free_r>
 8001f24:	463c      	mov	r4, r7
 8001f26:	e7e0      	b.n	8001eea <_realloc_r+0x1e>

08001f28 <_malloc_usable_size_r>:
 8001f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f2c:	1f18      	subs	r0, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bfbc      	itt	lt
 8001f32:	580b      	ldrlt	r3, [r1, r0]
 8001f34:	18c0      	addlt	r0, r0, r3
 8001f36:	4770      	bx	lr

08001f38 <_init>:
 8001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3a:	bf00      	nop
 8001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3e:	bc08      	pop	{r3}
 8001f40:	469e      	mov	lr, r3
 8001f42:	4770      	bx	lr

08001f44 <_fini>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	bf00      	nop
 8001f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4a:	bc08      	pop	{r3}
 8001f4c:	469e      	mov	lr, r3
 8001f4e:	4770      	bx	lr
