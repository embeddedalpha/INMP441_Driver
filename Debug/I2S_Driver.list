
I2S_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800301c  0800301c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003140  08003140  00005054  2**0
                  CONTENTS
  4 .ARM          00000008  08003140  08003140  00004140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003148  08003148  00005054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003148  08003148  00004148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08003150  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005054  2**0
                  CONTENTS
 10 .bss          000002f8  20000054  20000054  00005054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00005054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087ce  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e75  00000000  00000000  0000d852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a8  00000000  00000000  0000e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e8  00000000  00000000  0000e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a6c2  00000000  00000000  0000eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bd3  00000000  00000000  0002921a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f31d  00000000  00000000  0002eded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000be10a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e48  00000000  00000000  000be150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  000bef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003004 	.word	0x08003004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08003004 	.word	0x08003004

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int baudrate)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <Console_Init+0x44>)
 800028c:	f001 fcb3 	bl	8001bf6 <USART_Config_Reset>
	 serial.Port = USART1;
 8000290:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <Console_Init+0x44>)
 8000292:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <Console_Init+0x48>)
 8000294:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	4a0a      	ldr	r2, [pc, #40]	@ (80002c4 <Console_Init+0x44>)
 800029a:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 800029c:	2201      	movs	r2, #1
 800029e:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <Console_Init+0x44>)
 80002a0:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <Console_Init+0x44>)
 80002a8:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PA9;
 80002aa:	2209      	movs	r2, #9
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <Console_Init+0x44>)
 80002ae:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PA10;
 80002b0:	220a      	movs	r2, #10
 80002b2:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <Console_Init+0x44>)
 80002b4:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 80002b6:	4803      	ldr	r0, [pc, #12]	@ (80002c4 <Console_Init+0x44>)
 80002b8:	f002 f9ba 	bl	8002630 <USART_Init>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000070 	.word	0x20000070
 80002c8:	40011000 	.word	0x40011000

080002cc <printConsole>:

 void printConsole(char *msg, ...)
{
 80002cc:	b40f      	push	{r0, r1, r2, r3}
 80002ce:	b580      	push	{r7, lr}
 80002d0:	f5ad 5d1c 	sub.w	sp, sp, #9984	@ 0x2700
 80002d4:	b086      	sub	sp, #24
 80002d6:	af00      	add	r7, sp, #0

char buff[10000];
//	#ifdef DEBUG_UART

	va_list args;
	va_start(args, msg);
 80002d8:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80002dc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80002e0:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002e4:	f5a3 63e3 	sub.w	r3, r3, #1816	@ 0x718
 80002e8:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 80002ea:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80002ee:	f5a3 62e3 	sub.w	r2, r3, #1816	@ 0x718
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	3b14      	subs	r3, #20
 80002f8:	6812      	ldr	r2, [r2, #0]
 80002fa:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 80002fe:	f101 0120 	add.w	r1, r1, #32
 8000302:	6809      	ldr	r1, [r1, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f002 f9fb 	bl	8002700 <vsiprintf>

	for(int i = 0; i<= strlen(buff)-1; i++)
 800030a:	2300      	movs	r3, #0
 800030c:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000310:	f102 0214 	add.w	r2, r2, #20
 8000314:	6013      	str	r3, [r2, #0]
 8000316:	e020      	b.n	800035a <printConsole+0x8e>
	{
		serial.Port -> DR = buff[i];
 8000318:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 800031c:	f2a3 7214 	subw	r2, r3, #1812	@ 0x714
 8000320:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000324:	f103 0314 	add.w	r3, r3, #20
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4413      	add	r3, r2
 800032c:	781a      	ldrb	r2, [r3, #0]
 800032e:	4b17      	ldr	r3, [pc, #92]	@ (800038c <printConsole+0xc0>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
		while (!(serial.Port -> SR & USART_SR_TXE));
 8000334:	bf00      	nop
 8000336:	4b15      	ldr	r3, [pc, #84]	@ (800038c <printConsole+0xc0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f8      	beq.n	8000336 <printConsole+0x6a>
	for(int i = 0; i<= strlen(buff)-1; i++)
 8000344:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000348:	f103 0314 	add.w	r3, r3, #20
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000354:	f102 0214 	add.w	r2, r2, #20
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	3b14      	subs	r3, #20
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff35 	bl	80001d0 <strlen>
 8000366:	4603      	mov	r3, r0
 8000368:	1e5a      	subs	r2, r3, #1
 800036a:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800036e:	f103 0314 	add.w	r3, r3, #20
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	d2cf      	bcs.n	8000318 <printConsole+0x4c>
	}
}
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000388:	b004      	add	sp, #16
 800038a:	4770      	bx	lr
 800038c:	20000070 	.word	0x20000070

08000390 <DMA_Clock_Enable>:
 * DMA_Config structure.
 * 
 * @param config Pointer to the DMA configuration structure.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	if(config->controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0c      	ldr	r2, [pc, #48]	@ (80003d0 <DMA_Clock_Enable+0x40>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d105      	bne.n	80003ae <DMA_Clock_Enable+0x1e>
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <DMA_Clock_Enable+0x44>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a0b      	ldr	r2, [pc, #44]	@ (80003d4 <DMA_Clock_Enable+0x44>)
 80003a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config->controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a09      	ldr	r2, [pc, #36]	@ (80003d8 <DMA_Clock_Enable+0x48>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d105      	bne.n	80003c4 <DMA_Clock_Enable+0x34>
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <DMA_Clock_Enable+0x44>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <DMA_Clock_Enable+0x44>)
 80003be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40026000 	.word	0x40026000
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40026400 	.word	0x40026400

080003dc <DMA_Init>:
 * 
 * @param config Pointer to the DMA configuration structure.
 */

void DMA_Init(DMA_Config *config)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f7ff ffd3 	bl	8000390 <DMA_Clock_Enable>
	config -> stream -> CR |= config -> channel << DMA_SxCR_CHSEL_Pos;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	6819      	ldr	r1, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	065a      	lsls	r2, r3, #25
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	430a      	orrs	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> circular_mode;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	6819      	ldr	r1, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6a1a      	ldr	r2, [r3, #32]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> flow_control;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	6819      	ldr	r1, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68da      	ldr	r2, [r3, #12]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> priority_level;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	6819      	ldr	r1, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	430a      	orrs	r2, r1
 8000432:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_data_size;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	6819      	ldr	r1, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	69da      	ldr	r2, [r3, #28]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	430a      	orrs	r2, r1
 8000444:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_data_size;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	6819      	ldr	r1, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> transfer_direction;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	691a      	ldr	r2, [r3, #16]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	430a      	orrs	r2, r1
 8000468:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> interrupts;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	430a      	orrs	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_pointer_increment;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	430a      	orrs	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_pointer_increment;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800049a:	4619      	mov	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 80004b6:	2201      	movs	r2, #1
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	fa02 f303 	lsl.w	r3, r2, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	615a      	str	r2, [r3, #20]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a25      	ldr	r2, [pc, #148]	@ (8000570 <GPIO_Clock_Enable+0xa0>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80004e0:	4b24      	ldr	r3, [pc, #144]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a23      	ldr	r2, [pc, #140]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ec:	e039      	b.n	8000562 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a21      	ldr	r2, [pc, #132]	@ (8000578 <GPIO_Clock_Enable+0xa8>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
 8000502:	e02e      	b.n	8000562 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <GPIO_Clock_Enable+0xac>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800050c:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	4a18      	ldr	r2, [pc, #96]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6313      	str	r3, [r2, #48]	@ 0x30
 8000518:	e023      	b.n	8000562 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a18      	ldr	r2, [pc, #96]	@ (8000580 <GPIO_Clock_Enable+0xb0>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000522:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a13      	ldr	r2, [pc, #76]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	e018      	b.n	8000562 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <GPIO_Clock_Enable+0xb4>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d106      	bne.n	8000546 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000538:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6313      	str	r3, [r2, #48]	@ 0x30
 8000544:	e00d      	b.n	8000562 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <GPIO_Clock_Enable+0xb8>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <GPIO_Clock_Enable+0xa4>)
 8000554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	e002      	b.n	8000562 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	e000      	b.n	8000564 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40020000 	.word	0x40020000
 8000574:	40023800 	.word	0x40023800
 8000578:	40020400 	.word	0x40020400
 800057c:	40020800 	.word	0x40020800
 8000580:	40020c00 	.word	0x40020c00
 8000584:	40021000 	.word	0x40021000
 8000588:	40021c00 	.word	0x40021c00

0800058c <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	4608      	mov	r0, r1
 8000596:	4611      	mov	r1, r2
 8000598:	461a      	mov	r2, r3
 800059a:	4603      	mov	r3, r0
 800059c:	70fb      	strb	r3, [r7, #3]
 800059e:	460b      	mov	r3, r1
 80005a0:	70bb      	strb	r3, [r7, #2]
 80005a2:	4613      	mov	r3, r2
 80005a4:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ff92 	bl	80004d0 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	78b9      	ldrb	r1, [r7, #2]
 80005b2:	78fa      	ldrb	r2, [r7, #3]
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ba:	431a      	orrs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	7879      	ldrb	r1, [r7, #1]
 80005c6:	78fa      	ldrb	r2, [r7, #3]
 80005c8:	fa01 f202 	lsl.w	r2, r1, r2
 80005cc:	431a      	orrs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	7c39      	ldrb	r1, [r7, #16]
 80005d8:	78fa      	ldrb	r2, [r7, #3]
 80005da:	0052      	lsls	r2, r2, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	7d39      	ldrb	r1, [r7, #20]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	0052      	lsls	r2, r2, #1
 80005f0:	fa01 f202 	lsl.w	r2, r1, r2
 80005f4:	431a      	orrs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80005fa:	78fb      	ldrb	r3, [r7, #3]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d80a      	bhi.n	8000616 <GPIO_Pin_Init+0x8a>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	7e39      	ldrb	r1, [r7, #24]
 8000606:	78fa      	ldrb	r2, [r7, #3]
 8000608:	0092      	lsls	r2, r2, #2
 800060a:	fa01 f202 	lsl.w	r2, r1, r2
 800060e:	431a      	orrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8000614:	e00a      	b.n	800062c <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800061a:	7e39      	ldrb	r1, [r7, #24]
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	3a08      	subs	r2, #8
 8000620:	0092      	lsls	r2, r2, #2
 8000622:	fa01 f202 	lsl.w	r2, r1, r2
 8000626:	431a      	orrs	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <SCK_PIN_INIT2>:




static int8_t SCK_PIN_INIT2(I2S_Config *config)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af04      	add	r7, sp, #16
 800063a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000642:	461a      	mov	r2, r3
 8000644:	23d2      	movs	r3, #210	@ 0xd2
 8000646:	429a      	cmp	r2, r3
 8000648:	d10e      	bne.n	8000668 <SCK_PIN_INIT2+0x34>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800064a:	2002      	movs	r0, #2
 800064c:	2400      	movs	r4, #0
 800064e:	2303      	movs	r3, #3
 8000650:	2200      	movs	r2, #0
 8000652:	2105      	movs	r1, #5
 8000654:	9102      	str	r1, [sp, #8]
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	4623      	mov	r3, r4
 800065c:	4602      	mov	r2, r0
 800065e:	210a      	movs	r1, #10
 8000660:	4812      	ldr	r0, [pc, #72]	@ (80006ac <SCK_PIN_INIT2+0x78>)
 8000662:	f7ff ff93 	bl	800058c <GPIO_Pin_Init>
 8000666:	e01b      	b.n	80006a0 <SCK_PIN_INIT2+0x6c>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800066e:	461a      	mov	r2, r3
 8000670:	23d5      	movs	r3, #213	@ 0xd5
 8000672:	429a      	cmp	r2, r3
 8000674:	d10e      	bne.n	8000694 <SCK_PIN_INIT2+0x60>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000676:	2002      	movs	r0, #2
 8000678:	2400      	movs	r4, #0
 800067a:	2303      	movs	r3, #3
 800067c:	2200      	movs	r2, #0
 800067e:	2105      	movs	r1, #5
 8000680:	9102      	str	r1, [sp, #8]
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	4623      	mov	r3, r4
 8000688:	4602      	mov	r2, r0
 800068a:	210d      	movs	r1, #13
 800068c:	4807      	ldr	r0, [pc, #28]	@ (80006ac <SCK_PIN_INIT2+0x78>)
 800068e:	f7ff ff7d 	bl	800058c <GPIO_Pin_Init>
 8000692:	e005      	b.n	80006a0 <SCK_PIN_INIT2+0x6c>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2201      	movs	r2, #1
 8000698:	77da      	strb	r2, [r3, #31]
		return -1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	e000      	b.n	80006a2 <SCK_PIN_INIT2+0x6e>
	}
	return 1;
 80006a0:	2301      	movs	r3, #1
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020400 	.word	0x40020400

080006b0 <WS_PIN_INIT2>:
static int8_t WS_PIN_INIT2(I2S_Config *config)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af04      	add	r7, sp, #16
 80006b6:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80006be:	461a      	mov	r2, r3
 80006c0:	23d1      	movs	r3, #209	@ 0xd1
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d10e      	bne.n	80006e4 <WS_PIN_INIT2+0x34>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80006c6:	2002      	movs	r0, #2
 80006c8:	2400      	movs	r4, #0
 80006ca:	2303      	movs	r3, #3
 80006cc:	2200      	movs	r2, #0
 80006ce:	2105      	movs	r1, #5
 80006d0:	9102      	str	r1, [sp, #8]
 80006d2:	9201      	str	r2, [sp, #4]
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	4623      	mov	r3, r4
 80006d8:	4602      	mov	r2, r0
 80006da:	2109      	movs	r1, #9
 80006dc:	4812      	ldr	r0, [pc, #72]	@ (8000728 <WS_PIN_INIT2+0x78>)
 80006de:	f7ff ff55 	bl	800058c <GPIO_Pin_Init>
 80006e2:	e01b      	b.n	800071c <WS_PIN_INIT2+0x6c>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80006ea:	461a      	mov	r2, r3
 80006ec:	23d4      	movs	r3, #212	@ 0xd4
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d10e      	bne.n	8000710 <WS_PIN_INIT2+0x60>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80006f2:	2002      	movs	r0, #2
 80006f4:	2400      	movs	r4, #0
 80006f6:	2303      	movs	r3, #3
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	9102      	str	r1, [sp, #8]
 80006fe:	9201      	str	r2, [sp, #4]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	4602      	mov	r2, r0
 8000706:	210c      	movs	r1, #12
 8000708:	4807      	ldr	r0, [pc, #28]	@ (8000728 <WS_PIN_INIT2+0x78>)
 800070a:	f7ff ff3f 	bl	800058c <GPIO_Pin_Init>
 800070e:	e005      	b.n	800071c <WS_PIN_INIT2+0x6c>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	779a      	strb	r2, [r3, #30]
		return -1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e000      	b.n	800071e <WS_PIN_INIT2+0x6e>
	}
	return 1;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bd90      	pop	{r4, r7, pc}
 8000726:	bf00      	nop
 8000728:	40020400 	.word	0x40020400

0800072c <SD_PIN_Init2>:
static int8_t SD_PIN_Init2(I2S_Config *config)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af04      	add	r7, sp, #16
 8000732:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800073a:	461a      	mov	r2, r3
 800073c:	23d5      	movs	r3, #213	@ 0xd5
 800073e:	429a      	cmp	r2, r3
 8000740:	d10e      	bne.n	8000760 <SD_PIN_Init2+0x34>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000742:	2002      	movs	r0, #2
 8000744:	2400      	movs	r4, #0
 8000746:	2303      	movs	r3, #3
 8000748:	2200      	movs	r2, #0
 800074a:	2105      	movs	r1, #5
 800074c:	9102      	str	r1, [sp, #8]
 800074e:	9201      	str	r2, [sp, #4]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	4623      	mov	r3, r4
 8000754:	4602      	mov	r2, r0
 8000756:	210f      	movs	r1, #15
 8000758:	4812      	ldr	r0, [pc, #72]	@ (80007a4 <SD_PIN_Init2+0x78>)
 800075a:	f7ff ff17 	bl	800058c <GPIO_Pin_Init>
 800075e:	e01b      	b.n	8000798 <SD_PIN_Init2+0x6c>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000766:	461a      	mov	r2, r3
 8000768:	23df      	movs	r3, #223	@ 0xdf
 800076a:	429a      	cmp	r2, r3
 800076c:	d10e      	bne.n	800078c <SD_PIN_Init2+0x60>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800076e:	2002      	movs	r0, #2
 8000770:	2400      	movs	r4, #0
 8000772:	2303      	movs	r3, #3
 8000774:	2200      	movs	r2, #0
 8000776:	2105      	movs	r1, #5
 8000778:	9102      	str	r1, [sp, #8]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	4623      	mov	r3, r4
 8000780:	4602      	mov	r2, r0
 8000782:	2103      	movs	r1, #3
 8000784:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <SD_PIN_Init2+0x7c>)
 8000786:	f7ff ff01 	bl	800058c <GPIO_Pin_Init>
 800078a:	e005      	b.n	8000798 <SD_PIN_Init2+0x6c>
	}
	else{
		config->Error.SD_Pin_Error = true;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	775a      	strb	r2, [r3, #29]
		return -1;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	e000      	b.n	800079a <SD_PIN_Init2+0x6e>
	}
	return 1;
 8000798:	2301      	movs	r3, #1
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800

080007ac <MCK_PIN_Init2>:
static int8_t MCK_PIN_Init2(I2S_Config *config)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af04      	add	r7, sp, #16
 80007b2:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80007ba:	461a      	mov	r2, r3
 80007bc:	23ff      	movs	r3, #255	@ 0xff
 80007be:	429a      	cmp	r2, r3
 80007c0:	d01c      	beq.n	80007fc <MCK_PIN_Init2+0x50>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80007c8:	461a      	mov	r2, r3
 80007ca:	2325      	movs	r3, #37	@ 0x25
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d10e      	bne.n	80007ee <MCK_PIN_Init2+0x42>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 80007d0:	2002      	movs	r0, #2
 80007d2:	2400      	movs	r4, #0
 80007d4:	2303      	movs	r3, #3
 80007d6:	2200      	movs	r2, #0
 80007d8:	2105      	movs	r1, #5
 80007da:	9102      	str	r1, [sp, #8]
 80007dc:	9201      	str	r2, [sp, #4]
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	4623      	mov	r3, r4
 80007e2:	4602      	mov	r2, r0
 80007e4:	2107      	movs	r1, #7
 80007e6:	4808      	ldr	r0, [pc, #32]	@ (8000808 <MCK_PIN_Init2+0x5c>)
 80007e8:	f7ff fed0 	bl	800058c <GPIO_Pin_Init>
 80007ec:	e006      	b.n	80007fc <MCK_PIN_Init2+0x50>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2201      	movs	r2, #1
 80007f2:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	e000      	b.n	80007fe <MCK_PIN_Init2+0x52>
		}
	}
	return 1;
 80007fc:	2301      	movs	r3, #1
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	bf00      	nop
 8000808:	40020800 	.word	0x40020800

0800080c <EXT_SD_PIN_Init2>:
static int8_t EXT_SD_PIN_Init2(I2S_Config *config)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b087      	sub	sp, #28
 8000810:	af04      	add	r7, sp, #16
 8000812:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f993 3013 	ldrsb.w	r3, [r3, #19]
 800081a:	461a      	mov	r2, r3
 800081c:	23d6      	movs	r3, #214	@ 0xd6
 800081e:	429a      	cmp	r2, r3
 8000820:	d10e      	bne.n	8000840 <EXT_SD_PIN_Init2+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000822:	2002      	movs	r0, #2
 8000824:	2400      	movs	r4, #0
 8000826:	2303      	movs	r3, #3
 8000828:	2200      	movs	r2, #0
 800082a:	2105      	movs	r1, #5
 800082c:	9102      	str	r1, [sp, #8]
 800082e:	9201      	str	r2, [sp, #4]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	4623      	mov	r3, r4
 8000834:	4602      	mov	r2, r0
 8000836:	210e      	movs	r1, #14
 8000838:	4812      	ldr	r0, [pc, #72]	@ (8000884 <EXT_SD_PIN_Init2+0x78>)
 800083a:	f7ff fea7 	bl	800058c <GPIO_Pin_Init>
 800083e:	e01b      	b.n	8000878 <EXT_SD_PIN_Init2+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8000846:	461a      	mov	r2, r3
 8000848:	23ca      	movs	r3, #202	@ 0xca
 800084a:	429a      	cmp	r2, r3
 800084c:	d10e      	bne.n	800086c <EXT_SD_PIN_Init2+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800084e:	2002      	movs	r0, #2
 8000850:	2400      	movs	r4, #0
 8000852:	2303      	movs	r3, #3
 8000854:	2200      	movs	r2, #0
 8000856:	2105      	movs	r1, #5
 8000858:	9102      	str	r1, [sp, #8]
 800085a:	9201      	str	r2, [sp, #4]
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4623      	mov	r3, r4
 8000860:	4602      	mov	r2, r0
 8000862:	2102      	movs	r1, #2
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <EXT_SD_PIN_Init2+0x7c>)
 8000866:	f7ff fe91 	bl	800058c <GPIO_Pin_Init>
 800086a:	e005      	b.n	8000878 <EXT_SD_PIN_Init2+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2201      	movs	r2, #1
 8000870:	771a      	strb	r2, [r3, #28]
		return -1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	e000      	b.n	800087a <EXT_SD_PIN_Init2+0x6e>
	}
	return 1;
 8000878:	2301      	movs	r3, #1
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	bf00      	nop
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800

0800088c <SCK_PIN_INIT3>:


static int8_t SCK_PIN_INIT3(I2S_Config *config)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b087      	sub	sp, #28
 8000890:	af04      	add	r7, sp, #16
 8000892:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB10){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800089a:	461a      	mov	r2, r3
 800089c:	23d2      	movs	r3, #210	@ 0xd2
 800089e:	429a      	cmp	r2, r3
 80008a0:	d10e      	bne.n	80008c0 <SCK_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80008a2:	2002      	movs	r0, #2
 80008a4:	2400      	movs	r4, #0
 80008a6:	2303      	movs	r3, #3
 80008a8:	2200      	movs	r2, #0
 80008aa:	2105      	movs	r1, #5
 80008ac:	9102      	str	r1, [sp, #8]
 80008ae:	9201      	str	r2, [sp, #4]
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	4623      	mov	r3, r4
 80008b4:	4602      	mov	r2, r0
 80008b6:	210a      	movs	r1, #10
 80008b8:	4812      	ldr	r0, [pc, #72]	@ (8000904 <SCK_PIN_INIT3+0x78>)
 80008ba:	f7ff fe67 	bl	800058c <GPIO_Pin_Init>
 80008be:	e01b      	b.n	80008f8 <SCK_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.SCK_Pin == I2S_Pin.SCK.I2S2.PB13){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80008c6:	461a      	mov	r2, r3
 80008c8:	23d5      	movs	r3, #213	@ 0xd5
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d10e      	bne.n	80008ec <SCK_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80008ce:	2002      	movs	r0, #2
 80008d0:	2400      	movs	r4, #0
 80008d2:	2303      	movs	r3, #3
 80008d4:	2200      	movs	r2, #0
 80008d6:	2105      	movs	r1, #5
 80008d8:	9102      	str	r1, [sp, #8]
 80008da:	9201      	str	r2, [sp, #4]
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4623      	mov	r3, r4
 80008e0:	4602      	mov	r2, r0
 80008e2:	210d      	movs	r1, #13
 80008e4:	4807      	ldr	r0, [pc, #28]	@ (8000904 <SCK_PIN_INIT3+0x78>)
 80008e6:	f7ff fe51 	bl	800058c <GPIO_Pin_Init>
 80008ea:	e005      	b.n	80008f8 <SCK_PIN_INIT3+0x6c>
	}
	else{
		config->Error.SCK_Pin_Error = true;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2201      	movs	r2, #1
 80008f0:	77da      	strb	r2, [r3, #31]
		return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e000      	b.n	80008fa <SCK_PIN_INIT3+0x6e>
	}
	return 1;
 80008f8:	2301      	movs	r3, #1
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	40020400 	.word	0x40020400

08000908 <WS_PIN_INIT3>:
static int8_t WS_PIN_INIT3(I2S_Config *config)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b087      	sub	sp, #28
 800090c:	af04      	add	r7, sp, #16
 800090e:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB09){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000916:	461a      	mov	r2, r3
 8000918:	23d1      	movs	r3, #209	@ 0xd1
 800091a:	429a      	cmp	r2, r3
 800091c:	d10e      	bne.n	800093c <WS_PIN_INIT3+0x34>
		GPIO_Pin_Init(GPIOB, 9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800091e:	2002      	movs	r0, #2
 8000920:	2400      	movs	r4, #0
 8000922:	2303      	movs	r3, #3
 8000924:	2200      	movs	r2, #0
 8000926:	2105      	movs	r1, #5
 8000928:	9102      	str	r1, [sp, #8]
 800092a:	9201      	str	r2, [sp, #4]
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4623      	mov	r3, r4
 8000930:	4602      	mov	r2, r0
 8000932:	2109      	movs	r1, #9
 8000934:	4812      	ldr	r0, [pc, #72]	@ (8000980 <WS_PIN_INIT3+0x78>)
 8000936:	f7ff fe29 	bl	800058c <GPIO_Pin_Init>
 800093a:	e01b      	b.n	8000974 <WS_PIN_INIT3+0x6c>
	}
	else if(config->Full_Duplex.WS_Pin == I2S_Pin.WS.I2S2.PB12){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000942:	461a      	mov	r2, r3
 8000944:	23d4      	movs	r3, #212	@ 0xd4
 8000946:	429a      	cmp	r2, r3
 8000948:	d10e      	bne.n	8000968 <WS_PIN_INIT3+0x60>
		GPIO_Pin_Init(GPIOB, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800094a:	2002      	movs	r0, #2
 800094c:	2400      	movs	r4, #0
 800094e:	2303      	movs	r3, #3
 8000950:	2200      	movs	r2, #0
 8000952:	2105      	movs	r1, #5
 8000954:	9102      	str	r1, [sp, #8]
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4623      	mov	r3, r4
 800095c:	4602      	mov	r2, r0
 800095e:	210c      	movs	r1, #12
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <WS_PIN_INIT3+0x78>)
 8000962:	f7ff fe13 	bl	800058c <GPIO_Pin_Init>
 8000966:	e005      	b.n	8000974 <WS_PIN_INIT3+0x6c>
	}
	else{
		config->Error.WS_Pin_Error = true;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	779a      	strb	r2, [r3, #30]
		return -1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e000      	b.n	8000976 <WS_PIN_INIT3+0x6e>
	}
	return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bd90      	pop	{r4, r7, pc}
 800097e:	bf00      	nop
 8000980:	40020400 	.word	0x40020400

08000984 <SD_PIN_Init3>:
static int8_t SD_PIN_Init3(I2S_Config *config)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b087      	sub	sp, #28
 8000988:	af04      	add	r7, sp, #16
 800098a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PB15){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000992:	461a      	mov	r2, r3
 8000994:	23d5      	movs	r3, #213	@ 0xd5
 8000996:	429a      	cmp	r2, r3
 8000998:	d10e      	bne.n	80009b8 <SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 800099a:	2002      	movs	r0, #2
 800099c:	2400      	movs	r4, #0
 800099e:	2303      	movs	r3, #3
 80009a0:	2200      	movs	r2, #0
 80009a2:	2105      	movs	r1, #5
 80009a4:	9102      	str	r1, [sp, #8]
 80009a6:	9201      	str	r2, [sp, #4]
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4623      	mov	r3, r4
 80009ac:	4602      	mov	r2, r0
 80009ae:	210f      	movs	r1, #15
 80009b0:	4812      	ldr	r0, [pc, #72]	@ (80009fc <SD_PIN_Init3+0x78>)
 80009b2:	f7ff fdeb 	bl	800058c <GPIO_Pin_Init>
 80009b6:	e01b      	b.n	80009f0 <SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.SD_Pin == I2S_Pin.SD.I2S2.PC03){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80009be:	461a      	mov	r2, r3
 80009c0:	23df      	movs	r3, #223	@ 0xdf
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d10e      	bne.n	80009e4 <SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 80009c6:	2002      	movs	r0, #2
 80009c8:	2400      	movs	r4, #0
 80009ca:	2303      	movs	r3, #3
 80009cc:	2200      	movs	r2, #0
 80009ce:	2105      	movs	r1, #5
 80009d0:	9102      	str	r1, [sp, #8]
 80009d2:	9201      	str	r2, [sp, #4]
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	4623      	mov	r3, r4
 80009d8:	4602      	mov	r2, r0
 80009da:	2103      	movs	r1, #3
 80009dc:	4808      	ldr	r0, [pc, #32]	@ (8000a00 <SD_PIN_Init3+0x7c>)
 80009de:	f7ff fdd5 	bl	800058c <GPIO_Pin_Init>
 80009e2:	e005      	b.n	80009f0 <SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.SD_Pin_Error = true;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2201      	movs	r2, #1
 80009e8:	775a      	strb	r2, [r3, #29]
		return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e000      	b.n	80009f2 <SD_PIN_Init3+0x6e>
	}
	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40020800 	.word	0x40020800

08000a04 <MCK_PIN_Init3>:
static int8_t MCK_PIN_Init3(I2S_Config *config)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.MCK_Pin != I2S_Pin.MCK.I2S2.Disable)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8000a12:	461a      	mov	r2, r3
 8000a14:	23ff      	movs	r3, #255	@ 0xff
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d01c      	beq.n	8000a54 <MCK_PIN_Init3+0x50>
	{
		if((config->Full_Duplex.MCK_Pin == I2S_Pin.MCK.I2S2.PC7)){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8000a20:	461a      	mov	r2, r3
 8000a22:	2325      	movs	r3, #37	@ 0x25
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d10e      	bne.n	8000a46 <MCK_PIN_Init3+0x42>
			GPIO_Pin_Init(GPIOC, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2);
 8000a28:	2002      	movs	r0, #2
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2105      	movs	r1, #5
 8000a32:	9102      	str	r1, [sp, #8]
 8000a34:	9201      	str	r2, [sp, #4]
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4623      	mov	r3, r4
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	2107      	movs	r1, #7
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <MCK_PIN_Init3+0x5c>)
 8000a40:	f7ff fda4 	bl	800058c <GPIO_Pin_Init>
 8000a44:	e006      	b.n	8000a54 <MCK_PIN_Init3+0x50>
		}
		else{
			config->Error.MCK_PIN_Error = true;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2020 	strb.w	r2, [r3, #32]
			return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e000      	b.n	8000a56 <MCK_PIN_Init3+0x52>
		}
	}
	return 1;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020800 	.word	0x40020800

08000a64 <EXT_SD_PIN_Init3>:
static int8_t EXT_SD_PIN_Init3(I2S_Config *config)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af04      	add	r7, sp, #16
 8000a6a:	6078      	str	r0, [r7, #4]
	if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PB14){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8000a72:	461a      	mov	r2, r3
 8000a74:	23d6      	movs	r3, #214	@ 0xd6
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d10e      	bne.n	8000a98 <EXT_SD_PIN_Init3+0x34>
		GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	2303      	movs	r3, #3
 8000a80:	2200      	movs	r2, #0
 8000a82:	2105      	movs	r1, #5
 8000a84:	9102      	str	r1, [sp, #8]
 8000a86:	9201      	str	r2, [sp, #4]
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	210e      	movs	r1, #14
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <EXT_SD_PIN_Init3+0x78>)
 8000a92:	f7ff fd7b 	bl	800058c <GPIO_Pin_Init>
 8000a96:	e01b      	b.n	8000ad0 <EXT_SD_PIN_Init3+0x6c>
	}
	else if(config->Full_Duplex.EXT_SD == I2S_Pin.EXT_SD.I2S2.PC02){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	23ca      	movs	r3, #202	@ 0xca
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d10e      	bne.n	8000ac4 <EXT_SD_PIN_Init3+0x60>
		GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.I2S_2EXT);
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	2400      	movs	r4, #0
 8000aaa:	2303      	movs	r3, #3
 8000aac:	2200      	movs	r2, #0
 8000aae:	2105      	movs	r1, #5
 8000ab0:	9102      	str	r1, [sp, #8]
 8000ab2:	9201      	str	r2, [sp, #4]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	4602      	mov	r2, r0
 8000aba:	2102      	movs	r1, #2
 8000abc:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <EXT_SD_PIN_Init3+0x7c>)
 8000abe:	f7ff fd65 	bl	800058c <GPIO_Pin_Init>
 8000ac2:	e005      	b.n	8000ad0 <EXT_SD_PIN_Init3+0x6c>
	}
	else{
		config->Error.Ext_SD_Pin_Error = true;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	771a      	strb	r2, [r3, #28]
		return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e000      	b.n	8000ad2 <EXT_SD_PIN_Init3+0x6e>
	}
	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd90      	pop	{r4, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <I2S_DeInit>:


/********************************************************************************************************/
void I2S_DeInit(I2S_Config *config)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(config->Port != NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <I2S_DeInit+0x1c>
	{
		RCC->APB1ENR &= ~(RCC_APB1ENR_SPI2EN | RCC_APB1ENR_SPI3EN);
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <I2S_DeInit+0xc4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba8 <I2S_DeInit+0xc4>)
 8000afa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	config->Port->I2SCFGR &= ~0xFFFF;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	6812      	ldr	r2, [r2, #0]
 8000b0a:	0c1b      	lsrs	r3, r3, #16
 8000b0c:	041b      	lsls	r3, r3, #16
 8000b0e:	61d3      	str	r3, [r2, #28]
	config->Port->I2SPR &= ~0xFFFF;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	0c1b      	lsrs	r3, r3, #16
 8000b1c:	041b      	lsls	r3, r3, #16
 8000b1e:	6213      	str	r3, [r2, #32]
	config->Audio_Frequency = -1;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	22ff      	movs	r2, #255	@ 0xff
 8000b24:	731a      	strb	r2, [r3, #12]
	config->Channel_Length = -1;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	22ff      	movs	r2, #255	@ 0xff
 8000b2a:	72da      	strb	r2, [r3, #11]
	config->Data_Length = -1;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	22ff      	movs	r2, #255	@ 0xff
 8000b30:	729a      	strb	r2, [r3, #10]
	config->LR_Pin_Number = -1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	22ff      	movs	r2, #255	@ 0xff
 8000b36:	721a      	strb	r2, [r3, #8]

	config->Standard = -1;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	22ff      	movs	r2, #255	@ 0xff
 8000b3c:	725a      	strb	r2, [r3, #9]
	config->Full_Duplex.EXT_SD = -1;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	22ff      	movs	r2, #255	@ 0xff
 8000b42:	74da      	strb	r2, [r3, #19]
	config->Full_Duplex.MCK_Pin = -1;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	22ff      	movs	r2, #255	@ 0xff
 8000b48:	73da      	strb	r2, [r3, #15]
	config->Full_Duplex.SCK_Pin = -1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	22ff      	movs	r2, #255	@ 0xff
 8000b4e:	741a      	strb	r2, [r3, #16]
	config->Full_Duplex.SD_Pin = -1;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	22ff      	movs	r2, #255	@ 0xff
 8000b54:	745a      	strb	r2, [r3, #17]
	config->Full_Duplex.WS_Pin = -1;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	22ff      	movs	r2, #255	@ 0xff
 8000b5a:	749a      	strb	r2, [r3, #18]
	config->Full_Duplex.mode = -1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	22ff      	movs	r2, #255	@ 0xff
 8000b60:	739a      	strb	r2, [r3, #14]
	config->Full_Duplex.Enable = 0;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	735a      	strb	r2, [r3, #13]
	config->Half_Duplex.MCK_Pin = -1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	22ff      	movs	r2, #255	@ 0xff
 8000b6c:	759a      	strb	r2, [r3, #22]
	config->Half_Duplex.SCK_Pin = -1;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	22ff      	movs	r2, #255	@ 0xff
 8000b72:	75da      	strb	r2, [r3, #23]
	config->Half_Duplex.SD_Pin = -1;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	22ff      	movs	r2, #255	@ 0xff
 8000b78:	761a      	strb	r2, [r3, #24]
	config->Half_Duplex.WS_Pin = -1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	22ff      	movs	r2, #255	@ 0xff
 8000b7e:	765a      	strb	r2, [r3, #25]
	config->Half_Duplex.mode = -1;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	22ff      	movs	r2, #255	@ 0xff
 8000b84:	755a      	strb	r2, [r3, #21]
	config->Half_Duplex.Enable = 0;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	751a      	strb	r2, [r3, #20]
	config->LR_Pin_Port = NULL;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
	I2S_Start(config);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 fb48 	bl	8001228 <I2S_Start>
	config->Port = NULL;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <I2S_Init>:

/********************************************************************************************************/
int8_t I2S_Init(I2S_Config *config)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if(config->Port == I2S_Port.I2S2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a93      	ldr	r2, [pc, #588]	@ (8000e08 <I2S_Init+0x25c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d122      	bne.n	8000c04 <I2S_Init+0x58>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000bbe:	4b93      	ldr	r3, [pc, #588]	@ (8000e0c <I2S_Init+0x260>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a92      	ldr	r2, [pc, #584]	@ (8000e0c <I2S_Init+0x260>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7d1b      	ldrb	r3, [r3, #20]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d103      	bne.n	8000bda <I2S_Init+0x2e>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7b5b      	ldrb	r3, [r3, #13]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00c      	beq.n	8000bf4 <I2S_Init+0x48>
		{
			SD_PIN_Init2(config);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fda6 	bl	800072c <SD_PIN_Init2>
			WS_PIN_INIT2(config);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fd65 	bl	80006b0 <WS_PIN_INIT2>
			SCK_PIN_INIT2(config);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fd24 	bl	8000634 <SCK_PIN_INIT2>
			MCK_PIN_Init2(config);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff fddd 	bl	80007ac <MCK_PIN_Init2>
 8000bf2:	e032      	b.n	8000c5a <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b5b      	ldrb	r3, [r3, #13]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d02e      	beq.n	8000c5a <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init2(config);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fe05 	bl	800080c <EXT_SD_PIN_Init2>
 8000c02:	e02a      	b.n	8000c5a <I2S_Init+0xae>
		}
	}
	else if(config->Port == I2S_Port.I2S3)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a81      	ldr	r2, [pc, #516]	@ (8000e10 <I2S_Init+0x264>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d122      	bne.n	8000c54 <I2S_Init+0xa8>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8000e0c <I2S_Init+0x260>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a7e      	ldr	r2, [pc, #504]	@ (8000e0c <I2S_Init+0x260>)
 8000c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40

		if((config->Half_Duplex.Enable == true) || (config->Full_Duplex.Enable == true))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7d1b      	ldrb	r3, [r3, #20]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d103      	bne.n	8000c2a <I2S_Init+0x7e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b5b      	ldrb	r3, [r3, #13]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00c      	beq.n	8000c44 <I2S_Init+0x98>
		{
			SD_PIN_Init3(config);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff feaa 	bl	8000984 <SD_PIN_Init3>
			WS_PIN_INIT3(config);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fe69 	bl	8000908 <WS_PIN_INIT3>
			SCK_PIN_INIT3(config);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fe28 	bl	800088c <SCK_PIN_INIT3>
			MCK_PIN_Init3(config);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fee1 	bl	8000a04 <MCK_PIN_Init3>
 8000c42:	e00a      	b.n	8000c5a <I2S_Init+0xae>
		}
		else if(config->Full_Duplex.Enable == true)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7b5b      	ldrb	r3, [r3, #13]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <I2S_Init+0xae>
		{
			EXT_SD_PIN_Init3(config);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff09 	bl	8000a64 <EXT_SD_PIN_Init3>
 8000c52:	e002      	b.n	8000c5a <I2S_Init+0xae>
		}
	}
	else
	{

		config->Error.Port_Error = true;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	769a      	strb	r2, [r3, #26]
	}



	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	69da      	ldr	r2, [r3, #28]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c68:	61da      	str	r2, [r3, #28]
	config->Port->I2SCFGR |= SPI_I2SCFGR_I2SMOD;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69da      	ldr	r2, [r3, #28]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000c78:	61da      	str	r2, [r3, #28]

	I2S_Stop(config);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 fae6 	bl	800124c <I2S_Stop>


	// I2S Mode
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	69da      	ldr	r2, [r3, #28]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000c8e:	61da      	str	r2, [r3, #28]
	if(config->Full_Duplex.mode == I2S_Mode.Master.Transmit){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000c96:	461a      	mov	r2, r3
 8000c98:	2301      	movs	r3, #1
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d108      	bne.n	8000cb0 <I2S_Init+0x104>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_1;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	69da      	ldr	r2, [r3, #28]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000cac:	61da      	str	r2, [r3, #28]
 8000cae:	e02e      	b.n	8000d0e <I2S_Init+0x162>
	}else if(config->Full_Duplex.mode == I2S_Mode.Master.Receive){
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2302      	movs	r3, #2
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d108      	bne.n	8000cd0 <I2S_Init+0x124>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	69da      	ldr	r2, [r3, #28]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8000ccc:	61da      	str	r2, [r3, #28]
 8000cce:	e01e      	b.n	8000d0e <I2S_Init+0x162>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Transmit){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2303      	movs	r3, #3
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d108      	bne.n	8000cf0 <I2S_Init+0x144>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SCFG;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69da      	ldr	r2, [r3, #28]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000cec:	61da      	str	r2, [r3, #28]
 8000cee:	e00e      	b.n	8000d0e <I2S_Init+0x162>
	}else if(config->Full_Duplex.mode == I2S_Mode.Slave.Receive){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d107      	bne.n	8000d0e <I2S_Init+0x162>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SCFG_0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d0c:	61da      	str	r2, [r3, #28]
	}

	// Standard
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_I2SSTD;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8000d1c:	61da      	str	r2, [r3, #28]
	if(config->Standard == I2S_Standard.Standard_Philips){
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d24:	2201      	movs	r2, #1
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d108      	bne.n	8000d3c <I2S_Init+0x190>
		config->Port->I2SCFGR &= ~(SPI_I2SCFGR_I2SSTD);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69da      	ldr	r2, [r3, #28]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8000d38:	61da      	str	r2, [r3, #28]
 8000d3a:	e030      	b.n	8000d9e <I2S_Init+0x1f2>
	}else if(config->Standard == I2S_Standard.Left_Justified){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d42:	2202      	movs	r2, #2
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d108      	bne.n	8000d5a <I2S_Init+0x1ae>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	69da      	ldr	r2, [r3, #28]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 0210 	orr.w	r2, r2, #16
 8000d56:	61da      	str	r2, [r3, #28]
 8000d58:	e021      	b.n	8000d9e <I2S_Init+0x1f2>
	}else if(config->Standard == I2S_Standard.Right_Justified){
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d108      	bne.n	8000d78 <I2S_Init+0x1cc>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD_1;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0220 	orr.w	r2, r2, #32
 8000d74:	61da      	str	r2, [r3, #28]
 8000d76:	e012      	b.n	8000d9e <I2S_Init+0x1f2>
	}else if(config->Standard == I2S_Standard.PCM){
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d108      	bne.n	8000d96 <I2S_Init+0x1ea>
		config->Port->I2SCFGR |= SPI_I2SCFGR_I2SSTD;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8000d92:	61da      	str	r2, [r3, #28]
 8000d94:	e003      	b.n	8000d9e <I2S_Init+0x1f2>
	}else{
		config->Error.Standard_Error  = true;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}

	// Data Length
	config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	69da      	ldr	r2, [r3, #28]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0206 	bic.w	r2, r2, #6
 8000dac:	61da      	str	r2, [r3, #28]
	if(config->Data_Length == I2S_Data_Length._16_bit){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000db4:	2201      	movs	r2, #1
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d108      	bne.n	8000dcc <I2S_Init+0x220>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_DATLEN;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	69da      	ldr	r2, [r3, #28]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0206 	bic.w	r2, r2, #6
 8000dc8:	61da      	str	r2, [r3, #28]
 8000dca:	e027      	b.n	8000e1c <I2S_Init+0x270>
	}else if(config->Data_Length == I2S_Data_Length._24_bit){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d108      	bne.n	8000dea <I2S_Init+0x23e>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_0;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	69da      	ldr	r2, [r3, #28]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0202 	orr.w	r2, r2, #2
 8000de6:	61da      	str	r2, [r3, #28]
 8000de8:	e018      	b.n	8000e1c <I2S_Init+0x270>
	}else if(config->Data_Length == I2S_Data_Length._32_bit){
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000df0:	2203      	movs	r2, #3
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10e      	bne.n	8000e14 <I2S_Init+0x268>
		config->Port->I2SCFGR |= SPI_I2SCFGR_DATLEN_1;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	69da      	ldr	r2, [r3, #28]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 0204 	orr.w	r2, r2, #4
 8000e04:	61da      	str	r2, [r3, #28]
 8000e06:	e009      	b.n	8000e1c <I2S_Init+0x270>
 8000e08:	40003800 	.word	0x40003800
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40003c00 	.word	0x40003c00
	}else{
		config->Error.Data_Len_Error = true;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	}


	config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	61da      	str	r2, [r3, #28]
	if(config->Channel_Length == I2S_Channel_Length._16_bit){
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d108      	bne.n	8000e4a <I2S_Init+0x29e>
		config->Port->I2SCFGR &= ~SPI_I2SCFGR_CHLEN;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	61da      	str	r2, [r3, #28]
 8000e48:	e012      	b.n	8000e70 <I2S_Init+0x2c4>
	}else if(config->Channel_Length == I2S_Channel_Length._32_bit){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d108      	bne.n	8000e68 <I2S_Init+0x2bc>
		config->Port->I2SCFGR |=  SPI_I2SCFGR_CHLEN;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0201 	orr.w	r2, r2, #1
 8000e64:	61da      	str	r2, [r3, #28]
 8000e66:	e003      	b.n	8000e70 <I2S_Init+0x2c4>
	}else{
		config->Error.Channel_Length_Error = true;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	}


	int plli2s_n = 128;
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	60fb      	str	r3, [r7, #12]
	int plli2s_r = 5;
 8000e74:	2305      	movs	r3, #5
 8000e76:	60bb      	str	r3, [r7, #8]
	if(config->Audio_Frequency == I2S_Audio_Frequency._8000Hz)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2301      	movs	r3, #1
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d121      	bne.n	8000eca <I2S_Init+0x31e>
	{
		//
		  plli2s_n = 64;
 8000e86:	2340      	movs	r3, #64	@ 0x40
 8000e88:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	019a      	lsls	r2, r3, #6
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	071b      	lsls	r3, r3, #28
 8000e96:	431a      	orrs	r2, r3
 8000e98:	4b9b      	ldr	r3, [pc, #620]	@ (8001108 <I2S_Init+0x55c>)
 8000e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000e9e:	4b9a      	ldr	r3, [pc, #616]	@ (8001108 <I2S_Init+0x55c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a99      	ldr	r2, [pc, #612]	@ (8001108 <I2S_Init+0x55c>)
 8000ea4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ea8:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000eaa:	bf00      	nop
 8000eac:	4b96      	ldr	r3, [pc, #600]	@ (8001108 <I2S_Init+0x55c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f9      	beq.n	8000eac <I2S_Init+0x300>
		config->Port->I2SPR |= 50;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8000ec6:	621a      	str	r2, [r3, #32]
 8000ec8:	e132      	b.n	8001130 <I2S_Init+0x584>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._16000Hz)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d121      	bne.n	8000f1c <I2S_Init+0x370>
	{
		//
		  plli2s_n = 128;
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000edc:	2305      	movs	r3, #5
 8000ede:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	019a      	lsls	r2, r3, #6
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	071b      	lsls	r3, r3, #28
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	4b87      	ldr	r3, [pc, #540]	@ (8001108 <I2S_Init+0x55c>)
 8000eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000ef0:	4b85      	ldr	r3, [pc, #532]	@ (8001108 <I2S_Init+0x55c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a84      	ldr	r2, [pc, #528]	@ (8001108 <I2S_Init+0x55c>)
 8000ef6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000efa:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000efc:	bf00      	nop
 8000efe:	4b82      	ldr	r3, [pc, #520]	@ (8001108 <I2S_Init+0x55c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f9      	beq.n	8000efe <I2S_Init+0x352>
		config->Port->I2SPR |= 50;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8000f18:	621a      	str	r2, [r3, #32]
 8000f1a:	e109      	b.n	8001130 <I2S_Init+0x584>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._22050Hz)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f22:	461a      	mov	r2, r3
 8000f24:	2303      	movs	r3, #3
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d121      	bne.n	8000f6e <I2S_Init+0x3c2>
	{
		//
		 plli2s_n = 141;
 8000f2a:	238d      	movs	r3, #141	@ 0x8d
 8000f2c:	60fb      	str	r3, [r7, #12]
		 plli2s_r = 5;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	019a      	lsls	r2, r3, #6
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	071b      	lsls	r3, r3, #28
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	4b72      	ldr	r3, [pc, #456]	@ (8001108 <I2S_Init+0x55c>)
 8000f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000f42:	4b71      	ldr	r3, [pc, #452]	@ (8001108 <I2S_Init+0x55c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a70      	ldr	r2, [pc, #448]	@ (8001108 <I2S_Init+0x55c>)
 8000f48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f4c:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000f4e:	bf00      	nop
 8000f50:	4b6d      	ldr	r3, [pc, #436]	@ (8001108 <I2S_Init+0x55c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f9      	beq.n	8000f50 <I2S_Init+0x3a4>
		config->Port->I2SPR |= 40 | SPI_I2SPR_ODD;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a1a      	ldr	r2, [r3, #32]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f442 7294 	orr.w	r2, r2, #296	@ 0x128
 8000f6a:	621a      	str	r2, [r3, #32]
 8000f6c:	e0e0      	b.n	8001130 <I2S_Init+0x584>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._32000Hz)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f74:	461a      	mov	r2, r3
 8000f76:	2304      	movs	r3, #4
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d121      	bne.n	8000fc0 <I2S_Init+0x414>
	{
		//
		  plli2s_n = 64;
 8000f7c:	2340      	movs	r3, #64	@ 0x40
 8000f7e:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8000f80:	2305      	movs	r3, #5
 8000f82:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	019a      	lsls	r2, r3, #6
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	071b      	lsls	r3, r3, #28
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	@ (8001108 <I2S_Init+0x55c>)
 8000f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000f94:	4b5c      	ldr	r3, [pc, #368]	@ (8001108 <I2S_Init+0x55c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a5b      	ldr	r2, [pc, #364]	@ (8001108 <I2S_Init+0x55c>)
 8000f9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f9e:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000fa0:	bf00      	nop
 8000fa2:	4b59      	ldr	r3, [pc, #356]	@ (8001108 <I2S_Init+0x55c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f9      	beq.n	8000fa2 <I2S_Init+0x3f6>
		config->Port->I2SPR |= 12;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f042 020c 	orr.w	r2, r2, #12
 8000fbc:	621a      	str	r2, [r3, #32]
 8000fbe:	e0b7      	b.n	8001130 <I2S_Init+0x584>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._44100Hz)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2305      	movs	r3, #5
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d121      	bne.n	8001012 <I2S_Init+0x466>
	{
		//
		  plli2s_n = 50;
 8000fce:	2332      	movs	r3, #50	@ 0x32
 8000fd0:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 6;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	019a      	lsls	r2, r3, #6
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	071b      	lsls	r3, r3, #28
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	4b49      	ldr	r3, [pc, #292]	@ (8001108 <I2S_Init+0x55c>)
 8000fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8000fe6:	4b48      	ldr	r3, [pc, #288]	@ (8001108 <I2S_Init+0x55c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a47      	ldr	r2, [pc, #284]	@ (8001108 <I2S_Init+0x55c>)
 8000fec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ff0:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8000ff2:	bf00      	nop
 8000ff4:	4b44      	ldr	r3, [pc, #272]	@ (8001108 <I2S_Init+0x55c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f9      	beq.n	8000ff4 <I2S_Init+0x448>
		config->Port->I2SPR |= 10 | SPI_I2SPR_ODD;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 7285 	orr.w	r2, r2, #266	@ 0x10a
 800100e:	621a      	str	r2, [r3, #32]
 8001010:	e08e      	b.n	8001130 <I2S_Init+0x584>
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._48000Hz)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001018:	461a      	mov	r2, r3
 800101a:	2306      	movs	r3, #6
 800101c:	429a      	cmp	r2, r3
 800101e:	d121      	bne.n	8001064 <I2S_Init+0x4b8>
	{
		//
		  plli2s_n = 96;
 8001020:	2360      	movs	r3, #96	@ 0x60
 8001022:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8001024:	2305      	movs	r3, #5
 8001026:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	019a      	lsls	r2, r3, #6
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	071b      	lsls	r3, r3, #28
 8001030:	431a      	orrs	r2, r3
 8001032:	4b35      	ldr	r3, [pc, #212]	@ (8001108 <I2S_Init+0x55c>)
 8001034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 8001038:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <I2S_Init+0x55c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a32      	ldr	r2, [pc, #200]	@ (8001108 <I2S_Init+0x55c>)
 800103e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001042:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001044:	bf00      	nop
 8001046:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <I2S_Init+0x55c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f9      	beq.n	8001046 <I2S_Init+0x49a>
		config->Port->I2SPR |= 12;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a1a      	ldr	r2, [r3, #32]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 020c 	orr.w	r2, r2, #12
 8001060:	621a      	str	r2, [r3, #32]
 8001062:	e065      	b.n	8001130 <I2S_Init+0x584>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._64000Hz)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800106a:	461a      	mov	r2, r3
 800106c:	2307      	movs	r3, #7
 800106e:	429a      	cmp	r2, r3
 8001070:	d121      	bne.n	80010b6 <I2S_Init+0x50a>
	{
		//
		  plli2s_n = 128;
 8001072:	2380      	movs	r3, #128	@ 0x80
 8001074:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 8001076:	2305      	movs	r3, #5
 8001078:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	019a      	lsls	r2, r3, #6
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	071b      	lsls	r3, r3, #28
 8001082:	431a      	orrs	r2, r3
 8001084:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <I2S_Init+0x55c>)
 8001086:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <I2S_Init+0x55c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <I2S_Init+0x55c>)
 8001090:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001094:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 8001096:	bf00      	nop
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <I2S_Init+0x55c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f9      	beq.n	8001098 <I2S_Init+0x4ec>
		config->Port->I2SPR |= 12;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a1a      	ldr	r2, [r3, #32]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 020c 	orr.w	r2, r2, #12
 80010b2:	621a      	str	r2, [r3, #32]
 80010b4:	e03c      	b.n	8001130 <I2S_Init+0x584>
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._96000Hz)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010bc:	461a      	mov	r2, r3
 80010be:	2308      	movs	r3, #8
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d123      	bne.n	800110c <I2S_Init+0x560>
	{
		//
		  plli2s_n = 192;
 80010c4:	23c0      	movs	r3, #192	@ 0xc0
 80010c6:	60fb      	str	r3, [r7, #12]
		  plli2s_r = 5;
 80010c8:	2305      	movs	r3, #5
 80010ca:	60bb      	str	r3, [r7, #8]
		RCC -> PLLI2SCFGR = (plli2s_n << 6) | (plli2s_r << 28);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	019a      	lsls	r2, r3, #6
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	071b      	lsls	r3, r3, #28
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <I2S_Init+0x55c>)
 80010d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		RCC -> CR |= RCC_CR_PLLI2SON;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <I2S_Init+0x55c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <I2S_Init+0x55c>)
 80010e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010e6:	6013      	str	r3, [r2, #0]
		while(!(RCC -> CR & RCC_CR_PLLI2SRDY));
 80010e8:	bf00      	nop
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <I2S_Init+0x55c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f9      	beq.n	80010ea <I2S_Init+0x53e>
		config->Port->I2SPR |= 12 ;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 020c 	orr.w	r2, r2, #12
 8001104:	621a      	str	r2, [r3, #32]
 8001106:	e013      	b.n	8001130 <I2S_Init+0x584>
 8001108:	40023800 	.word	0x40023800
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._192000Hz)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001112:	461a      	mov	r2, r3
 8001114:	2309      	movs	r3, #9
 8001116:	429a      	cmp	r2, r3
 8001118:	d00a      	beq.n	8001130 <I2S_Init+0x584>
	{
		//
	}else if(config->Audio_Frequency == I2S_Audio_Frequency._384000Hz)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001120:	461a      	mov	r2, r3
 8001122:	230a      	movs	r3, #10
 8001124:	429a      	cmp	r2, r3
 8001126:	d003      	beq.n	8001130 <I2S_Init+0x584>
	{
		//
	}else
	{
		config->Error.Audio_Frequency_Error = true;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	//  I2S Enable
	I2S_Start(config);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f879 	bl	8001228 <I2S_Start>

	I2S_Mode_Set(config);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f89a 	bl	8001270 <I2S_Mode_Set>

	return 1;
 800113c:	2301      	movs	r3, #1

}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop

08001148 <I2S_Print_Errors>:
/********************************************************************************************************/
/********************************************************************************************************/
void I2S_Print_Errors(I2S_Config *config)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if(config->Error.Audio_Frequency_Error) printConsole("Audio_Frequency_Error \r\n");
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <I2S_Print_Errors+0x18>
 800115a:	4828      	ldr	r0, [pc, #160]	@ (80011fc <I2S_Print_Errors+0xb4>)
 800115c:	f7ff f8b6 	bl	80002cc <printConsole>
	if(config->Error.Channel_Length_Error) printConsole("Channel_Length_Error \r\n");
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <I2S_Print_Errors+0x28>
 800116a:	4825      	ldr	r0, [pc, #148]	@ (8001200 <I2S_Print_Errors+0xb8>)
 800116c:	f7ff f8ae 	bl	80002cc <printConsole>
	if(config->Error.Data_Len_Error) printConsole("Data_Len_Error \r\n");
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <I2S_Print_Errors+0x38>
 800117a:	4822      	ldr	r0, [pc, #136]	@ (8001204 <I2S_Print_Errors+0xbc>)
 800117c:	f7ff f8a6 	bl	80002cc <printConsole>
	if(config->Error.Ext_SD_Pin_Error) printConsole("Ext_SD_Pin_Error \r\n");
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7f1b      	ldrb	r3, [r3, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <I2S_Print_Errors+0x46>
 8001188:	481f      	ldr	r0, [pc, #124]	@ (8001208 <I2S_Print_Errors+0xc0>)
 800118a:	f7ff f89f 	bl	80002cc <printConsole>
	if(config->Error.MCK_PIN_Error) printConsole("MCK_PIN_Error \r\n");
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <I2S_Print_Errors+0x56>
 8001198:	481c      	ldr	r0, [pc, #112]	@ (800120c <I2S_Print_Errors+0xc4>)
 800119a:	f7ff f897 	bl	80002cc <printConsole>
	if(config->Error.Mode_Error) printConsole("Mode_Error \r\n");
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7edb      	ldrb	r3, [r3, #27]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <I2S_Print_Errors+0x64>
 80011a6:	481a      	ldr	r0, [pc, #104]	@ (8001210 <I2S_Print_Errors+0xc8>)
 80011a8:	f7ff f890 	bl	80002cc <printConsole>
	if(config->Error.Port_Error) printConsole("Port_Error \r\n");
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7e9b      	ldrb	r3, [r3, #26]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <I2S_Print_Errors+0x72>
 80011b4:	4817      	ldr	r0, [pc, #92]	@ (8001214 <I2S_Print_Errors+0xcc>)
 80011b6:	f7ff f889 	bl	80002cc <printConsole>
	if(config->Error.SCK_Pin_Error) printConsole("SCK_Pin_Error \r\n");
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7fdb      	ldrb	r3, [r3, #31]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <I2S_Print_Errors+0x80>
 80011c2:	4815      	ldr	r0, [pc, #84]	@ (8001218 <I2S_Print_Errors+0xd0>)
 80011c4:	f7ff f882 	bl	80002cc <printConsole>
	if(config->Error.SD_Pin_Error) printConsole("SD_Pin_Error \r\n");
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7f5b      	ldrb	r3, [r3, #29]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <I2S_Print_Errors+0x8e>
 80011d0:	4812      	ldr	r0, [pc, #72]	@ (800121c <I2S_Print_Errors+0xd4>)
 80011d2:	f7ff f87b 	bl	80002cc <printConsole>
	if(config->Error.Standard_Error) printConsole("Standard_Error \r\n");
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <I2S_Print_Errors+0x9e>
 80011e0:	480f      	ldr	r0, [pc, #60]	@ (8001220 <I2S_Print_Errors+0xd8>)
 80011e2:	f7ff f873 	bl	80002cc <printConsole>
	if(config->Error.WS_Pin_Error) printConsole("WS_Pin_Error \r\n");
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7f9b      	ldrb	r3, [r3, #30]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <I2S_Print_Errors+0xac>
 80011ee:	480d      	ldr	r0, [pc, #52]	@ (8001224 <I2S_Print_Errors+0xdc>)
 80011f0:	f7ff f86c 	bl	80002cc <printConsole>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	0800301c 	.word	0x0800301c
 8001200:	08003038 	.word	0x08003038
 8001204:	08003050 	.word	0x08003050
 8001208:	08003064 	.word	0x08003064
 800120c:	08003078 	.word	0x08003078
 8001210:	0800308c 	.word	0x0800308c
 8001214:	0800309c 	.word	0x0800309c
 8001218:	080030ac 	.word	0x080030ac
 800121c:	080030c0 	.word	0x080030c0
 8001220:	080030d0 	.word	0x080030d0
 8001224:	080030e4 	.word	0x080030e4

08001228 <I2S_Start>:
/********************************************************************************************************/
void I2S_Start(I2S_Config *config)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69da      	ldr	r2, [r3, #28]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800123e:	61da      	str	r2, [r3, #28]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <I2S_Stop>:
/********************************************************************************************************/
void I2S_Stop(I2S_Config *config)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	config -> Port -> I2SCFGR &= ~SPI_I2SCFGR_I2SE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	69da      	ldr	r2, [r3, #28]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001262:	61da      	str	r2, [r3, #28]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <I2S_Mode_Set>:

/********************************************************************************************************/
int8_t I2S_Mode_Set(I2S_Config *config)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
	if(config->Port == I2S_Port.I2S2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a97      	ldr	r2, [pc, #604]	@ (80014e0 <I2S_Mode_Set+0x270>)
 8001282:	4293      	cmp	r3, r2
 8001284:	f040 8212 	bne.w	80016ac <I2S_Mode_Set+0x43c>
	{
		if(config->Full_Duplex.Enable == ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7b5b      	ldrb	r3, [r3, #13]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 815d 	beq.w	800154c <I2S_Mode_Set+0x2dc>
		{
			if((config->Full_Duplex.mode == I2S_Mode.Master.Receive) || config->Full_Duplex.mode == I2S_Mode.Slave.Receive)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001298:	461a      	mov	r2, r3
 800129a:	2302      	movs	r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d007      	beq.n	80012b0 <I2S_Mode_Set+0x40>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2304      	movs	r3, #4
 80012aa:	429a      	cmp	r2, r3
 80012ac:	f040 808f 	bne.w	80013ce <I2S_Mode_Set+0x15e>
			{
				I2S2_DMA_Full_Duplex.Receiver.RX.channel = 0;
 80012b0:	4b8c      	ldr	r3, [pc, #560]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
				I2S2_DMA_Full_Duplex.Receiver.RX.stream = DMA1_Stream3;
 80012b6:	4b8b      	ldr	r3, [pc, #556]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012b8:	4a8b      	ldr	r2, [pc, #556]	@ (80014e8 <I2S_Mode_Set+0x278>)
 80012ba:	605a      	str	r2, [r3, #4]
				I2S2_DMA_Full_Duplex.Receiver.RX.circular_mode = DMA_Circular_Mode.Disable;
 80012bc:	2200      	movs	r2, #0
 80012be:	4b89      	ldr	r3, [pc, #548]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012c0:	621a      	str	r2, [r3, #32]
				I2S2_DMA_Full_Duplex.Receiver.RX.controller = DMA1;
 80012c2:	4b88      	ldr	r3, [pc, #544]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012c4:	4a89      	ldr	r2, [pc, #548]	@ (80014ec <I2S_Mode_Set+0x27c>)
 80012c6:	601a      	str	r2, [r3, #0]
				I2S2_DMA_Full_Duplex.Receiver.RX.flow_control = DMA_Flow_Control.DMA_Control;
 80012c8:	2200      	movs	r2, #0
 80012ca:	4b86      	ldr	r3, [pc, #536]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012cc:	60da      	str	r2, [r3, #12]
				I2S2_DMA_Full_Duplex.Receiver.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 80012ce:	2208      	movs	r2, #8
 80012d0:	2310      	movs	r3, #16
 80012d2:	4313      	orrs	r3, r2
 80012d4:	4a83      	ldr	r2, [pc, #524]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012d6:	6253      	str	r3, [r2, #36]	@ 0x24
				if(config->Data_Length == I2S_Data_Length._16_bit)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80012de:	2201      	movs	r2, #1
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d108      	bne.n	80012f6 <I2S_Mode_Set+0x86>
				{
					I2S2_DMA_Full_Duplex.Receiver.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 80012e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e8:	4b7e      	ldr	r3, [pc, #504]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012ea:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 80012ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012f0:	4b7c      	ldr	r3, [pc, #496]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80012f2:	619a      	str	r2, [r3, #24]
 80012f4:	e013      	b.n	800131e <I2S_Mode_Set+0xae>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4293      	cmp	r3, r2
 8001300:	d005      	beq.n	800130e <I2S_Mode_Set+0x9e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001308:	2203      	movs	r2, #3
 800130a:	4293      	cmp	r3, r2
 800130c:	d107      	bne.n	800131e <I2S_Mode_Set+0xae>
				{
					I2S2_DMA_Full_Duplex.Receiver.RX.memory_data_size = DMA_Memory_Data_Size.word;
 800130e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001312:	4b74      	ldr	r3, [pc, #464]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001314:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8001316:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800131a:	4b72      	ldr	r3, [pc, #456]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800131c:	619a      	str	r2, [r3, #24]
				}
				I2S2_DMA_Full_Duplex.Receiver.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 800131e:	2300      	movs	r3, #0
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b70      	ldr	r3, [pc, #448]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001324:	869a      	strh	r2, [r3, #52]	@ 0x34
				I2S2_DMA_Full_Duplex.Receiver.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b6d      	ldr	r3, [pc, #436]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800132e:	865a      	strh	r2, [r3, #50]	@ 0x32
				I2S2_DMA_Full_Duplex.Receiver.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001330:	2200      	movs	r2, #0
 8001332:	4b6c      	ldr	r3, [pc, #432]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001334:	611a      	str	r2, [r3, #16]

				DMA_Init(&I2S2_DMA_Full_Duplex.Receiver.RX);
 8001336:	486b      	ldr	r0, [pc, #428]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001338:	f7ff f850 	bl	80003dc <DMA_Init>

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

				I2S2_DMA_Full_Duplex.Receiver.TX.channel = 2;
 800133c:	4b69      	ldr	r3, [pc, #420]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800133e:	2202      	movs	r2, #2
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40
				I2S2_DMA_Full_Duplex.Receiver.TX.stream = DMA1_Stream4;
 8001342:	4b68      	ldr	r3, [pc, #416]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001344:	4a6a      	ldr	r2, [pc, #424]	@ (80014f0 <I2S_Mode_Set+0x280>)
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c
				I2S2_DMA_Full_Duplex.Receiver.TX.circular_mode = DMA_Circular_Mode.Disable;
 8001348:	2200      	movs	r2, #0
 800134a:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800134c:	659a      	str	r2, [r3, #88]	@ 0x58
				I2S2_DMA_Full_Duplex.Receiver.TX.controller = DMA1;
 800134e:	4b65      	ldr	r3, [pc, #404]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001350:	4a66      	ldr	r2, [pc, #408]	@ (80014ec <I2S_Mode_Set+0x27c>)
 8001352:	639a      	str	r2, [r3, #56]	@ 0x38
				I2S2_DMA_Full_Duplex.Receiver.TX.flow_control = DMA_Flow_Control.DMA_Control;
 8001354:	2200      	movs	r2, #0
 8001356:	4b63      	ldr	r3, [pc, #396]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001358:	645a      	str	r2, [r3, #68]	@ 0x44
				I2S2_DMA_Full_Duplex.Receiver.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 800135a:	2208      	movs	r2, #8
 800135c:	2310      	movs	r3, #16
 800135e:	4313      	orrs	r3, r2
 8001360:	4a60      	ldr	r2, [pc, #384]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001362:	65d3      	str	r3, [r2, #92]	@ 0x5c
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800136a:	2201      	movs	r2, #1
 800136c:	4293      	cmp	r3, r2
 800136e:	d108      	bne.n	8001382 <I2S_Mode_Set+0x112>
				{
					I2S2_DMA_Full_Duplex.Receiver.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8001370:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001374:	4b5b      	ldr	r3, [pc, #364]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001376:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8001378:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800137c:	4b59      	ldr	r3, [pc, #356]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800137e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001380:	e013      	b.n	80013aa <I2S_Mode_Set+0x13a>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001388:	2202      	movs	r2, #2
 800138a:	4293      	cmp	r3, r2
 800138c:	d005      	beq.n	800139a <I2S_Mode_Set+0x12a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001394:	2203      	movs	r2, #3
 8001396:	4293      	cmp	r3, r2
 8001398:	d107      	bne.n	80013aa <I2S_Mode_Set+0x13a>
				{
					I2S2_DMA_Full_Duplex.Receiver.TX.memory_data_size = DMA_Memory_Data_Size.word;
 800139a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139e:	4b51      	ldr	r3, [pc, #324]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013a0:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 80013a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013a6:	4b4f      	ldr	r3, [pc, #316]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013a8:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				I2S2_DMA_Full_Duplex.Receiver.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 80013aa:	2300      	movs	r3, #0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b4d      	ldr	r3, [pc, #308]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013b0:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
				I2S2_DMA_Full_Duplex.Receiver.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 80013b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4b4a      	ldr	r3, [pc, #296]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
				I2S2_DMA_Full_Duplex.Receiver.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 80013c0:	2240      	movs	r2, #64	@ 0x40
 80013c2:	4b48      	ldr	r3, [pc, #288]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013c4:	649a      	str	r2, [r3, #72]	@ 0x48
				DMA_Init(&I2S2_DMA_Full_Duplex.Receiver.TX);
 80013c6:	484b      	ldr	r0, [pc, #300]	@ (80014f4 <I2S_Mode_Set+0x284>)
 80013c8:	f7ff f808 	bl	80003dc <DMA_Init>
 80013cc:	e0be      	b.n	800154c <I2S_Mode_Set+0x2dc>
			}

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

			else if((config->Full_Duplex.mode == I2S_Mode.Master.Transmit) || config->Full_Duplex.mode == I2S_Mode.Slave.Transmit)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80013d4:	461a      	mov	r2, r3
 80013d6:	2301      	movs	r3, #1
 80013d8:	429a      	cmp	r2, r3
 80013da:	d007      	beq.n	80013ec <I2S_Mode_Set+0x17c>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80013e2:	461a      	mov	r2, r3
 80013e4:	2303      	movs	r3, #3
 80013e6:	429a      	cmp	r2, r3
 80013e8:	f040 80b0 	bne.w	800154c <I2S_Mode_Set+0x2dc>
			{
				I2S2_DMA_Full_Duplex.Transmitter.RX.channel = 0;
 80013ec:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	679a      	str	r2, [r3, #120]	@ 0x78
				I2S2_DMA_Full_Duplex.Transmitter.RX.stream = DMA1_Stream4;
 80013f2:	4b3c      	ldr	r3, [pc, #240]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013f4:	4a3e      	ldr	r2, [pc, #248]	@ (80014f0 <I2S_Mode_Set+0x280>)
 80013f6:	675a      	str	r2, [r3, #116]	@ 0x74
				I2S2_DMA_Full_Duplex.Transmitter.RX.circular_mode = DMA_Circular_Mode.Disable;
 80013f8:	2200      	movs	r2, #0
 80013fa:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80013fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
				I2S2_DMA_Full_Duplex.Transmitter.RX.controller = DMA1;
 8001400:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001402:	4a3a      	ldr	r2, [pc, #232]	@ (80014ec <I2S_Mode_Set+0x27c>)
 8001404:	671a      	str	r2, [r3, #112]	@ 0x70
				I2S2_DMA_Full_Duplex.Transmitter.RX.flow_control = DMA_Flow_Control.DMA_Control;
 8001406:	2200      	movs	r2, #0
 8001408:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800140a:	67da      	str	r2, [r3, #124]	@ 0x7c
				I2S2_DMA_Full_Duplex.Transmitter.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 800140c:	2208      	movs	r2, #8
 800140e:	2310      	movs	r3, #16
 8001410:	4313      	orrs	r3, r2
 8001412:	4a34      	ldr	r2, [pc, #208]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001414:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800141e:	2201      	movs	r2, #1
 8001420:	4293      	cmp	r3, r2
 8001422:	d10a      	bne.n	800143a <I2S_Mode_Set+0x1ca>
				{
					I2S2_DMA_Full_Duplex.Transmitter.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8001424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001428:	4b2e      	ldr	r3, [pc, #184]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800142a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
					I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 800142e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001432:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8001438:	e015      	b.n	8001466 <I2S_Mode_Set+0x1f6>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001440:	2202      	movs	r2, #2
 8001442:	4293      	cmp	r3, r2
 8001444:	d005      	beq.n	8001452 <I2S_Mode_Set+0x1e2>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800144c:	2203      	movs	r2, #3
 800144e:	4293      	cmp	r3, r2
 8001450:	d109      	bne.n	8001466 <I2S_Mode_Set+0x1f6>
				{
					I2S2_DMA_Full_Duplex.Transmitter.RX.memory_data_size = DMA_Memory_Data_Size.word;
 8001452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001458:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
					I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 800145c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001460:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
				}
				I2S2_DMA_Full_Duplex.Transmitter.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8001466:	2300      	movs	r3, #0
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800146c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
				I2S2_DMA_Full_Duplex.Transmitter.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001478:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
				I2S2_DMA_Full_Duplex.Transmitter.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 800147c:	2200      	movs	r2, #0
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

				DMA_Init(&I2S2_DMA_Full_Duplex.Transmitter.RX);
 8001484:	481c      	ldr	r0, [pc, #112]	@ (80014f8 <I2S_Mode_Set+0x288>)
 8001486:	f7fe ffa9 	bl	80003dc <DMA_Init>

/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/

				I2S2_DMA_Full_Duplex.Transmitter.TX.channel = 2;
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800148c:	2202      	movs	r2, #2
 800148e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
				I2S2_DMA_Full_Duplex.Transmitter.TX.stream = DMA1_Stream3;
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <I2S_Mode_Set+0x274>)
 8001494:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <I2S_Mode_Set+0x278>)
 8001496:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
				I2S2_DMA_Full_Duplex.Transmitter.TX.circular_mode = DMA_Circular_Mode.Disable;
 800149a:	2200      	movs	r2, #0
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <I2S_Mode_Set+0x274>)
 800149e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
				I2S2_DMA_Full_Duplex.Transmitter.TX.controller = DMA1;
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80014a4:	4a11      	ldr	r2, [pc, #68]	@ (80014ec <I2S_Mode_Set+0x27c>)
 80014a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				I2S2_DMA_Full_Duplex.Transmitter.TX.flow_control = DMA_Flow_Control.DMA_Control;
 80014aa:	2200      	movs	r2, #0
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80014ae:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				I2S2_DMA_Full_Duplex.Transmitter.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 80014b2:	2208      	movs	r2, #8
 80014b4:	2310      	movs	r3, #16
 80014b6:	4313      	orrs	r3, r2
 80014b8:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80014ba:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
				if(config->Data_Length == I2S_Data_Length._16_bit)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d118      	bne.n	80014fc <I2S_Mode_Set+0x28c>
				{
					I2S2_DMA_Full_Duplex.Transmitter.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 80014ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80014d0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 80014d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d8:	4b02      	ldr	r3, [pc, #8]	@ (80014e4 <I2S_Mode_Set+0x274>)
 80014da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 80014de:	e023      	b.n	8001528 <I2S_Mode_Set+0x2b8>
 80014e0:	40003800 	.word	0x40003800
 80014e4:	20000088 	.word	0x20000088
 80014e8:	40026058 	.word	0x40026058
 80014ec:	40026000 	.word	0x40026000
 80014f0:	40026070 	.word	0x40026070
 80014f4:	200000c0 	.word	0x200000c0
 80014f8:	200000f8 	.word	0x200000f8
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001502:	2202      	movs	r2, #2
 8001504:	4293      	cmp	r3, r2
 8001506:	d005      	beq.n	8001514 <I2S_Mode_Set+0x2a4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800150e:	2203      	movs	r2, #3
 8001510:	4293      	cmp	r3, r2
 8001512:	d109      	bne.n	8001528 <I2S_Mode_Set+0x2b8>
				{
					I2S2_DMA_Full_Duplex.Transmitter.TX.memory_data_size = DMA_Memory_Data_Size.word;
 8001514:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001518:	4b6b      	ldr	r3, [pc, #428]	@ (80016c8 <I2S_Mode_Set+0x458>)
 800151a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 800151e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001522:	4b69      	ldr	r3, [pc, #420]	@ (80016c8 <I2S_Mode_Set+0x458>)
 8001524:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
				}
				I2S2_DMA_Full_Duplex.Transmitter.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 8001528:	2300      	movs	r3, #0
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b66      	ldr	r3, [pc, #408]	@ (80016c8 <I2S_Mode_Set+0x458>)
 800152e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
				I2S2_DMA_Full_Duplex.Transmitter.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b63      	ldr	r3, [pc, #396]	@ (80016c8 <I2S_Mode_Set+0x458>)
 800153a:	f8a3 20da 	strh.w	r2, [r3, #218]	@ 0xda
				I2S2_DMA_Full_Duplex.Transmitter.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 800153e:	2240      	movs	r2, #64	@ 0x40
 8001540:	4b61      	ldr	r3, [pc, #388]	@ (80016c8 <I2S_Mode_Set+0x458>)
 8001542:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
				DMA_Init(&I2S2_DMA_Full_Duplex.Transmitter.TX);
 8001546:	4861      	ldr	r0, [pc, #388]	@ (80016cc <I2S_Mode_Set+0x45c>)
 8001548:	f7fe ff48 	bl	80003dc <DMA_Init>
			}



		}
		if(config->Half_Duplex.Enable == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7d1b      	ldrb	r3, [r3, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80ab 	beq.w	80016ac <I2S_Mode_Set+0x43c>
		{
			if((config->Half_Duplex.mode == I2S_Mode.Master.Receive) || config->Half_Duplex.mode == I2S_Mode.Slave.Receive)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800155c:	461a      	mov	r2, r3
 800155e:	2302      	movs	r3, #2
 8001560:	429a      	cmp	r2, r3
 8001562:	d006      	beq.n	8001572 <I2S_Mode_Set+0x302>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800156a:	461a      	mov	r2, r3
 800156c:	2304      	movs	r3, #4
 800156e:	429a      	cmp	r2, r3
 8001570:	d146      	bne.n	8001600 <I2S_Mode_Set+0x390>
			{
				I2S2_DMA_Half_Duplex.RX.channel = 0;
 8001572:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
				I2S2_DMA_Half_Duplex.RX.stream = DMA1_Stream3;
 8001578:	4b55      	ldr	r3, [pc, #340]	@ (80016d0 <I2S_Mode_Set+0x460>)
 800157a:	4a56      	ldr	r2, [pc, #344]	@ (80016d4 <I2S_Mode_Set+0x464>)
 800157c:	605a      	str	r2, [r3, #4]
				I2S2_DMA_Half_Duplex.RX.circular_mode = DMA_Circular_Mode.Disable;
 800157e:	2200      	movs	r2, #0
 8001580:	4b53      	ldr	r3, [pc, #332]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001582:	621a      	str	r2, [r3, #32]
				I2S2_DMA_Half_Duplex.RX.controller = DMA1;
 8001584:	4b52      	ldr	r3, [pc, #328]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001586:	4a54      	ldr	r2, [pc, #336]	@ (80016d8 <I2S_Mode_Set+0x468>)
 8001588:	601a      	str	r2, [r3, #0]
				I2S2_DMA_Half_Duplex.RX.flow_control = DMA_Flow_Control.DMA_Control;
 800158a:	2200      	movs	r2, #0
 800158c:	4b50      	ldr	r3, [pc, #320]	@ (80016d0 <I2S_Mode_Set+0x460>)
 800158e:	60da      	str	r2, [r3, #12]
				I2S2_DMA_Half_Duplex.RX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 8001590:	2208      	movs	r2, #8
 8001592:	2310      	movs	r3, #16
 8001594:	4313      	orrs	r3, r2
 8001596:	4a4e      	ldr	r2, [pc, #312]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001598:	6253      	str	r3, [r2, #36]	@ 0x24
				if(config->Data_Length == I2S_Data_Length._16_bit)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d108      	bne.n	80015b8 <I2S_Mode_Set+0x348>
				{
					I2S2_DMA_Half_Duplex.RX.memory_data_size = DMA_Memory_Data_Size.half_word;
 80015a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015aa:	4b49      	ldr	r3, [pc, #292]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015ac:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Half_Duplex.RX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 80015ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015b2:	4b47      	ldr	r3, [pc, #284]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	e013      	b.n	80015e0 <I2S_Mode_Set+0x370>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015be:	2202      	movs	r2, #2
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d005      	beq.n	80015d0 <I2S_Mode_Set+0x360>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015ca:	2203      	movs	r2, #3
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d107      	bne.n	80015e0 <I2S_Mode_Set+0x370>
				{
					I2S2_DMA_Half_Duplex.RX.memory_data_size = DMA_Memory_Data_Size.word;
 80015d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015d4:	4b3e      	ldr	r3, [pc, #248]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015d6:	61da      	str	r2, [r3, #28]
					I2S2_DMA_Half_Duplex.RX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 80015d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015dc:	4b3c      	ldr	r3, [pc, #240]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015de:	619a      	str	r2, [r3, #24]
				}
				I2S2_DMA_Half_Duplex.RX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 80015e0:	2300      	movs	r3, #0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b3a      	ldr	r3, [pc, #232]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015e6:	869a      	strh	r2, [r3, #52]	@ 0x34
				I2S2_DMA_Half_Duplex.RX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 80015e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015f0:	865a      	strh	r2, [r3, #50]	@ 0x32
				I2S2_DMA_Half_Duplex.RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80015f2:	2200      	movs	r2, #0
 80015f4:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015f6:	611a      	str	r2, [r3, #16]

				DMA_Init(&I2S2_DMA_Half_Duplex.RX);
 80015f8:	4835      	ldr	r0, [pc, #212]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80015fa:	f7fe feef 	bl	80003dc <DMA_Init>
 80015fe:	e055      	b.n	80016ac <I2S_Mode_Set+0x43c>
			}
			else if((config->Half_Duplex.mode == I2S_Mode.Master.Transmit) || config->Half_Duplex.mode == I2S_Mode.Slave.Transmit)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001606:	461a      	mov	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	429a      	cmp	r2, r3
 800160c:	d006      	beq.n	800161c <I2S_Mode_Set+0x3ac>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001614:	461a      	mov	r2, r3
 8001616:	2303      	movs	r3, #3
 8001618:	429a      	cmp	r2, r3
 800161a:	d147      	bne.n	80016ac <I2S_Mode_Set+0x43c>
			{
				I2S2_DMA_Half_Duplex.TX.channel = 0;
 800161c:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <I2S_Mode_Set+0x460>)
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40
				I2S2_DMA_Half_Duplex.TX.stream = DMA1_Stream4;
 8001622:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <I2S_Mode_Set+0x46c>)
 8001626:	63da      	str	r2, [r3, #60]	@ 0x3c
				I2S2_DMA_Half_Duplex.TX.circular_mode = DMA_Circular_Mode.Disable;
 8001628:	2200      	movs	r2, #0
 800162a:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <I2S_Mode_Set+0x460>)
 800162c:	659a      	str	r2, [r3, #88]	@ 0x58
				I2S2_DMA_Half_Duplex.TX.controller = DMA1;
 800162e:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001630:	4a29      	ldr	r2, [pc, #164]	@ (80016d8 <I2S_Mode_Set+0x468>)
 8001632:	639a      	str	r2, [r3, #56]	@ 0x38
				I2S2_DMA_Half_Duplex.TX.flow_control = DMA_Flow_Control.DMA_Control;
 8001634:	2200      	movs	r2, #0
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001638:	645a      	str	r2, [r3, #68]	@ 0x44
				I2S2_DMA_Half_Duplex.TX.interrupts = DMA_Interrupts.Half_Transfer_Complete | DMA_Interrupts.Transfer_Complete;
 800163a:	2208      	movs	r2, #8
 800163c:	2310      	movs	r3, #16
 800163e:	4313      	orrs	r3, r2
 8001640:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001642:	65d3      	str	r3, [r2, #92]	@ 0x5c
				if(config->Data_Length == I2S_Data_Length._16_bit)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800164a:	2201      	movs	r2, #1
 800164c:	4293      	cmp	r3, r2
 800164e:	d108      	bne.n	8001662 <I2S_Mode_Set+0x3f2>
				{
					I2S2_DMA_Half_Duplex.TX.memory_data_size = DMA_Memory_Data_Size.half_word;
 8001650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001656:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Half_Duplex.TX.peripheral_data_size = DMA_Peripheral_Data_Size.half_word;
 8001658:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800165c:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <I2S_Mode_Set+0x460>)
 800165e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001660:	e013      	b.n	800168a <I2S_Mode_Set+0x41a>
				}
				else if((config->Data_Length == I2S_Data_Length._24_bit) || (config->Data_Length == I2S_Data_Length._32_bit))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001668:	2202      	movs	r2, #2
 800166a:	4293      	cmp	r3, r2
 800166c:	d005      	beq.n	800167a <I2S_Mode_Set+0x40a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001674:	2203      	movs	r2, #3
 8001676:	4293      	cmp	r3, r2
 8001678:	d107      	bne.n	800168a <I2S_Mode_Set+0x41a>
				{
					I2S2_DMA_Half_Duplex.TX.memory_data_size = DMA_Memory_Data_Size.word;
 800167a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54
					I2S2_DMA_Half_Duplex.TX.peripheral_data_size = DMA_Peripheral_Data_Size.word;
 8001682:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001688:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				I2S2_DMA_Half_Duplex.TX.peripheral_pointer_increment = DMA_Peripheral_Pointer_Incremet.Disable;
 800168a:	2300      	movs	r3, #0
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <I2S_Mode_Set+0x460>)
 8001690:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
				I2S2_DMA_Half_Duplex.TX.memory_pointer_increment = DMA_Memory_Pointer_Incremet.Enable;
 8001694:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001698:	b29a      	uxth	r2, r3
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <I2S_Mode_Set+0x460>)
 800169c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
				I2S2_DMA_Half_Duplex.TX.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 80016a0:	2240      	movs	r2, #64	@ 0x40
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <I2S_Mode_Set+0x460>)
 80016a4:	649a      	str	r2, [r3, #72]	@ 0x48

				DMA_Init(&I2S2_DMA_Half_Duplex.TX);
 80016a6:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <I2S_Mode_Set+0x470>)
 80016a8:	f7fe fe98 	bl	80003dc <DMA_Init>
	}
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
/*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/
	if(config->Port == I2S_Port.I2S3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <I2S_Mode_Set+0x474>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d001      	beq.n	80016ba <I2S_Mode_Set+0x44a>
	{

	}
	else
	{
		retval = -1;
 80016b6:	23ff      	movs	r3, #255	@ 0xff
 80016b8:	73fb      	strb	r3, [r7, #15]
	}


	return retval;
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000088 	.word	0x20000088
 80016cc:	20000130 	.word	0x20000130
 80016d0:	20000168 	.word	0x20000168
 80016d4:	40026058 	.word	0x40026058
 80016d8:	40026000 	.word	0x40026000
 80016dc:	40026070 	.word	0x40026070
 80016e0:	200001a0 	.word	0x200001a0
 80016e4:	40003c00 	.word	0x40003c00

080016e8 <I2S_Read_Data>:


uint32_t I2S_Read_Data(I2S_Config *config)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	uint32_t retval = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
	if(config->Channel_Length == I2S_Channel_Length._16_bit)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80016fa:	2201      	movs	r2, #1
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d10c      	bne.n	800171a <I2S_Read_Data+0x32>
	{
		while(!(config -> Port -> SR & SPI_SR_CHSIDE)){}
 8001700:	bf00      	nop
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f8      	beq.n	8001702 <I2S_Read_Data+0x1a>
		retval =   (config -> Port -> DR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e016      	b.n	8001748 <I2S_Read_Data+0x60>
	}
	else if(config->Channel_Length == I2S_Channel_Length._32_bit)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001720:	2203      	movs	r2, #3
 8001722:	4293      	cmp	r3, r2
 8001724:	d110      	bne.n	8001748 <I2S_Read_Data+0x60>
	{
		while(!(config -> Port -> SR & SPI_SR_CHSIDE)){}
 8001726:	bf00      	nop
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f8      	beq.n	8001728 <I2S_Read_Data+0x40>
		retval =   ((config -> Port -> DR) << 16) | ((config -> Port -> DR));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
	}

	return retval;
 8001748:	68fb      	ldr	r3, [r7, #12]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <I2S_Select_Left_Channel>:

void I2S_Select_Left_Channel(I2S_Config *config)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->LR_Pin_Port, config->LR_Pin_Number);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f7fe fe9e 	bl	80004ac <GPIO_Pin_High>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ffc2 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001816:	2304      	movs	r3, #4
 8001818:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 800181a:	23a8      	movs	r3, #168	@ 0xa8
 800181c:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8001822:	2307      	movs	r3, #7
 8001824:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8001826:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <MCU_Clock_Setup+0x10c>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800182c:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <MCU_Clock_Setup+0x10c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3a      	ldr	r2, [pc, #232]	@ (800191c <MCU_Clock_Setup+0x10c>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001836:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001838:	bf00      	nop
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <MCU_Clock_Setup+0x10c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f9      	beq.n	800183a <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <MCU_Clock_Setup+0x10c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a34      	ldr	r2, [pc, #208]	@ (800191c <MCU_Clock_Setup+0x10c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001852:	4b33      	ldr	r3, [pc, #204]	@ (8001920 <MCU_Clock_Setup+0x110>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a32      	ldr	r2, [pc, #200]	@ (8001920 <MCU_Clock_Setup+0x110>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <MCU_Clock_Setup+0x114>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a30      	ldr	r2, [pc, #192]	@ (8001924 <MCU_Clock_Setup+0x114>)
 8001864:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001868:	f043 0305 	orr.w	r3, r3, #5
 800186c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <MCU_Clock_Setup+0x10c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	793a      	ldrb	r2, [r7, #4]
 8001874:	0611      	lsls	r1, r2, #24
 8001876:	797a      	ldrb	r2, [r7, #5]
 8001878:	0412      	lsls	r2, r2, #16
 800187a:	4311      	orrs	r1, r2
 800187c:	79ba      	ldrb	r2, [r7, #6]
 800187e:	0192      	lsls	r2, r2, #6
 8001880:	4311      	orrs	r1, r2
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	430a      	orrs	r2, r1
 8001886:	4611      	mov	r1, r2
 8001888:	4a24      	ldr	r2, [pc, #144]	@ (800191c <MCU_Clock_Setup+0x10c>)
 800188a:	430b      	orrs	r3, r1
 800188c:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <MCU_Clock_Setup+0x10c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a22      	ldr	r2, [pc, #136]	@ (800191c <MCU_Clock_Setup+0x10c>)
 8001894:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001898:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800189a:	4b20      	ldr	r3, [pc, #128]	@ (800191c <MCU_Clock_Setup+0x10c>)
 800189c:	4a1f      	ldr	r2, [pc, #124]	@ (800191c <MCU_Clock_Setup+0x10c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a1d      	ldr	r2, [pc, #116]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018a8:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80018ac:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4a1a      	ldr	r2, [pc, #104]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b8:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a17      	ldr	r2, [pc, #92]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c4:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80018c6:	bf00      	nop
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f9      	beq.n	80018c8 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a10      	ldr	r2, [pc, #64]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80018e0:	bf00      	nop
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MCU_Clock_Setup+0x10c>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d1f9      	bne.n	80018e2 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 80018ee:	f000 f8d9 	bl	8001aa4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <MCU_Clock_Setup+0x118>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <MCU_Clock_Setup+0x11c>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff63 	bl	80017cc <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <MCU_Clock_Setup+0x10c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	4a04      	ldr	r2, [pc, #16]	@ (800191c <MCU_Clock_Setup+0x10c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001910:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000
 8001924:	40023c00 	.word	0x40023c00
 8001928:	20000000 	.word	0x20000000
 800192c:	18618619 	.word	0x18618619

08001930 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <Delay_Config+0x2c>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <Delay_Config+0x2c>)
 800193c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001940:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <Delay_Config+0x2c>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <Delay_Config+0x2c>)
 800194a:	2205      	movs	r2, #5
 800194c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <main>:


I2S_Config INMP441_I2S;

int main(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8001966:	f7ff ff53 	bl	8001810 <MCU_Clock_Setup>
	Delay_Config();
 800196a:	f7ff ffe1 	bl	8001930 <Delay_Config>
	Console_Init(USART1, 9600);
 800196e:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8001972:	4823      	ldr	r0, [pc, #140]	@ (8001a00 <main+0xa0>)
 8001974:	f7fe fc84 	bl	8000280 <Console_Init>


	I2S_DeInit(&INMP441_I2S);
 8001978:	4822      	ldr	r0, [pc, #136]	@ (8001a04 <main+0xa4>)
 800197a:	f7ff f8b3 	bl	8000ae4 <I2S_DeInit>


	INMP441_I2S.Port = I2S_Port.I2S2;
 800197e:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <main+0xa8>)
 8001980:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <main+0xa4>)
 8001982:	601a      	str	r2, [r3, #0]
	INMP441_I2S.Audio_Frequency = I2S_Audio_Frequency._48000Hz;
 8001984:	2306      	movs	r3, #6
 8001986:	b25a      	sxtb	r2, r3
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <main+0xa4>)
 800198a:	731a      	strb	r2, [r3, #12]
	INMP441_I2S.Channel_Length = I2S_Channel_Length._16_bit;
 800198c:	2201      	movs	r2, #1
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <main+0xa4>)
 8001990:	72da      	strb	r2, [r3, #11]
	INMP441_I2S.Data_Length = I2S_Data_Length._16_bit;
 8001992:	2201      	movs	r2, #1
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <main+0xa4>)
 8001996:	729a      	strb	r2, [r3, #10]
	INMP441_I2S.LR_Pin_Port = GPIOB;
 8001998:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <main+0xa4>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <main+0xac>)
 800199c:	605a      	str	r2, [r3, #4]
	INMP441_I2S.LR_Pin_Number = 12;
 800199e:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <main+0xa4>)
 80019a0:	220c      	movs	r2, #12
 80019a2:	721a      	strb	r2, [r3, #8]
	INMP441_I2S.Standard = I2S_Standard.Standard_Philips;
 80019a4:	2201      	movs	r2, #1
 80019a6:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <main+0xa4>)
 80019a8:	725a      	strb	r2, [r3, #9]
	INMP441_I2S.Half_Duplex.Enable = true;
 80019aa:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <main+0xa4>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	751a      	strb	r2, [r3, #20]
	INMP441_I2S.Half_Duplex.mode = I2S_Mode.Master.Receive;
 80019b0:	2302      	movs	r3, #2
 80019b2:	b25a      	sxtb	r2, r3
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <main+0xa4>)
 80019b6:	755a      	strb	r2, [r3, #21]
	INMP441_I2S.Half_Duplex.WS_Pin = I2S_Pin.WS.I2S2.PB09;
 80019b8:	23d1      	movs	r3, #209	@ 0xd1
 80019ba:	b25a      	sxtb	r2, r3
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <main+0xa4>)
 80019be:	765a      	strb	r2, [r3, #25]
	INMP441_I2S.Half_Duplex.SD_Pin = I2S_Pin.SD.I2S2.PB15;
 80019c0:	23d5      	movs	r3, #213	@ 0xd5
 80019c2:	b25a      	sxtb	r2, r3
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <main+0xa4>)
 80019c6:	761a      	strb	r2, [r3, #24]
	INMP441_I2S.Half_Duplex.SCK_Pin = I2S_Pin.SCK.I2S2.PB13;
 80019c8:	23d5      	movs	r3, #213	@ 0xd5
 80019ca:	b25a      	sxtb	r2, r3
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <main+0xa4>)
 80019ce:	75da      	strb	r2, [r3, #23]

	if(I2S_Init(&INMP441_I2S)) I2S_Print_Errors(&INMP441_I2S);
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <main+0xa4>)
 80019d2:	f7ff f8eb 	bl	8000bac <I2S_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <main+0x82>
 80019dc:	4809      	ldr	r0, [pc, #36]	@ (8001a04 <main+0xa4>)
 80019de:	f7ff fbb3 	bl	8001148 <I2S_Print_Errors>



	I2S_Select_Left_Channel(&INMP441_I2S);
 80019e2:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <main+0xa4>)
 80019e4:	f7ff feb7 	bl	8001756 <I2S_Select_Left_Channel>
	uint32_t x = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]

	for(;;)
	{


		x = I2S_Read_Data(&INMP441_I2S);
 80019ec:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <main+0xa4>)
 80019ee:	f7ff fe7b 	bl	80016e8 <I2S_Read_Data>
 80019f2:	6078      	str	r0, [r7, #4]
		printConsole("%"PRId32"\r\n",x);
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <main+0xb0>)
 80019f8:	f7fe fc68 	bl	80002cc <printConsole>
		x = I2S_Read_Data(&INMP441_I2S);
 80019fc:	bf00      	nop
 80019fe:	e7f5      	b.n	80019ec <main+0x8c>
 8001a00:	40011000 	.word	0x40011000
 8001a04:	200001d8 	.word	0x200001d8
 8001a08:	40003800 	.word	0x40003800
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	080030f4 	.word	0x080030f4

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f000 fe66 	bl	8002714 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20020000 	.word	0x20020000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	20000200 	.word	0x20000200
 8001a7c:	20000350 	.word	0x20000350

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	2302      	movs	r3, #2
 8001abc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001abe:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <SystemCoreClockUpdate+0xec>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d011      	beq.n	8001af2 <SystemCoreClockUpdate+0x4e>
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d844      	bhi.n	8001b5e <SystemCoreClockUpdate+0xba>
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <SystemCoreClockUpdate+0x3e>
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d004      	beq.n	8001aea <SystemCoreClockUpdate+0x46>
 8001ae0:	e03d      	b.n	8001b5e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <SystemCoreClockUpdate+0xf0>)
 8001ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b98 <SystemCoreClockUpdate+0xf4>)
 8001ae6:	601a      	str	r2, [r3, #0]
      break;
 8001ae8:	e03d      	b.n	8001b66 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <SystemCoreClockUpdate+0xf0>)
 8001aec:	4a2b      	ldr	r2, [pc, #172]	@ (8001b9c <SystemCoreClockUpdate+0xf8>)
 8001aee:	601a      	str	r2, [r3, #0]
      break;
 8001af0:	e039      	b.n	8001b66 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <SystemCoreClockUpdate+0xec>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	0d9b      	lsrs	r3, r3, #22
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <SystemCoreClockUpdate+0xec>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b06:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00c      	beq.n	8001b28 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b0e:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <SystemCoreClockUpdate+0xf8>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4a1e      	ldr	r2, [pc, #120]	@ (8001b90 <SystemCoreClockUpdate+0xec>)
 8001b18:	6852      	ldr	r2, [r2, #4]
 8001b1a:	0992      	lsrs	r2, r2, #6
 8001b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e00b      	b.n	8001b40 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b28:	4a1b      	ldr	r2, [pc, #108]	@ (8001b98 <SystemCoreClockUpdate+0xf4>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <SystemCoreClockUpdate+0xec>)
 8001b32:	6852      	ldr	r2, [r2, #4]
 8001b34:	0992      	lsrs	r2, r2, #6
 8001b36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <SystemCoreClockUpdate+0xec>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	4a0e      	ldr	r2, [pc, #56]	@ (8001b94 <SystemCoreClockUpdate+0xf0>)
 8001b5a:	6013      	str	r3, [r2, #0]
      break;
 8001b5c:	e003      	b.n	8001b66 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <SystemCoreClockUpdate+0xf0>)
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <SystemCoreClockUpdate+0xf4>)
 8001b62:	601a      	str	r2, [r3, #0]
      break;
 8001b64:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <SystemCoreClockUpdate+0xec>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba0 <SystemCoreClockUpdate+0xfc>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <SystemCoreClockUpdate+0xf0>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <SystemCoreClockUpdate+0xf0>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40023800 	.word	0x40023800
 8001b94:	20000000 	.word	0x20000000
 8001b98:	00f42400 	.word	0x00f42400
 8001b9c:	007a1200 	.word	0x007a1200
 8001ba0:	080030fc 	.word	0x080030fc

08001ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba4:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba8:	f7ff ff6a 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <LoopForever+0xe>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf0 <LoopForever+0x16>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bd2:	f000 fda5 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff fec3 	bl	8001960 <main>

08001bda <LoopForever>:

LoopForever:
  b LoopForever
 8001bda:	e7fe      	b.n	8001bda <LoopForever>
  ldr   r0, =_estack
 8001bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001be8:	08003150 	.word	0x08003150
  ldr r2, =_sbss
 8001bec:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001bf0:	2000034c 	.word	0x2000034c

08001bf4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>

08001bf6 <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 8001bfe:	2200      	movs	r2, #0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8001c04:	2200      	movs	r2, #0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c16:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 8001c18:	2203      	movs	r2, #3
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8001c24:	2300      	movs	r3, #0
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	749a      	strb	r2, [r3, #18]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a47      	ldr	r2, [pc, #284]	@ (8001d64 <USART_Clock_Enable+0x12c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d112      	bne.n	8001c70 <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	791b      	ldrb	r3, [r3, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <USART_Clock_Enable+0x2a>
 8001c54:	4b44      	ldr	r3, [pc, #272]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c58:	4a43      	ldr	r2, [pc, #268]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6653      	str	r3, [r2, #100]	@ 0x64
 8001c60:	e079      	b.n	8001d56 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8001c62:	4b41      	ldr	r3, [pc, #260]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a40      	ldr	r2, [pc, #256]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	e072      	b.n	8001d56 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a3d      	ldr	r2, [pc, #244]	@ (8001d6c <USART_Clock_Enable+0x134>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d112      	bne.n	8001ca0 <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	791b      	ldrb	r3, [r3, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d106      	bne.n	8001c92 <USART_Clock_Enable+0x5a>
 8001c84:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c88:	4a37      	ldr	r2, [pc, #220]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c90:	e061      	b.n	8001d56 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8001c92:	4b35      	ldr	r3, [pc, #212]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	4a34      	ldr	r2, [pc, #208]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9e:	e05a      	b.n	8001d56 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a32      	ldr	r2, [pc, #200]	@ (8001d70 <USART_Clock_Enable+0x138>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d112      	bne.n	8001cd0 <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d106      	bne.n	8001cc2 <USART_Clock_Enable+0x8a>
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001cba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cc0:	e049      	b.n	8001d56 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8001cc2:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	4a28      	ldr	r2, [pc, #160]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cce:	e042      	b.n	8001d56 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	@ (8001d74 <USART_Clock_Enable+0x13c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10e      	bne.n	8001cf8 <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	791b      	ldrb	r3, [r3, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d102      	bne.n	8001cea <USART_Clock_Enable+0xb2>
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	e036      	b.n	8001d58 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001cf0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	e02e      	b.n	8001d56 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <USART_Clock_Enable+0x140>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10e      	bne.n	8001d20 <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	791b      	ldrb	r3, [r3, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <USART_Clock_Enable+0xda>
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	e022      	b.n	8001d58 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001d18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	e01a      	b.n	8001d56 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <USART_Clock_Enable+0x144>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d112      	bne.n	8001d50 <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	791b      	ldrb	r3, [r3, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d106      	bne.n	8001d42 <USART_Clock_Enable+0x10a>
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d38:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001d3a:	f043 0320 	orr.w	r3, r3, #32
 8001d3e:	6653      	str	r3, [r2, #100]	@ 0x64
 8001d40:	e009      	b.n	8001d56 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <USART_Clock_Enable+0x130>)
 8001d48:	f043 0320 	orr.w	r3, r3, #32
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	e002      	b.n	8001d56 <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	e000      	b.n	8001d58 <USART_Clock_Enable+0x120>
	}
	return 1;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	40004800 	.word	0x40004800
 8001d74:	40004c00 	.word	0x40004c00
 8001d78:	40005000 	.word	0x40005000
 8001d7c:	40011400 	.word	0x40011400

08001d80 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4aa0      	ldr	r2, [pc, #640]	@ (8002010 <PIN_Setup+0x290>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	f040 810d 	bne.w	8001fae <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7b1b      	ldrb	r3, [r3, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00f      	beq.n	8001dbe <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7b1b      	ldrb	r3, [r3, #12]
 8001da2:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00a      	beq.n	8001dbe <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7b1b      	ldrb	r3, [r3, #12]
 8001dac:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d005      	beq.n	8001dbe <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7b1b      	ldrb	r3, [r3, #12]
 8001db6:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8001db8:	4293      	cmp	r3, r2
 8001dba:	f040 80be 	bne.w	8001f3a <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7b5b      	ldrb	r3, [r3, #13]
 8001dc2:	2209      	movs	r2, #9
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d10f      	bne.n	8001de8 <PIN_Setup+0x68>
 8001dc8:	2009      	movs	r0, #9
 8001dca:	2402      	movs	r4, #2
 8001dcc:	2500      	movs	r5, #0
 8001dce:	2302      	movs	r3, #2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2107      	movs	r1, #7
 8001dd4:	9102      	str	r1, [sp, #8]
 8001dd6:	9201      	str	r2, [sp, #4]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	462b      	mov	r3, r5
 8001ddc:	4622      	mov	r2, r4
 8001dde:	4601      	mov	r1, r0
 8001de0:	488c      	ldr	r0, [pc, #560]	@ (8002014 <PIN_Setup+0x294>)
 8001de2:	f7fe fbd3 	bl	800058c <GPIO_Pin_Init>
 8001de6:	e013      	b.n	8001e10 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7b5b      	ldrb	r3, [r3, #13]
 8001dec:	2206      	movs	r2, #6
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10e      	bne.n	8001e10 <PIN_Setup+0x90>
 8001df2:	2006      	movs	r0, #6
 8001df4:	2402      	movs	r4, #2
 8001df6:	2500      	movs	r5, #0
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2107      	movs	r1, #7
 8001dfe:	9102      	str	r1, [sp, #8]
 8001e00:	9201      	str	r2, [sp, #4]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	462b      	mov	r3, r5
 8001e06:	4622      	mov	r2, r4
 8001e08:	4601      	mov	r1, r0
 8001e0a:	4883      	ldr	r0, [pc, #524]	@ (8002018 <PIN_Setup+0x298>)
 8001e0c:	f7fe fbbe 	bl	800058c <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7b9b      	ldrb	r3, [r3, #14]
 8001e14:	220a      	movs	r2, #10
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10f      	bne.n	8001e3a <PIN_Setup+0xba>
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	2402      	movs	r4, #2
 8001e1e:	2500      	movs	r5, #0
 8001e20:	2302      	movs	r3, #2
 8001e22:	2200      	movs	r2, #0
 8001e24:	2107      	movs	r1, #7
 8001e26:	9102      	str	r1, [sp, #8]
 8001e28:	9201      	str	r2, [sp, #4]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	4622      	mov	r2, r4
 8001e30:	4601      	mov	r1, r0
 8001e32:	4878      	ldr	r0, [pc, #480]	@ (8002014 <PIN_Setup+0x294>)
 8001e34:	f7fe fbaa 	bl	800058c <GPIO_Pin_Init>
 8001e38:	e013      	b.n	8001e62 <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7b9b      	ldrb	r3, [r3, #14]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d10e      	bne.n	8001e62 <PIN_Setup+0xe2>
 8001e44:	2007      	movs	r0, #7
 8001e46:	2402      	movs	r4, #2
 8001e48:	2500      	movs	r5, #0
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2107      	movs	r1, #7
 8001e50:	9102      	str	r1, [sp, #8]
 8001e52:	9201      	str	r2, [sp, #4]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	462b      	mov	r3, r5
 8001e58:	4622      	mov	r2, r4
 8001e5a:	4601      	mov	r1, r0
 8001e5c:	486e      	ldr	r0, [pc, #440]	@ (8002018 <PIN_Setup+0x298>)
 8001e5e:	f7fe fb95 	bl	800058c <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7b1b      	ldrb	r3, [r3, #12]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d113      	bne.n	8001e94 <PIN_Setup+0x114>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7bdb      	ldrb	r3, [r3, #15]
 8001e70:	2208      	movs	r2, #8
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10e      	bne.n	8001e94 <PIN_Setup+0x114>
 8001e76:	2008      	movs	r0, #8
 8001e78:	2402      	movs	r4, #2
 8001e7a:	2500      	movs	r5, #0
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2107      	movs	r1, #7
 8001e82:	9102      	str	r1, [sp, #8]
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	462b      	mov	r3, r5
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	4861      	ldr	r0, [pc, #388]	@ (8002014 <PIN_Setup+0x294>)
 8001e90:	f7fe fb7c 	bl	800058c <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7cdb      	ldrb	r3, [r3, #19]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f000 83bb 	beq.w	8002616 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7cdb      	ldrb	r3, [r3, #19]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10e      	bne.n	8001ec8 <PIN_Setup+0x148>
 8001eaa:	200b      	movs	r0, #11
 8001eac:	2402      	movs	r4, #2
 8001eae:	2500      	movs	r5, #0
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2107      	movs	r1, #7
 8001eb6:	9102      	str	r1, [sp, #8]
 8001eb8:	9201      	str	r2, [sp, #4]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	4854      	ldr	r0, [pc, #336]	@ (8002014 <PIN_Setup+0x294>)
 8001ec4:	f7fe fb62 	bl	800058c <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7cdb      	ldrb	r3, [r3, #19]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10e      	bne.n	8001ef0 <PIN_Setup+0x170>
 8001ed2:	200c      	movs	r0, #12
 8001ed4:	2402      	movs	r4, #2
 8001ed6:	2500      	movs	r5, #0
 8001ed8:	2302      	movs	r3, #2
 8001eda:	2200      	movs	r2, #0
 8001edc:	2107      	movs	r1, #7
 8001ede:	9102      	str	r1, [sp, #8]
 8001ee0:	9201      	str	r2, [sp, #4]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	462b      	mov	r3, r5
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	4601      	mov	r1, r0
 8001eea:	484a      	ldr	r0, [pc, #296]	@ (8002014 <PIN_Setup+0x294>)
 8001eec:	f7fe fb4e 	bl	800058c <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7cdb      	ldrb	r3, [r3, #19]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	f040 838d 	bne.w	8002616 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001efc:	200b      	movs	r0, #11
 8001efe:	2402      	movs	r4, #2
 8001f00:	2500      	movs	r5, #0
 8001f02:	2302      	movs	r3, #2
 8001f04:	2200      	movs	r2, #0
 8001f06:	2107      	movs	r1, #7
 8001f08:	9102      	str	r1, [sp, #8]
 8001f0a:	9201      	str	r2, [sp, #4]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	462b      	mov	r3, r5
 8001f10:	4622      	mov	r2, r4
 8001f12:	4601      	mov	r1, r0
 8001f14:	483f      	ldr	r0, [pc, #252]	@ (8002014 <PIN_Setup+0x294>)
 8001f16:	f7fe fb39 	bl	800058c <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001f1a:	200c      	movs	r0, #12
 8001f1c:	2402      	movs	r4, #2
 8001f1e:	2500      	movs	r5, #0
 8001f20:	2302      	movs	r3, #2
 8001f22:	2200      	movs	r2, #0
 8001f24:	2107      	movs	r1, #7
 8001f26:	9102      	str	r1, [sp, #8]
 8001f28:	9201      	str	r2, [sp, #4]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	462b      	mov	r3, r5
 8001f2e:	4622      	mov	r2, r4
 8001f30:	4601      	mov	r1, r0
 8001f32:	4838      	ldr	r0, [pc, #224]	@ (8002014 <PIN_Setup+0x294>)
 8001f34:	f7fe fb2a 	bl	800058c <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8001f38:	e36d      	b.n	8002616 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b1b      	ldrb	r3, [r3, #12]
 8001f3e:	2206      	movs	r2, #6
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00a      	beq.n	8001f5a <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7b1b      	ldrb	r3, [r3, #12]
 8001f48:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d005      	beq.n	8001f5a <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7b1b      	ldrb	r3, [r3, #12]
 8001f52:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 8363 	bne.w	8002620 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7b5b      	ldrb	r3, [r3, #13]
 8001f5e:	2209      	movs	r2, #9
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10e      	bne.n	8001f82 <PIN_Setup+0x202>
 8001f64:	2009      	movs	r0, #9
 8001f66:	2402      	movs	r4, #2
 8001f68:	2500      	movs	r5, #0
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2107      	movs	r1, #7
 8001f70:	9102      	str	r1, [sp, #8]
 8001f72:	9201      	str	r2, [sp, #4]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	462b      	mov	r3, r5
 8001f78:	4622      	mov	r2, r4
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4825      	ldr	r0, [pc, #148]	@ (8002014 <PIN_Setup+0x294>)
 8001f7e:	f7fe fb05 	bl	800058c <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7b1b      	ldrb	r3, [r3, #12]
 8001f86:	2207      	movs	r2, #7
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	f040 8349 	bne.w	8002620 <PIN_Setup+0x8a0>
 8001f8e:	2008      	movs	r0, #8
 8001f90:	2402      	movs	r4, #2
 8001f92:	2500      	movs	r5, #0
 8001f94:	2302      	movs	r3, #2
 8001f96:	2200      	movs	r2, #0
 8001f98:	2107      	movs	r1, #7
 8001f9a:	9102      	str	r1, [sp, #8]
 8001f9c:	9201      	str	r2, [sp, #4]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	481b      	ldr	r0, [pc, #108]	@ (8002014 <PIN_Setup+0x294>)
 8001fa8:	f7fe faf0 	bl	800058c <GPIO_Pin_Init>
//
//		}
//	}


}
 8001fac:	e338      	b.n	8002620 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800201c <PIN_Setup+0x29c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	f040 817b 	bne.w	80022b0 <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7b1b      	ldrb	r3, [r3, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00f      	beq.n	8001fe4 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7b1b      	ldrb	r3, [r3, #12]
 8001fc8:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00a      	beq.n	8001fe4 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7b1b      	ldrb	r3, [r3, #12]
 8001fd2:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d005      	beq.n	8001fe4 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7b1b      	ldrb	r3, [r3, #12]
 8001fdc:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	f040 80f8 	bne.w	80021d4 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7b5b      	ldrb	r3, [r3, #13]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d118      	bne.n	8002020 <PIN_Setup+0x2a0>
 8001fee:	2002      	movs	r0, #2
 8001ff0:	2402      	movs	r4, #2
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2107      	movs	r1, #7
 8001ffa:	9102      	str	r1, [sp, #8]
 8001ffc:	9201      	str	r2, [sp, #4]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	462b      	mov	r3, r5
 8002002:	4622      	mov	r2, r4
 8002004:	4601      	mov	r1, r0
 8002006:	4803      	ldr	r0, [pc, #12]	@ (8002014 <PIN_Setup+0x294>)
 8002008:	f7fe fac0 	bl	800058c <GPIO_Pin_Init>
 800200c:	e01c      	b.n	8002048 <PIN_Setup+0x2c8>
 800200e:	bf00      	nop
 8002010:	40011000 	.word	0x40011000
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7b5b      	ldrb	r3, [r3, #13]
 8002024:	2205      	movs	r2, #5
 8002026:	4293      	cmp	r3, r2
 8002028:	d10e      	bne.n	8002048 <PIN_Setup+0x2c8>
 800202a:	2005      	movs	r0, #5
 800202c:	2402      	movs	r4, #2
 800202e:	2500      	movs	r5, #0
 8002030:	2302      	movs	r3, #2
 8002032:	2200      	movs	r2, #0
 8002034:	2107      	movs	r1, #7
 8002036:	9102      	str	r1, [sp, #8]
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	462b      	mov	r3, r5
 800203e:	4622      	mov	r2, r4
 8002040:	4601      	mov	r1, r0
 8002042:	4899      	ldr	r0, [pc, #612]	@ (80022a8 <PIN_Setup+0x528>)
 8002044:	f7fe faa2 	bl	800058c <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7b9b      	ldrb	r3, [r3, #14]
 800204c:	2203      	movs	r2, #3
 800204e:	4293      	cmp	r3, r2
 8002050:	d10f      	bne.n	8002072 <PIN_Setup+0x2f2>
 8002052:	2003      	movs	r0, #3
 8002054:	2402      	movs	r4, #2
 8002056:	2500      	movs	r5, #0
 8002058:	2302      	movs	r3, #2
 800205a:	2200      	movs	r2, #0
 800205c:	2107      	movs	r1, #7
 800205e:	9102      	str	r1, [sp, #8]
 8002060:	9201      	str	r2, [sp, #4]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	462b      	mov	r3, r5
 8002066:	4622      	mov	r2, r4
 8002068:	4601      	mov	r1, r0
 800206a:	4890      	ldr	r0, [pc, #576]	@ (80022ac <PIN_Setup+0x52c>)
 800206c:	f7fe fa8e 	bl	800058c <GPIO_Pin_Init>
 8002070:	e013      	b.n	800209a <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7b9b      	ldrb	r3, [r3, #14]
 8002076:	2206      	movs	r2, #6
 8002078:	4293      	cmp	r3, r2
 800207a:	d10e      	bne.n	800209a <PIN_Setup+0x31a>
 800207c:	2006      	movs	r0, #6
 800207e:	2402      	movs	r4, #2
 8002080:	2500      	movs	r5, #0
 8002082:	2302      	movs	r3, #2
 8002084:	2200      	movs	r2, #0
 8002086:	2107      	movs	r1, #7
 8002088:	9102      	str	r1, [sp, #8]
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	462b      	mov	r3, r5
 8002090:	4622      	mov	r2, r4
 8002092:	4601      	mov	r1, r0
 8002094:	4884      	ldr	r0, [pc, #528]	@ (80022a8 <PIN_Setup+0x528>)
 8002096:	f7fe fa79 	bl	800058c <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7b1b      	ldrb	r3, [r3, #12]
 800209e:	2202      	movs	r2, #2
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d128      	bne.n	80020f6 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7bdb      	ldrb	r3, [r3, #15]
 80020a8:	2204      	movs	r2, #4
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10f      	bne.n	80020ce <PIN_Setup+0x34e>
 80020ae:	2004      	movs	r0, #4
 80020b0:	2402      	movs	r4, #2
 80020b2:	2500      	movs	r5, #0
 80020b4:	2302      	movs	r3, #2
 80020b6:	2200      	movs	r2, #0
 80020b8:	2107      	movs	r1, #7
 80020ba:	9102      	str	r1, [sp, #8]
 80020bc:	9201      	str	r2, [sp, #4]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	462b      	mov	r3, r5
 80020c2:	4622      	mov	r2, r4
 80020c4:	4601      	mov	r1, r0
 80020c6:	4879      	ldr	r0, [pc, #484]	@ (80022ac <PIN_Setup+0x52c>)
 80020c8:	f7fe fa60 	bl	800058c <GPIO_Pin_Init>
 80020cc:	e013      	b.n	80020f6 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7bdb      	ldrb	r3, [r3, #15]
 80020d2:	2207      	movs	r2, #7
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d10e      	bne.n	80020f6 <PIN_Setup+0x376>
 80020d8:	2007      	movs	r0, #7
 80020da:	2402      	movs	r4, #2
 80020dc:	2500      	movs	r5, #0
 80020de:	2302      	movs	r3, #2
 80020e0:	2200      	movs	r2, #0
 80020e2:	2107      	movs	r1, #7
 80020e4:	9102      	str	r1, [sp, #8]
 80020e6:	9201      	str	r2, [sp, #4]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	462b      	mov	r3, r5
 80020ec:	4622      	mov	r2, r4
 80020ee:	4601      	mov	r1, r0
 80020f0:	486e      	ldr	r0, [pc, #440]	@ (80022ac <PIN_Setup+0x52c>)
 80020f2:	f7fe fa4b 	bl	800058c <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7cdb      	ldrb	r3, [r3, #19]
 80020fa:	2200      	movs	r2, #0
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d105      	bne.n	800210c <PIN_Setup+0x38c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7cdb      	ldrb	r3, [r3, #19]
 8002104:	2203      	movs	r2, #3
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8287 	bne.w	800261a <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7cdb      	ldrb	r3, [r3, #19]
 8002110:	2201      	movs	r2, #1
 8002112:	4293      	cmp	r3, r2
 8002114:	d128      	bne.n	8002168 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7bdb      	ldrb	r3, [r3, #15]
 800211a:	2200      	movs	r2, #0
 800211c:	4293      	cmp	r3, r2
 800211e:	d10f      	bne.n	8002140 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002120:	2000      	movs	r0, #0
 8002122:	2402      	movs	r4, #2
 8002124:	2500      	movs	r5, #0
 8002126:	2302      	movs	r3, #2
 8002128:	2200      	movs	r2, #0
 800212a:	2107      	movs	r1, #7
 800212c:	9102      	str	r1, [sp, #8]
 800212e:	9201      	str	r2, [sp, #4]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	462b      	mov	r3, r5
 8002134:	4622      	mov	r2, r4
 8002136:	4601      	mov	r1, r0
 8002138:	485c      	ldr	r0, [pc, #368]	@ (80022ac <PIN_Setup+0x52c>)
 800213a:	f7fe fa27 	bl	800058c <GPIO_Pin_Init>
 800213e:	e013      	b.n	8002168 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7bdb      	ldrb	r3, [r3, #15]
 8002144:	2203      	movs	r2, #3
 8002146:	4293      	cmp	r3, r2
 8002148:	d10e      	bne.n	8002168 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800214a:	2003      	movs	r0, #3
 800214c:	2402      	movs	r4, #2
 800214e:	2500      	movs	r5, #0
 8002150:	2302      	movs	r3, #2
 8002152:	2200      	movs	r2, #0
 8002154:	2107      	movs	r1, #7
 8002156:	9102      	str	r1, [sp, #8]
 8002158:	9201      	str	r2, [sp, #4]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	462b      	mov	r3, r5
 800215e:	4622      	mov	r2, r4
 8002160:	4601      	mov	r1, r0
 8002162:	4851      	ldr	r0, [pc, #324]	@ (80022a8 <PIN_Setup+0x528>)
 8002164:	f7fe fa12 	bl	800058c <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7cdb      	ldrb	r3, [r3, #19]
 800216c:	2202      	movs	r2, #2
 800216e:	4293      	cmp	r3, r2
 8002170:	d005      	beq.n	800217e <PIN_Setup+0x3fe>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7cdb      	ldrb	r3, [r3, #19]
 8002176:	2203      	movs	r2, #3
 8002178:	4293      	cmp	r3, r2
 800217a:	f040 824e 	bne.w	800261a <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7bdb      	ldrb	r3, [r3, #15]
 8002182:	2201      	movs	r2, #1
 8002184:	4293      	cmp	r3, r2
 8002186:	d10f      	bne.n	80021a8 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002188:	2001      	movs	r0, #1
 800218a:	2402      	movs	r4, #2
 800218c:	2500      	movs	r5, #0
 800218e:	2302      	movs	r3, #2
 8002190:	2200      	movs	r2, #0
 8002192:	2107      	movs	r1, #7
 8002194:	9102      	str	r1, [sp, #8]
 8002196:	9201      	str	r2, [sp, #4]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	462b      	mov	r3, r5
 800219c:	4622      	mov	r2, r4
 800219e:	4601      	mov	r1, r0
 80021a0:	4842      	ldr	r0, [pc, #264]	@ (80022ac <PIN_Setup+0x52c>)
 80021a2:	f7fe f9f3 	bl	800058c <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80021a6:	e238      	b.n	800261a <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7bdb      	ldrb	r3, [r3, #15]
 80021ac:	2204      	movs	r2, #4
 80021ae:	4293      	cmp	r3, r2
 80021b0:	f040 8233 	bne.w	800261a <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80021b4:	2004      	movs	r0, #4
 80021b6:	2402      	movs	r4, #2
 80021b8:	2500      	movs	r5, #0
 80021ba:	2302      	movs	r3, #2
 80021bc:	2200      	movs	r2, #0
 80021be:	2107      	movs	r1, #7
 80021c0:	9102      	str	r1, [sp, #8]
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	462b      	mov	r3, r5
 80021c8:	4622      	mov	r2, r4
 80021ca:	4601      	mov	r1, r0
 80021cc:	4836      	ldr	r0, [pc, #216]	@ (80022a8 <PIN_Setup+0x528>)
 80021ce:	f7fe f9dd 	bl	800058c <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80021d2:	e222      	b.n	800261a <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7b1b      	ldrb	r3, [r3, #12]
 80021d8:	2206      	movs	r2, #6
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00a      	beq.n	80021f4 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7b1b      	ldrb	r3, [r3, #12]
 80021e2:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d005      	beq.n	80021f4 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7b1b      	ldrb	r3, [r3, #12]
 80021ec:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80021ee:	4293      	cmp	r3, r2
 80021f0:	f040 8216 	bne.w	8002620 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7b5b      	ldrb	r3, [r3, #13]
 80021f8:	2202      	movs	r2, #2
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10f      	bne.n	800221e <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80021fe:	2002      	movs	r0, #2
 8002200:	2402      	movs	r4, #2
 8002202:	2500      	movs	r5, #0
 8002204:	2302      	movs	r3, #2
 8002206:	2200      	movs	r2, #0
 8002208:	2107      	movs	r1, #7
 800220a:	9102      	str	r1, [sp, #8]
 800220c:	9201      	str	r2, [sp, #4]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	462b      	mov	r3, r5
 8002212:	4622      	mov	r2, r4
 8002214:	4601      	mov	r1, r0
 8002216:	4825      	ldr	r0, [pc, #148]	@ (80022ac <PIN_Setup+0x52c>)
 8002218:	f7fe f9b8 	bl	800058c <GPIO_Pin_Init>
 800221c:	e013      	b.n	8002246 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7b5b      	ldrb	r3, [r3, #13]
 8002222:	2205      	movs	r2, #5
 8002224:	4293      	cmp	r3, r2
 8002226:	d10e      	bne.n	8002246 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002228:	2005      	movs	r0, #5
 800222a:	2402      	movs	r4, #2
 800222c:	2500      	movs	r5, #0
 800222e:	2302      	movs	r3, #2
 8002230:	2200      	movs	r2, #0
 8002232:	2107      	movs	r1, #7
 8002234:	9102      	str	r1, [sp, #8]
 8002236:	9201      	str	r2, [sp, #4]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	462b      	mov	r3, r5
 800223c:	4622      	mov	r2, r4
 800223e:	4601      	mov	r1, r0
 8002240:	4819      	ldr	r0, [pc, #100]	@ (80022a8 <PIN_Setup+0x528>)
 8002242:	f7fe f9a3 	bl	800058c <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7b1b      	ldrb	r3, [r3, #12]
 800224a:	2207      	movs	r2, #7
 800224c:	4293      	cmp	r3, r2
 800224e:	f040 81e7 	bne.w	8002620 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7bdb      	ldrb	r3, [r3, #15]
 8002256:	2204      	movs	r2, #4
 8002258:	4293      	cmp	r3, r2
 800225a:	d10f      	bne.n	800227c <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800225c:	2004      	movs	r0, #4
 800225e:	2402      	movs	r4, #2
 8002260:	2500      	movs	r5, #0
 8002262:	2302      	movs	r3, #2
 8002264:	2200      	movs	r2, #0
 8002266:	2107      	movs	r1, #7
 8002268:	9102      	str	r1, [sp, #8]
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	462b      	mov	r3, r5
 8002270:	4622      	mov	r2, r4
 8002272:	4601      	mov	r1, r0
 8002274:	480d      	ldr	r0, [pc, #52]	@ (80022ac <PIN_Setup+0x52c>)
 8002276:	f7fe f989 	bl	800058c <GPIO_Pin_Init>
}
 800227a:	e1d1      	b.n	8002620 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7bdb      	ldrb	r3, [r3, #15]
 8002280:	2207      	movs	r2, #7
 8002282:	4293      	cmp	r3, r2
 8002284:	f040 81cc 	bne.w	8002620 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002288:	2007      	movs	r0, #7
 800228a:	2402      	movs	r4, #2
 800228c:	2500      	movs	r5, #0
 800228e:	2302      	movs	r3, #2
 8002290:	2200      	movs	r2, #0
 8002292:	2107      	movs	r1, #7
 8002294:	9102      	str	r1, [sp, #8]
 8002296:	9201      	str	r2, [sp, #4]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	462b      	mov	r3, r5
 800229c:	4622      	mov	r2, r4
 800229e:	4601      	mov	r1, r0
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <PIN_Setup+0x52c>)
 80022a2:	f7fe f973 	bl	800058c <GPIO_Pin_Init>
}
 80022a6:	e1bb      	b.n	8002620 <PIN_Setup+0x8a0>
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4aaa      	ldr	r2, [pc, #680]	@ (8002560 <PIN_Setup+0x7e0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f040 81b2 	bne.w	8002620 <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7b1b      	ldrb	r3, [r3, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00f      	beq.n	80022e6 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7b1b      	ldrb	r3, [r3, #12]
 80022ca:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00a      	beq.n	80022e6 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7b1b      	ldrb	r3, [r3, #12]
 80022d4:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d005      	beq.n	80022e6 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7b1b      	ldrb	r3, [r3, #12]
 80022de:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 80022e0:	4293      	cmp	r3, r2
 80022e2:	f040 8119 	bne.w	8002518 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7b5b      	ldrb	r3, [r3, #13]
 80022ea:	220b      	movs	r2, #11
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10f      	bne.n	8002310 <PIN_Setup+0x590>
 80022f0:	200b      	movs	r0, #11
 80022f2:	2402      	movs	r4, #2
 80022f4:	2500      	movs	r5, #0
 80022f6:	2302      	movs	r3, #2
 80022f8:	2200      	movs	r2, #0
 80022fa:	2107      	movs	r1, #7
 80022fc:	9102      	str	r1, [sp, #8]
 80022fe:	9201      	str	r2, [sp, #4]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	462b      	mov	r3, r5
 8002304:	4622      	mov	r2, r4
 8002306:	4601      	mov	r1, r0
 8002308:	4896      	ldr	r0, [pc, #600]	@ (8002564 <PIN_Setup+0x7e4>)
 800230a:	f7fe f93f 	bl	800058c <GPIO_Pin_Init>
 800230e:	e028      	b.n	8002362 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7b5b      	ldrb	r3, [r3, #13]
 8002314:	220a      	movs	r2, #10
 8002316:	4293      	cmp	r3, r2
 8002318:	d10f      	bne.n	800233a <PIN_Setup+0x5ba>
 800231a:	200a      	movs	r0, #10
 800231c:	2402      	movs	r4, #2
 800231e:	2500      	movs	r5, #0
 8002320:	2302      	movs	r3, #2
 8002322:	2200      	movs	r2, #0
 8002324:	2107      	movs	r1, #7
 8002326:	9102      	str	r1, [sp, #8]
 8002328:	9201      	str	r2, [sp, #4]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	462b      	mov	r3, r5
 800232e:	4622      	mov	r2, r4
 8002330:	4601      	mov	r1, r0
 8002332:	488d      	ldr	r0, [pc, #564]	@ (8002568 <PIN_Setup+0x7e8>)
 8002334:	f7fe f92a 	bl	800058c <GPIO_Pin_Init>
 8002338:	e013      	b.n	8002362 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7b5b      	ldrb	r3, [r3, #13]
 800233e:	2208      	movs	r2, #8
 8002340:	4293      	cmp	r3, r2
 8002342:	d10e      	bne.n	8002362 <PIN_Setup+0x5e2>
 8002344:	2008      	movs	r0, #8
 8002346:	2402      	movs	r4, #2
 8002348:	2500      	movs	r5, #0
 800234a:	2302      	movs	r3, #2
 800234c:	2200      	movs	r2, #0
 800234e:	2107      	movs	r1, #7
 8002350:	9102      	str	r1, [sp, #8]
 8002352:	9201      	str	r2, [sp, #4]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	462b      	mov	r3, r5
 8002358:	4622      	mov	r2, r4
 800235a:	4601      	mov	r1, r0
 800235c:	4882      	ldr	r0, [pc, #520]	@ (8002568 <PIN_Setup+0x7e8>)
 800235e:	f7fe f915 	bl	800058c <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7b9b      	ldrb	r3, [r3, #14]
 8002366:	220a      	movs	r2, #10
 8002368:	4293      	cmp	r3, r2
 800236a:	d10f      	bne.n	800238c <PIN_Setup+0x60c>
 800236c:	200a      	movs	r0, #10
 800236e:	2402      	movs	r4, #2
 8002370:	2500      	movs	r5, #0
 8002372:	2302      	movs	r3, #2
 8002374:	2200      	movs	r2, #0
 8002376:	2107      	movs	r1, #7
 8002378:	9102      	str	r1, [sp, #8]
 800237a:	9201      	str	r2, [sp, #4]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	462b      	mov	r3, r5
 8002380:	4622      	mov	r2, r4
 8002382:	4601      	mov	r1, r0
 8002384:	4877      	ldr	r0, [pc, #476]	@ (8002564 <PIN_Setup+0x7e4>)
 8002386:	f7fe f901 	bl	800058c <GPIO_Pin_Init>
 800238a:	e028      	b.n	80023de <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b9b      	ldrb	r3, [r3, #14]
 8002390:	220b      	movs	r2, #11
 8002392:	4293      	cmp	r3, r2
 8002394:	d10f      	bne.n	80023b6 <PIN_Setup+0x636>
 8002396:	200b      	movs	r0, #11
 8002398:	2402      	movs	r4, #2
 800239a:	2500      	movs	r5, #0
 800239c:	2302      	movs	r3, #2
 800239e:	2200      	movs	r2, #0
 80023a0:	2107      	movs	r1, #7
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	462b      	mov	r3, r5
 80023aa:	4622      	mov	r2, r4
 80023ac:	4601      	mov	r1, r0
 80023ae:	486e      	ldr	r0, [pc, #440]	@ (8002568 <PIN_Setup+0x7e8>)
 80023b0:	f7fe f8ec 	bl	800058c <GPIO_Pin_Init>
 80023b4:	e013      	b.n	80023de <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7b5b      	ldrb	r3, [r3, #13]
 80023ba:	2208      	movs	r2, #8
 80023bc:	4293      	cmp	r3, r2
 80023be:	d10e      	bne.n	80023de <PIN_Setup+0x65e>
 80023c0:	2008      	movs	r0, #8
 80023c2:	2402      	movs	r4, #2
 80023c4:	2500      	movs	r5, #0
 80023c6:	2302      	movs	r3, #2
 80023c8:	2200      	movs	r2, #0
 80023ca:	2107      	movs	r1, #7
 80023cc:	9102      	str	r1, [sp, #8]
 80023ce:	9201      	str	r2, [sp, #4]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	462b      	mov	r3, r5
 80023d4:	4622      	mov	r2, r4
 80023d6:	4601      	mov	r1, r0
 80023d8:	4863      	ldr	r0, [pc, #396]	@ (8002568 <PIN_Setup+0x7e8>)
 80023da:	f7fe f8d7 	bl	800058c <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7b1b      	ldrb	r3, [r3, #12]
 80023e2:	2202      	movs	r2, #2
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d128      	bne.n	800243a <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7bdb      	ldrb	r3, [r3, #15]
 80023ec:	220c      	movs	r2, #12
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10f      	bne.n	8002412 <PIN_Setup+0x692>
 80023f2:	200c      	movs	r0, #12
 80023f4:	2402      	movs	r4, #2
 80023f6:	2500      	movs	r5, #0
 80023f8:	2302      	movs	r3, #2
 80023fa:	2200      	movs	r2, #0
 80023fc:	2107      	movs	r1, #7
 80023fe:	9102      	str	r1, [sp, #8]
 8002400:	9201      	str	r2, [sp, #4]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	462b      	mov	r3, r5
 8002406:	4622      	mov	r2, r4
 8002408:	4601      	mov	r1, r0
 800240a:	4857      	ldr	r0, [pc, #348]	@ (8002568 <PIN_Setup+0x7e8>)
 800240c:	f7fe f8be 	bl	800058c <GPIO_Pin_Init>
 8002410:	e013      	b.n	800243a <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7bdb      	ldrb	r3, [r3, #15]
 8002416:	220a      	movs	r2, #10
 8002418:	4293      	cmp	r3, r2
 800241a:	d10e      	bne.n	800243a <PIN_Setup+0x6ba>
 800241c:	200a      	movs	r0, #10
 800241e:	2402      	movs	r4, #2
 8002420:	2500      	movs	r5, #0
 8002422:	2302      	movs	r3, #2
 8002424:	2200      	movs	r2, #0
 8002426:	2107      	movs	r1, #7
 8002428:	9102      	str	r1, [sp, #8]
 800242a:	9201      	str	r2, [sp, #4]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	462b      	mov	r3, r5
 8002430:	4622      	mov	r2, r4
 8002432:	4601      	mov	r1, r0
 8002434:	484d      	ldr	r0, [pc, #308]	@ (800256c <PIN_Setup+0x7ec>)
 8002436:	f7fe f8a9 	bl	800058c <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7cdb      	ldrb	r3, [r3, #19]
 800243e:	2200      	movs	r2, #0
 8002440:	4293      	cmp	r3, r2
 8002442:	f000 80ec 	beq.w	800261e <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7cdb      	ldrb	r3, [r3, #19]
 800244a:	2201      	movs	r2, #1
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <PIN_Setup+0x6da>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7cdb      	ldrb	r3, [r3, #19]
 8002454:	2203      	movs	r2, #3
 8002456:	4293      	cmp	r3, r2
 8002458:	d128      	bne.n	80024ac <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7bdb      	ldrb	r3, [r3, #15]
 800245e:	2200      	movs	r2, #0
 8002460:	4293      	cmp	r3, r2
 8002462:	d10f      	bne.n	8002484 <PIN_Setup+0x704>
 8002464:	2000      	movs	r0, #0
 8002466:	2402      	movs	r4, #2
 8002468:	2500      	movs	r5, #0
 800246a:	2302      	movs	r3, #2
 800246c:	2200      	movs	r2, #0
 800246e:	2107      	movs	r1, #7
 8002470:	9102      	str	r1, [sp, #8]
 8002472:	9201      	str	r2, [sp, #4]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	462b      	mov	r3, r5
 8002478:	4622      	mov	r2, r4
 800247a:	4601      	mov	r1, r0
 800247c:	483a      	ldr	r0, [pc, #232]	@ (8002568 <PIN_Setup+0x7e8>)
 800247e:	f7fe f885 	bl	800058c <GPIO_Pin_Init>
 8002482:	e013      	b.n	80024ac <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7bdb      	ldrb	r3, [r3, #15]
 8002488:	2203      	movs	r2, #3
 800248a:	4293      	cmp	r3, r2
 800248c:	d10e      	bne.n	80024ac <PIN_Setup+0x72c>
 800248e:	2003      	movs	r0, #3
 8002490:	2402      	movs	r4, #2
 8002492:	2500      	movs	r5, #0
 8002494:	2302      	movs	r3, #2
 8002496:	2200      	movs	r2, #0
 8002498:	2107      	movs	r1, #7
 800249a:	9102      	str	r1, [sp, #8]
 800249c:	9201      	str	r2, [sp, #4]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	462b      	mov	r3, r5
 80024a2:	4622      	mov	r2, r4
 80024a4:	4601      	mov	r1, r0
 80024a6:	4831      	ldr	r0, [pc, #196]	@ (800256c <PIN_Setup+0x7ec>)
 80024a8:	f7fe f870 	bl	800058c <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7cdb      	ldrb	r3, [r3, #19]
 80024b0:	2202      	movs	r2, #2
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d005      	beq.n	80024c2 <PIN_Setup+0x742>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7cdb      	ldrb	r3, [r3, #19]
 80024ba:	2203      	movs	r2, #3
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 80ae 	bne.w	800261e <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7bdb      	ldrb	r3, [r3, #15]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d10f      	bne.n	80024ec <PIN_Setup+0x76c>
 80024cc:	2001      	movs	r0, #1
 80024ce:	2402      	movs	r4, #2
 80024d0:	2500      	movs	r5, #0
 80024d2:	2302      	movs	r3, #2
 80024d4:	2200      	movs	r2, #0
 80024d6:	2107      	movs	r1, #7
 80024d8:	9102      	str	r1, [sp, #8]
 80024da:	9201      	str	r2, [sp, #4]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	462b      	mov	r3, r5
 80024e0:	4622      	mov	r2, r4
 80024e2:	4601      	mov	r1, r0
 80024e4:	4820      	ldr	r0, [pc, #128]	@ (8002568 <PIN_Setup+0x7e8>)
 80024e6:	f7fe f851 	bl	800058c <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 80024ea:	e098      	b.n	800261e <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7bdb      	ldrb	r3, [r3, #15]
 80024f0:	2204      	movs	r2, #4
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f040 8093 	bne.w	800261e <PIN_Setup+0x89e>
 80024f8:	2004      	movs	r0, #4
 80024fa:	2402      	movs	r4, #2
 80024fc:	2500      	movs	r5, #0
 80024fe:	2302      	movs	r3, #2
 8002500:	2200      	movs	r2, #0
 8002502:	2107      	movs	r1, #7
 8002504:	9102      	str	r1, [sp, #8]
 8002506:	9201      	str	r2, [sp, #4]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	462b      	mov	r3, r5
 800250c:	4622      	mov	r2, r4
 800250e:	4601      	mov	r1, r0
 8002510:	4816      	ldr	r0, [pc, #88]	@ (800256c <PIN_Setup+0x7ec>)
 8002512:	f7fe f83b 	bl	800058c <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002516:	e082      	b.n	800261e <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7b1b      	ldrb	r3, [r3, #12]
 800251c:	2206      	movs	r2, #6
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7b1b      	ldrb	r3, [r3, #12]
 8002526:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002532:	4293      	cmp	r3, r2
 8002534:	d174      	bne.n	8002620 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7b5b      	ldrb	r3, [r3, #13]
 800253a:	220b      	movs	r2, #11
 800253c:	4293      	cmp	r3, r2
 800253e:	d117      	bne.n	8002570 <PIN_Setup+0x7f0>
 8002540:	200b      	movs	r0, #11
 8002542:	2402      	movs	r4, #2
 8002544:	2500      	movs	r5, #0
 8002546:	2302      	movs	r3, #2
 8002548:	2200      	movs	r2, #0
 800254a:	2107      	movs	r1, #7
 800254c:	9102      	str	r1, [sp, #8]
 800254e:	9201      	str	r2, [sp, #4]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	462b      	mov	r3, r5
 8002554:	4622      	mov	r2, r4
 8002556:	4601      	mov	r1, r0
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <PIN_Setup+0x7e4>)
 800255a:	f7fe f817 	bl	800058c <GPIO_Pin_Init>
 800255e:	e030      	b.n	80025c2 <PIN_Setup+0x842>
 8002560:	40004800 	.word	0x40004800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7b5b      	ldrb	r3, [r3, #13]
 8002574:	220a      	movs	r2, #10
 8002576:	4293      	cmp	r3, r2
 8002578:	d10f      	bne.n	800259a <PIN_Setup+0x81a>
 800257a:	200a      	movs	r0, #10
 800257c:	2402      	movs	r4, #2
 800257e:	2500      	movs	r5, #0
 8002580:	2302      	movs	r3, #2
 8002582:	2200      	movs	r2, #0
 8002584:	2107      	movs	r1, #7
 8002586:	9102      	str	r1, [sp, #8]
 8002588:	9201      	str	r2, [sp, #4]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	462b      	mov	r3, r5
 800258e:	4622      	mov	r2, r4
 8002590:	4601      	mov	r1, r0
 8002592:	4825      	ldr	r0, [pc, #148]	@ (8002628 <PIN_Setup+0x8a8>)
 8002594:	f7fd fffa 	bl	800058c <GPIO_Pin_Init>
 8002598:	e013      	b.n	80025c2 <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7b5b      	ldrb	r3, [r3, #13]
 800259e:	2208      	movs	r2, #8
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d10e      	bne.n	80025c2 <PIN_Setup+0x842>
 80025a4:	2008      	movs	r0, #8
 80025a6:	2402      	movs	r4, #2
 80025a8:	2500      	movs	r5, #0
 80025aa:	2302      	movs	r3, #2
 80025ac:	2200      	movs	r2, #0
 80025ae:	2107      	movs	r1, #7
 80025b0:	9102      	str	r1, [sp, #8]
 80025b2:	9201      	str	r2, [sp, #4]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	462b      	mov	r3, r5
 80025b8:	4622      	mov	r2, r4
 80025ba:	4601      	mov	r1, r0
 80025bc:	481a      	ldr	r0, [pc, #104]	@ (8002628 <PIN_Setup+0x8a8>)
 80025be:	f7fd ffe5 	bl	800058c <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7bdb      	ldrb	r3, [r3, #15]
 80025c6:	220c      	movs	r2, #12
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d10f      	bne.n	80025ec <PIN_Setup+0x86c>
 80025cc:	200c      	movs	r0, #12
 80025ce:	2402      	movs	r4, #2
 80025d0:	2500      	movs	r5, #0
 80025d2:	2302      	movs	r3, #2
 80025d4:	2200      	movs	r2, #0
 80025d6:	2107      	movs	r1, #7
 80025d8:	9102      	str	r1, [sp, #8]
 80025da:	9201      	str	r2, [sp, #4]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	462b      	mov	r3, r5
 80025e0:	4622      	mov	r2, r4
 80025e2:	4601      	mov	r1, r0
 80025e4:	4810      	ldr	r0, [pc, #64]	@ (8002628 <PIN_Setup+0x8a8>)
 80025e6:	f7fd ffd1 	bl	800058c <GPIO_Pin_Init>
}
 80025ea:	e019      	b.n	8002620 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7bdb      	ldrb	r3, [r3, #15]
 80025f0:	220a      	movs	r2, #10
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d114      	bne.n	8002620 <PIN_Setup+0x8a0>
 80025f6:	200a      	movs	r0, #10
 80025f8:	2402      	movs	r4, #2
 80025fa:	2500      	movs	r5, #0
 80025fc:	2302      	movs	r3, #2
 80025fe:	2200      	movs	r2, #0
 8002600:	2107      	movs	r1, #7
 8002602:	9102      	str	r1, [sp, #8]
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	462b      	mov	r3, r5
 800260a:	4622      	mov	r2, r4
 800260c:	4601      	mov	r1, r0
 800260e:	4807      	ldr	r0, [pc, #28]	@ (800262c <PIN_Setup+0x8ac>)
 8002610:	f7fd ffbc 	bl	800058c <GPIO_Pin_Init>
}
 8002614:	e004      	b.n	8002620 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002616:	bf00      	nop
 8002618:	e002      	b.n	8002620 <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800261e:	bf00      	nop
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	40020400 	.word	0x40020400
 800262c:	40020c00 	.word	0x40020c00

08002630 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fafd 	bl	8001c38 <USART_Clock_Enable>
	PIN_Setup(config);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fb9e 	bl	8001d80 <PIN_Setup>

	config->Port->BRR = SystemCoreClock/config->baudrate;
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <USART_Init+0xa0>)
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fbb1 f2f2 	udiv	r2, r1, r2
 8002654:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7d9b      	ldrb	r3, [r3, #22]
 8002660:	4619      	mov	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7c9b      	ldrb	r3, [r3, #18]
 8002674:	4619      	mov	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7d1b      	ldrb	r3, [r3, #20]
 8002688:	4619      	mov	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7b1b      	ldrb	r3, [r3, #12]
 8002696:	2203      	movs	r2, #3
 8002698:	4293      	cmp	r3, r2
 800269a:	d107      	bne.n	80026ac <USART_Init+0x7c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7b1b      	ldrb	r3, [r3, #12]
 80026b0:	2205      	movs	r2, #5
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d107      	bne.n	80026c6 <USART_Init+0x96>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026c4:	611a      	str	r2, [r3, #16]





	return 1;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000000 	.word	0x20000000

080026d4 <_vsiprintf_r>:
 80026d4:	b500      	push	{lr}
 80026d6:	b09b      	sub	sp, #108	@ 0x6c
 80026d8:	9100      	str	r1, [sp, #0]
 80026da:	9104      	str	r1, [sp, #16]
 80026dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80026e0:	9105      	str	r1, [sp, #20]
 80026e2:	9102      	str	r1, [sp, #8]
 80026e4:	4905      	ldr	r1, [pc, #20]	@ (80026fc <_vsiprintf_r+0x28>)
 80026e6:	9103      	str	r1, [sp, #12]
 80026e8:	4669      	mov	r1, sp
 80026ea:	f000 f993 	bl	8002a14 <_svfiprintf_r>
 80026ee:	9b00      	ldr	r3, [sp, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	b01b      	add	sp, #108	@ 0x6c
 80026f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026fa:	bf00      	nop
 80026fc:	ffff0208 	.word	0xffff0208

08002700 <vsiprintf>:
 8002700:	4613      	mov	r3, r2
 8002702:	460a      	mov	r2, r1
 8002704:	4601      	mov	r1, r0
 8002706:	4802      	ldr	r0, [pc, #8]	@ (8002710 <vsiprintf+0x10>)
 8002708:	6800      	ldr	r0, [r0, #0]
 800270a:	f7ff bfe3 	b.w	80026d4 <_vsiprintf_r>
 800270e:	bf00      	nop
 8002710:	20000004 	.word	0x20000004

08002714 <__errno>:
 8002714:	4b01      	ldr	r3, [pc, #4]	@ (800271c <__errno+0x8>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000004 	.word	0x20000004

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4d0d      	ldr	r5, [pc, #52]	@ (8002758 <__libc_init_array+0x38>)
 8002724:	4c0d      	ldr	r4, [pc, #52]	@ (800275c <__libc_init_array+0x3c>)
 8002726:	1b64      	subs	r4, r4, r5
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	2600      	movs	r6, #0
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	4d0b      	ldr	r5, [pc, #44]	@ (8002760 <__libc_init_array+0x40>)
 8002732:	4c0c      	ldr	r4, [pc, #48]	@ (8002764 <__libc_init_array+0x44>)
 8002734:	f000 fc66 	bl	8003004 <_init>
 8002738:	1b64      	subs	r4, r4, r5
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	2600      	movs	r6, #0
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f855 3b04 	ldr.w	r3, [r5], #4
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	08003148 	.word	0x08003148
 800275c:	08003148 	.word	0x08003148
 8002760:	08003148 	.word	0x08003148
 8002764:	0800314c 	.word	0x0800314c

08002768 <__retarget_lock_acquire_recursive>:
 8002768:	4770      	bx	lr

0800276a <__retarget_lock_release_recursive>:
 800276a:	4770      	bx	lr

0800276c <_free_r>:
 800276c:	b538      	push	{r3, r4, r5, lr}
 800276e:	4605      	mov	r5, r0
 8002770:	2900      	cmp	r1, #0
 8002772:	d041      	beq.n	80027f8 <_free_r+0x8c>
 8002774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002778:	1f0c      	subs	r4, r1, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	bfb8      	it	lt
 800277e:	18e4      	addlt	r4, r4, r3
 8002780:	f000 f8e0 	bl	8002944 <__malloc_lock>
 8002784:	4a1d      	ldr	r2, [pc, #116]	@ (80027fc <_free_r+0x90>)
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	b933      	cbnz	r3, 8002798 <_free_r+0x2c>
 800278a:	6063      	str	r3, [r4, #4]
 800278c:	6014      	str	r4, [r2, #0]
 800278e:	4628      	mov	r0, r5
 8002790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002794:	f000 b8dc 	b.w	8002950 <__malloc_unlock>
 8002798:	42a3      	cmp	r3, r4
 800279a:	d908      	bls.n	80027ae <_free_r+0x42>
 800279c:	6820      	ldr	r0, [r4, #0]
 800279e:	1821      	adds	r1, r4, r0
 80027a0:	428b      	cmp	r3, r1
 80027a2:	bf01      	itttt	eq
 80027a4:	6819      	ldreq	r1, [r3, #0]
 80027a6:	685b      	ldreq	r3, [r3, #4]
 80027a8:	1809      	addeq	r1, r1, r0
 80027aa:	6021      	streq	r1, [r4, #0]
 80027ac:	e7ed      	b.n	800278a <_free_r+0x1e>
 80027ae:	461a      	mov	r2, r3
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	b10b      	cbz	r3, 80027b8 <_free_r+0x4c>
 80027b4:	42a3      	cmp	r3, r4
 80027b6:	d9fa      	bls.n	80027ae <_free_r+0x42>
 80027b8:	6811      	ldr	r1, [r2, #0]
 80027ba:	1850      	adds	r0, r2, r1
 80027bc:	42a0      	cmp	r0, r4
 80027be:	d10b      	bne.n	80027d8 <_free_r+0x6c>
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	4401      	add	r1, r0
 80027c4:	1850      	adds	r0, r2, r1
 80027c6:	4283      	cmp	r3, r0
 80027c8:	6011      	str	r1, [r2, #0]
 80027ca:	d1e0      	bne.n	800278e <_free_r+0x22>
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	6053      	str	r3, [r2, #4]
 80027d2:	4408      	add	r0, r1
 80027d4:	6010      	str	r0, [r2, #0]
 80027d6:	e7da      	b.n	800278e <_free_r+0x22>
 80027d8:	d902      	bls.n	80027e0 <_free_r+0x74>
 80027da:	230c      	movs	r3, #12
 80027dc:	602b      	str	r3, [r5, #0]
 80027de:	e7d6      	b.n	800278e <_free_r+0x22>
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	1821      	adds	r1, r4, r0
 80027e4:	428b      	cmp	r3, r1
 80027e6:	bf04      	itt	eq
 80027e8:	6819      	ldreq	r1, [r3, #0]
 80027ea:	685b      	ldreq	r3, [r3, #4]
 80027ec:	6063      	str	r3, [r4, #4]
 80027ee:	bf04      	itt	eq
 80027f0:	1809      	addeq	r1, r1, r0
 80027f2:	6021      	streq	r1, [r4, #0]
 80027f4:	6054      	str	r4, [r2, #4]
 80027f6:	e7ca      	b.n	800278e <_free_r+0x22>
 80027f8:	bd38      	pop	{r3, r4, r5, pc}
 80027fa:	bf00      	nop
 80027fc:	20000348 	.word	0x20000348

08002800 <sbrk_aligned>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	4e0f      	ldr	r6, [pc, #60]	@ (8002840 <sbrk_aligned+0x40>)
 8002804:	460c      	mov	r4, r1
 8002806:	6831      	ldr	r1, [r6, #0]
 8002808:	4605      	mov	r5, r0
 800280a:	b911      	cbnz	r1, 8002812 <sbrk_aligned+0x12>
 800280c:	f000 fba6 	bl	8002f5c <_sbrk_r>
 8002810:	6030      	str	r0, [r6, #0]
 8002812:	4621      	mov	r1, r4
 8002814:	4628      	mov	r0, r5
 8002816:	f000 fba1 	bl	8002f5c <_sbrk_r>
 800281a:	1c43      	adds	r3, r0, #1
 800281c:	d103      	bne.n	8002826 <sbrk_aligned+0x26>
 800281e:	f04f 34ff 	mov.w	r4, #4294967295
 8002822:	4620      	mov	r0, r4
 8002824:	bd70      	pop	{r4, r5, r6, pc}
 8002826:	1cc4      	adds	r4, r0, #3
 8002828:	f024 0403 	bic.w	r4, r4, #3
 800282c:	42a0      	cmp	r0, r4
 800282e:	d0f8      	beq.n	8002822 <sbrk_aligned+0x22>
 8002830:	1a21      	subs	r1, r4, r0
 8002832:	4628      	mov	r0, r5
 8002834:	f000 fb92 	bl	8002f5c <_sbrk_r>
 8002838:	3001      	adds	r0, #1
 800283a:	d1f2      	bne.n	8002822 <sbrk_aligned+0x22>
 800283c:	e7ef      	b.n	800281e <sbrk_aligned+0x1e>
 800283e:	bf00      	nop
 8002840:	20000344 	.word	0x20000344

08002844 <_malloc_r>:
 8002844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002848:	1ccd      	adds	r5, r1, #3
 800284a:	f025 0503 	bic.w	r5, r5, #3
 800284e:	3508      	adds	r5, #8
 8002850:	2d0c      	cmp	r5, #12
 8002852:	bf38      	it	cc
 8002854:	250c      	movcc	r5, #12
 8002856:	2d00      	cmp	r5, #0
 8002858:	4606      	mov	r6, r0
 800285a:	db01      	blt.n	8002860 <_malloc_r+0x1c>
 800285c:	42a9      	cmp	r1, r5
 800285e:	d904      	bls.n	800286a <_malloc_r+0x26>
 8002860:	230c      	movs	r3, #12
 8002862:	6033      	str	r3, [r6, #0]
 8002864:	2000      	movs	r0, #0
 8002866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800286a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002940 <_malloc_r+0xfc>
 800286e:	f000 f869 	bl	8002944 <__malloc_lock>
 8002872:	f8d8 3000 	ldr.w	r3, [r8]
 8002876:	461c      	mov	r4, r3
 8002878:	bb44      	cbnz	r4, 80028cc <_malloc_r+0x88>
 800287a:	4629      	mov	r1, r5
 800287c:	4630      	mov	r0, r6
 800287e:	f7ff ffbf 	bl	8002800 <sbrk_aligned>
 8002882:	1c43      	adds	r3, r0, #1
 8002884:	4604      	mov	r4, r0
 8002886:	d158      	bne.n	800293a <_malloc_r+0xf6>
 8002888:	f8d8 4000 	ldr.w	r4, [r8]
 800288c:	4627      	mov	r7, r4
 800288e:	2f00      	cmp	r7, #0
 8002890:	d143      	bne.n	800291a <_malloc_r+0xd6>
 8002892:	2c00      	cmp	r4, #0
 8002894:	d04b      	beq.n	800292e <_malloc_r+0xea>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	4639      	mov	r1, r7
 800289a:	4630      	mov	r0, r6
 800289c:	eb04 0903 	add.w	r9, r4, r3
 80028a0:	f000 fb5c 	bl	8002f5c <_sbrk_r>
 80028a4:	4581      	cmp	r9, r0
 80028a6:	d142      	bne.n	800292e <_malloc_r+0xea>
 80028a8:	6821      	ldr	r1, [r4, #0]
 80028aa:	1a6d      	subs	r5, r5, r1
 80028ac:	4629      	mov	r1, r5
 80028ae:	4630      	mov	r0, r6
 80028b0:	f7ff ffa6 	bl	8002800 <sbrk_aligned>
 80028b4:	3001      	adds	r0, #1
 80028b6:	d03a      	beq.n	800292e <_malloc_r+0xea>
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	442b      	add	r3, r5
 80028bc:	6023      	str	r3, [r4, #0]
 80028be:	f8d8 3000 	ldr.w	r3, [r8]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	bb62      	cbnz	r2, 8002920 <_malloc_r+0xdc>
 80028c6:	f8c8 7000 	str.w	r7, [r8]
 80028ca:	e00f      	b.n	80028ec <_malloc_r+0xa8>
 80028cc:	6822      	ldr	r2, [r4, #0]
 80028ce:	1b52      	subs	r2, r2, r5
 80028d0:	d420      	bmi.n	8002914 <_malloc_r+0xd0>
 80028d2:	2a0b      	cmp	r2, #11
 80028d4:	d917      	bls.n	8002906 <_malloc_r+0xc2>
 80028d6:	1961      	adds	r1, r4, r5
 80028d8:	42a3      	cmp	r3, r4
 80028da:	6025      	str	r5, [r4, #0]
 80028dc:	bf18      	it	ne
 80028de:	6059      	strne	r1, [r3, #4]
 80028e0:	6863      	ldr	r3, [r4, #4]
 80028e2:	bf08      	it	eq
 80028e4:	f8c8 1000 	streq.w	r1, [r8]
 80028e8:	5162      	str	r2, [r4, r5]
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	4630      	mov	r0, r6
 80028ee:	f000 f82f 	bl	8002950 <__malloc_unlock>
 80028f2:	f104 000b 	add.w	r0, r4, #11
 80028f6:	1d23      	adds	r3, r4, #4
 80028f8:	f020 0007 	bic.w	r0, r0, #7
 80028fc:	1ac2      	subs	r2, r0, r3
 80028fe:	bf1c      	itt	ne
 8002900:	1a1b      	subne	r3, r3, r0
 8002902:	50a3      	strne	r3, [r4, r2]
 8002904:	e7af      	b.n	8002866 <_malloc_r+0x22>
 8002906:	6862      	ldr	r2, [r4, #4]
 8002908:	42a3      	cmp	r3, r4
 800290a:	bf0c      	ite	eq
 800290c:	f8c8 2000 	streq.w	r2, [r8]
 8002910:	605a      	strne	r2, [r3, #4]
 8002912:	e7eb      	b.n	80028ec <_malloc_r+0xa8>
 8002914:	4623      	mov	r3, r4
 8002916:	6864      	ldr	r4, [r4, #4]
 8002918:	e7ae      	b.n	8002878 <_malloc_r+0x34>
 800291a:	463c      	mov	r4, r7
 800291c:	687f      	ldr	r7, [r7, #4]
 800291e:	e7b6      	b.n	800288e <_malloc_r+0x4a>
 8002920:	461a      	mov	r2, r3
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	42a3      	cmp	r3, r4
 8002926:	d1fb      	bne.n	8002920 <_malloc_r+0xdc>
 8002928:	2300      	movs	r3, #0
 800292a:	6053      	str	r3, [r2, #4]
 800292c:	e7de      	b.n	80028ec <_malloc_r+0xa8>
 800292e:	230c      	movs	r3, #12
 8002930:	6033      	str	r3, [r6, #0]
 8002932:	4630      	mov	r0, r6
 8002934:	f000 f80c 	bl	8002950 <__malloc_unlock>
 8002938:	e794      	b.n	8002864 <_malloc_r+0x20>
 800293a:	6005      	str	r5, [r0, #0]
 800293c:	e7d6      	b.n	80028ec <_malloc_r+0xa8>
 800293e:	bf00      	nop
 8002940:	20000348 	.word	0x20000348

08002944 <__malloc_lock>:
 8002944:	4801      	ldr	r0, [pc, #4]	@ (800294c <__malloc_lock+0x8>)
 8002946:	f7ff bf0f 	b.w	8002768 <__retarget_lock_acquire_recursive>
 800294a:	bf00      	nop
 800294c:	20000340 	.word	0x20000340

08002950 <__malloc_unlock>:
 8002950:	4801      	ldr	r0, [pc, #4]	@ (8002958 <__malloc_unlock+0x8>)
 8002952:	f7ff bf0a 	b.w	800276a <__retarget_lock_release_recursive>
 8002956:	bf00      	nop
 8002958:	20000340 	.word	0x20000340

0800295c <__ssputs_r>:
 800295c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002960:	688e      	ldr	r6, [r1, #8]
 8002962:	461f      	mov	r7, r3
 8002964:	42be      	cmp	r6, r7
 8002966:	680b      	ldr	r3, [r1, #0]
 8002968:	4682      	mov	sl, r0
 800296a:	460c      	mov	r4, r1
 800296c:	4690      	mov	r8, r2
 800296e:	d82d      	bhi.n	80029cc <__ssputs_r+0x70>
 8002970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002974:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002978:	d026      	beq.n	80029c8 <__ssputs_r+0x6c>
 800297a:	6965      	ldr	r5, [r4, #20]
 800297c:	6909      	ldr	r1, [r1, #16]
 800297e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002982:	eba3 0901 	sub.w	r9, r3, r1
 8002986:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800298a:	1c7b      	adds	r3, r7, #1
 800298c:	444b      	add	r3, r9
 800298e:	106d      	asrs	r5, r5, #1
 8002990:	429d      	cmp	r5, r3
 8002992:	bf38      	it	cc
 8002994:	461d      	movcc	r5, r3
 8002996:	0553      	lsls	r3, r2, #21
 8002998:	d527      	bpl.n	80029ea <__ssputs_r+0x8e>
 800299a:	4629      	mov	r1, r5
 800299c:	f7ff ff52 	bl	8002844 <_malloc_r>
 80029a0:	4606      	mov	r6, r0
 80029a2:	b360      	cbz	r0, 80029fe <__ssputs_r+0xa2>
 80029a4:	6921      	ldr	r1, [r4, #16]
 80029a6:	464a      	mov	r2, r9
 80029a8:	f000 fae8 	bl	8002f7c <memcpy>
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80029b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b6:	81a3      	strh	r3, [r4, #12]
 80029b8:	6126      	str	r6, [r4, #16]
 80029ba:	6165      	str	r5, [r4, #20]
 80029bc:	444e      	add	r6, r9
 80029be:	eba5 0509 	sub.w	r5, r5, r9
 80029c2:	6026      	str	r6, [r4, #0]
 80029c4:	60a5      	str	r5, [r4, #8]
 80029c6:	463e      	mov	r6, r7
 80029c8:	42be      	cmp	r6, r7
 80029ca:	d900      	bls.n	80029ce <__ssputs_r+0x72>
 80029cc:	463e      	mov	r6, r7
 80029ce:	6820      	ldr	r0, [r4, #0]
 80029d0:	4632      	mov	r2, r6
 80029d2:	4641      	mov	r1, r8
 80029d4:	f000 faa8 	bl	8002f28 <memmove>
 80029d8:	68a3      	ldr	r3, [r4, #8]
 80029da:	1b9b      	subs	r3, r3, r6
 80029dc:	60a3      	str	r3, [r4, #8]
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	4433      	add	r3, r6
 80029e2:	6023      	str	r3, [r4, #0]
 80029e4:	2000      	movs	r0, #0
 80029e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ea:	462a      	mov	r2, r5
 80029ec:	f000 fad4 	bl	8002f98 <_realloc_r>
 80029f0:	4606      	mov	r6, r0
 80029f2:	2800      	cmp	r0, #0
 80029f4:	d1e0      	bne.n	80029b8 <__ssputs_r+0x5c>
 80029f6:	6921      	ldr	r1, [r4, #16]
 80029f8:	4650      	mov	r0, sl
 80029fa:	f7ff feb7 	bl	800276c <_free_r>
 80029fe:	230c      	movs	r3, #12
 8002a00:	f8ca 3000 	str.w	r3, [sl]
 8002a04:	89a3      	ldrh	r3, [r4, #12]
 8002a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a0a:	81a3      	strh	r3, [r4, #12]
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	e7e9      	b.n	80029e6 <__ssputs_r+0x8a>
	...

08002a14 <_svfiprintf_r>:
 8002a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a18:	4698      	mov	r8, r3
 8002a1a:	898b      	ldrh	r3, [r1, #12]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	b09d      	sub	sp, #116	@ 0x74
 8002a20:	4607      	mov	r7, r0
 8002a22:	460d      	mov	r5, r1
 8002a24:	4614      	mov	r4, r2
 8002a26:	d510      	bpl.n	8002a4a <_svfiprintf_r+0x36>
 8002a28:	690b      	ldr	r3, [r1, #16]
 8002a2a:	b973      	cbnz	r3, 8002a4a <_svfiprintf_r+0x36>
 8002a2c:	2140      	movs	r1, #64	@ 0x40
 8002a2e:	f7ff ff09 	bl	8002844 <_malloc_r>
 8002a32:	6028      	str	r0, [r5, #0]
 8002a34:	6128      	str	r0, [r5, #16]
 8002a36:	b930      	cbnz	r0, 8002a46 <_svfiprintf_r+0x32>
 8002a38:	230c      	movs	r3, #12
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	b01d      	add	sp, #116	@ 0x74
 8002a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a46:	2340      	movs	r3, #64	@ 0x40
 8002a48:	616b      	str	r3, [r5, #20]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a4e:	2320      	movs	r3, #32
 8002a50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a58:	2330      	movs	r3, #48	@ 0x30
 8002a5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002bf8 <_svfiprintf_r+0x1e4>
 8002a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a62:	f04f 0901 	mov.w	r9, #1
 8002a66:	4623      	mov	r3, r4
 8002a68:	469a      	mov	sl, r3
 8002a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a6e:	b10a      	cbz	r2, 8002a74 <_svfiprintf_r+0x60>
 8002a70:	2a25      	cmp	r2, #37	@ 0x25
 8002a72:	d1f9      	bne.n	8002a68 <_svfiprintf_r+0x54>
 8002a74:	ebba 0b04 	subs.w	fp, sl, r4
 8002a78:	d00b      	beq.n	8002a92 <_svfiprintf_r+0x7e>
 8002a7a:	465b      	mov	r3, fp
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	4638      	mov	r0, r7
 8002a82:	f7ff ff6b 	bl	800295c <__ssputs_r>
 8002a86:	3001      	adds	r0, #1
 8002a88:	f000 80a7 	beq.w	8002bda <_svfiprintf_r+0x1c6>
 8002a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a8e:	445a      	add	r2, fp
 8002a90:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a92:	f89a 3000 	ldrb.w	r3, [sl]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 809f 	beq.w	8002bda <_svfiprintf_r+0x1c6>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aa6:	f10a 0a01 	add.w	sl, sl, #1
 8002aaa:	9304      	str	r3, [sp, #16]
 8002aac:	9307      	str	r3, [sp, #28]
 8002aae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ab2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ab4:	4654      	mov	r4, sl
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002abc:	484e      	ldr	r0, [pc, #312]	@ (8002bf8 <_svfiprintf_r+0x1e4>)
 8002abe:	f7fd fb8f 	bl	80001e0 <memchr>
 8002ac2:	9a04      	ldr	r2, [sp, #16]
 8002ac4:	b9d8      	cbnz	r0, 8002afe <_svfiprintf_r+0xea>
 8002ac6:	06d0      	lsls	r0, r2, #27
 8002ac8:	bf44      	itt	mi
 8002aca:	2320      	movmi	r3, #32
 8002acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ad0:	0711      	lsls	r1, r2, #28
 8002ad2:	bf44      	itt	mi
 8002ad4:	232b      	movmi	r3, #43	@ 0x2b
 8002ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ada:	f89a 3000 	ldrb.w	r3, [sl]
 8002ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ae0:	d015      	beq.n	8002b0e <_svfiprintf_r+0xfa>
 8002ae2:	9a07      	ldr	r2, [sp, #28]
 8002ae4:	4654      	mov	r4, sl
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f04f 0c0a 	mov.w	ip, #10
 8002aec:	4621      	mov	r1, r4
 8002aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002af2:	3b30      	subs	r3, #48	@ 0x30
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d94b      	bls.n	8002b90 <_svfiprintf_r+0x17c>
 8002af8:	b1b0      	cbz	r0, 8002b28 <_svfiprintf_r+0x114>
 8002afa:	9207      	str	r2, [sp, #28]
 8002afc:	e014      	b.n	8002b28 <_svfiprintf_r+0x114>
 8002afe:	eba0 0308 	sub.w	r3, r0, r8
 8002b02:	fa09 f303 	lsl.w	r3, r9, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	9304      	str	r3, [sp, #16]
 8002b0a:	46a2      	mov	sl, r4
 8002b0c:	e7d2      	b.n	8002ab4 <_svfiprintf_r+0xa0>
 8002b0e:	9b03      	ldr	r3, [sp, #12]
 8002b10:	1d19      	adds	r1, r3, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	9103      	str	r1, [sp, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bfbb      	ittet	lt
 8002b1a:	425b      	neglt	r3, r3
 8002b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8002b20:	9307      	strge	r3, [sp, #28]
 8002b22:	9307      	strlt	r3, [sp, #28]
 8002b24:	bfb8      	it	lt
 8002b26:	9204      	strlt	r2, [sp, #16]
 8002b28:	7823      	ldrb	r3, [r4, #0]
 8002b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b2c:	d10a      	bne.n	8002b44 <_svfiprintf_r+0x130>
 8002b2e:	7863      	ldrb	r3, [r4, #1]
 8002b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b32:	d132      	bne.n	8002b9a <_svfiprintf_r+0x186>
 8002b34:	9b03      	ldr	r3, [sp, #12]
 8002b36:	1d1a      	adds	r2, r3, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	9203      	str	r2, [sp, #12]
 8002b3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b40:	3402      	adds	r4, #2
 8002b42:	9305      	str	r3, [sp, #20]
 8002b44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002c08 <_svfiprintf_r+0x1f4>
 8002b48:	7821      	ldrb	r1, [r4, #0]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	4650      	mov	r0, sl
 8002b4e:	f7fd fb47 	bl	80001e0 <memchr>
 8002b52:	b138      	cbz	r0, 8002b64 <_svfiprintf_r+0x150>
 8002b54:	9b04      	ldr	r3, [sp, #16]
 8002b56:	eba0 000a 	sub.w	r0, r0, sl
 8002b5a:	2240      	movs	r2, #64	@ 0x40
 8002b5c:	4082      	lsls	r2, r0
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	3401      	adds	r4, #1
 8002b62:	9304      	str	r3, [sp, #16]
 8002b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b68:	4824      	ldr	r0, [pc, #144]	@ (8002bfc <_svfiprintf_r+0x1e8>)
 8002b6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b6e:	2206      	movs	r2, #6
 8002b70:	f7fd fb36 	bl	80001e0 <memchr>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	d036      	beq.n	8002be6 <_svfiprintf_r+0x1d2>
 8002b78:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <_svfiprintf_r+0x1ec>)
 8002b7a:	bb1b      	cbnz	r3, 8002bc4 <_svfiprintf_r+0x1b0>
 8002b7c:	9b03      	ldr	r3, [sp, #12]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	f023 0307 	bic.w	r3, r3, #7
 8002b84:	3308      	adds	r3, #8
 8002b86:	9303      	str	r3, [sp, #12]
 8002b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b8a:	4433      	add	r3, r6
 8002b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b8e:	e76a      	b.n	8002a66 <_svfiprintf_r+0x52>
 8002b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b94:	460c      	mov	r4, r1
 8002b96:	2001      	movs	r0, #1
 8002b98:	e7a8      	b.n	8002aec <_svfiprintf_r+0xd8>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	3401      	adds	r4, #1
 8002b9e:	9305      	str	r3, [sp, #20]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f04f 0c0a 	mov.w	ip, #10
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bac:	3a30      	subs	r2, #48	@ 0x30
 8002bae:	2a09      	cmp	r2, #9
 8002bb0:	d903      	bls.n	8002bba <_svfiprintf_r+0x1a6>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0c6      	beq.n	8002b44 <_svfiprintf_r+0x130>
 8002bb6:	9105      	str	r1, [sp, #20]
 8002bb8:	e7c4      	b.n	8002b44 <_svfiprintf_r+0x130>
 8002bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e7f0      	b.n	8002ba6 <_svfiprintf_r+0x192>
 8002bc4:	ab03      	add	r3, sp, #12
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	462a      	mov	r2, r5
 8002bca:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <_svfiprintf_r+0x1f0>)
 8002bcc:	a904      	add	r1, sp, #16
 8002bce:	4638      	mov	r0, r7
 8002bd0:	f3af 8000 	nop.w
 8002bd4:	1c42      	adds	r2, r0, #1
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	d1d6      	bne.n	8002b88 <_svfiprintf_r+0x174>
 8002bda:	89ab      	ldrh	r3, [r5, #12]
 8002bdc:	065b      	lsls	r3, r3, #25
 8002bde:	f53f af2d 	bmi.w	8002a3c <_svfiprintf_r+0x28>
 8002be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002be4:	e72c      	b.n	8002a40 <_svfiprintf_r+0x2c>
 8002be6:	ab03      	add	r3, sp, #12
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	462a      	mov	r2, r5
 8002bec:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <_svfiprintf_r+0x1f0>)
 8002bee:	a904      	add	r1, sp, #16
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	f000 f879 	bl	8002ce8 <_printf_i>
 8002bf6:	e7ed      	b.n	8002bd4 <_svfiprintf_r+0x1c0>
 8002bf8:	0800310c 	.word	0x0800310c
 8002bfc:	08003116 	.word	0x08003116
 8002c00:	00000000 	.word	0x00000000
 8002c04:	0800295d 	.word	0x0800295d
 8002c08:	08003112 	.word	0x08003112

08002c0c <_printf_common>:
 8002c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c10:	4616      	mov	r6, r2
 8002c12:	4698      	mov	r8, r3
 8002c14:	688a      	ldr	r2, [r1, #8]
 8002c16:	690b      	ldr	r3, [r1, #16]
 8002c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bfb8      	it	lt
 8002c20:	4613      	movlt	r3, r2
 8002c22:	6033      	str	r3, [r6, #0]
 8002c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c28:	4607      	mov	r7, r0
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	b10a      	cbz	r2, 8002c32 <_printf_common+0x26>
 8002c2e:	3301      	adds	r3, #1
 8002c30:	6033      	str	r3, [r6, #0]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	0699      	lsls	r1, r3, #26
 8002c36:	bf42      	ittt	mi
 8002c38:	6833      	ldrmi	r3, [r6, #0]
 8002c3a:	3302      	addmi	r3, #2
 8002c3c:	6033      	strmi	r3, [r6, #0]
 8002c3e:	6825      	ldr	r5, [r4, #0]
 8002c40:	f015 0506 	ands.w	r5, r5, #6
 8002c44:	d106      	bne.n	8002c54 <_printf_common+0x48>
 8002c46:	f104 0a19 	add.w	sl, r4, #25
 8002c4a:	68e3      	ldr	r3, [r4, #12]
 8002c4c:	6832      	ldr	r2, [r6, #0]
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	42ab      	cmp	r3, r5
 8002c52:	dc26      	bgt.n	8002ca2 <_printf_common+0x96>
 8002c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	3b00      	subs	r3, #0
 8002c5c:	bf18      	it	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	0692      	lsls	r2, r2, #26
 8002c62:	d42b      	bmi.n	8002cbc <_printf_common+0xb0>
 8002c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c68:	4641      	mov	r1, r8
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	47c8      	blx	r9
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d01e      	beq.n	8002cb0 <_printf_common+0xa4>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	6922      	ldr	r2, [r4, #16]
 8002c76:	f003 0306 	and.w	r3, r3, #6
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf02      	ittt	eq
 8002c7e:	68e5      	ldreq	r5, [r4, #12]
 8002c80:	6833      	ldreq	r3, [r6, #0]
 8002c82:	1aed      	subeq	r5, r5, r3
 8002c84:	68a3      	ldr	r3, [r4, #8]
 8002c86:	bf0c      	ite	eq
 8002c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c8c:	2500      	movne	r5, #0
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bfc4      	itt	gt
 8002c92:	1a9b      	subgt	r3, r3, r2
 8002c94:	18ed      	addgt	r5, r5, r3
 8002c96:	2600      	movs	r6, #0
 8002c98:	341a      	adds	r4, #26
 8002c9a:	42b5      	cmp	r5, r6
 8002c9c:	d11a      	bne.n	8002cd4 <_printf_common+0xc8>
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	e008      	b.n	8002cb4 <_printf_common+0xa8>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	4652      	mov	r2, sl
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	4638      	mov	r0, r7
 8002caa:	47c8      	blx	r9
 8002cac:	3001      	adds	r0, #1
 8002cae:	d103      	bne.n	8002cb8 <_printf_common+0xac>
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb8:	3501      	adds	r5, #1
 8002cba:	e7c6      	b.n	8002c4a <_printf_common+0x3e>
 8002cbc:	18e1      	adds	r1, r4, r3
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	2030      	movs	r0, #48	@ 0x30
 8002cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002cc6:	4422      	add	r2, r4
 8002cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	e7c7      	b.n	8002c64 <_printf_common+0x58>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	4641      	mov	r1, r8
 8002cda:	4638      	mov	r0, r7
 8002cdc:	47c8      	blx	r9
 8002cde:	3001      	adds	r0, #1
 8002ce0:	d0e6      	beq.n	8002cb0 <_printf_common+0xa4>
 8002ce2:	3601      	adds	r6, #1
 8002ce4:	e7d9      	b.n	8002c9a <_printf_common+0x8e>
	...

08002ce8 <_printf_i>:
 8002ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cec:	7e0f      	ldrb	r7, [r1, #24]
 8002cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002cf0:	2f78      	cmp	r7, #120	@ 0x78
 8002cf2:	4691      	mov	r9, r2
 8002cf4:	4680      	mov	r8, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	469a      	mov	sl, r3
 8002cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002cfe:	d807      	bhi.n	8002d10 <_printf_i+0x28>
 8002d00:	2f62      	cmp	r7, #98	@ 0x62
 8002d02:	d80a      	bhi.n	8002d1a <_printf_i+0x32>
 8002d04:	2f00      	cmp	r7, #0
 8002d06:	f000 80d2 	beq.w	8002eae <_printf_i+0x1c6>
 8002d0a:	2f58      	cmp	r7, #88	@ 0x58
 8002d0c:	f000 80b9 	beq.w	8002e82 <_printf_i+0x19a>
 8002d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d18:	e03a      	b.n	8002d90 <_printf_i+0xa8>
 8002d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d1e:	2b15      	cmp	r3, #21
 8002d20:	d8f6      	bhi.n	8002d10 <_printf_i+0x28>
 8002d22:	a101      	add	r1, pc, #4	@ (adr r1, 8002d28 <_printf_i+0x40>)
 8002d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d28:	08002d81 	.word	0x08002d81
 8002d2c:	08002d95 	.word	0x08002d95
 8002d30:	08002d11 	.word	0x08002d11
 8002d34:	08002d11 	.word	0x08002d11
 8002d38:	08002d11 	.word	0x08002d11
 8002d3c:	08002d11 	.word	0x08002d11
 8002d40:	08002d95 	.word	0x08002d95
 8002d44:	08002d11 	.word	0x08002d11
 8002d48:	08002d11 	.word	0x08002d11
 8002d4c:	08002d11 	.word	0x08002d11
 8002d50:	08002d11 	.word	0x08002d11
 8002d54:	08002e95 	.word	0x08002e95
 8002d58:	08002dbf 	.word	0x08002dbf
 8002d5c:	08002e4f 	.word	0x08002e4f
 8002d60:	08002d11 	.word	0x08002d11
 8002d64:	08002d11 	.word	0x08002d11
 8002d68:	08002eb7 	.word	0x08002eb7
 8002d6c:	08002d11 	.word	0x08002d11
 8002d70:	08002dbf 	.word	0x08002dbf
 8002d74:	08002d11 	.word	0x08002d11
 8002d78:	08002d11 	.word	0x08002d11
 8002d7c:	08002e57 	.word	0x08002e57
 8002d80:	6833      	ldr	r3, [r6, #0]
 8002d82:	1d1a      	adds	r2, r3, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6032      	str	r2, [r6, #0]
 8002d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d90:	2301      	movs	r3, #1
 8002d92:	e09d      	b.n	8002ed0 <_printf_i+0x1e8>
 8002d94:	6833      	ldr	r3, [r6, #0]
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	1d19      	adds	r1, r3, #4
 8002d9a:	6031      	str	r1, [r6, #0]
 8002d9c:	0606      	lsls	r6, r0, #24
 8002d9e:	d501      	bpl.n	8002da4 <_printf_i+0xbc>
 8002da0:	681d      	ldr	r5, [r3, #0]
 8002da2:	e003      	b.n	8002dac <_printf_i+0xc4>
 8002da4:	0645      	lsls	r5, r0, #25
 8002da6:	d5fb      	bpl.n	8002da0 <_printf_i+0xb8>
 8002da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002dac:	2d00      	cmp	r5, #0
 8002dae:	da03      	bge.n	8002db8 <_printf_i+0xd0>
 8002db0:	232d      	movs	r3, #45	@ 0x2d
 8002db2:	426d      	negs	r5, r5
 8002db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002db8:	4859      	ldr	r0, [pc, #356]	@ (8002f20 <_printf_i+0x238>)
 8002dba:	230a      	movs	r3, #10
 8002dbc:	e011      	b.n	8002de2 <_printf_i+0xfa>
 8002dbe:	6821      	ldr	r1, [r4, #0]
 8002dc0:	6833      	ldr	r3, [r6, #0]
 8002dc2:	0608      	lsls	r0, r1, #24
 8002dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002dc8:	d402      	bmi.n	8002dd0 <_printf_i+0xe8>
 8002dca:	0649      	lsls	r1, r1, #25
 8002dcc:	bf48      	it	mi
 8002dce:	b2ad      	uxthmi	r5, r5
 8002dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002dd2:	4853      	ldr	r0, [pc, #332]	@ (8002f20 <_printf_i+0x238>)
 8002dd4:	6033      	str	r3, [r6, #0]
 8002dd6:	bf14      	ite	ne
 8002dd8:	230a      	movne	r3, #10
 8002dda:	2308      	moveq	r3, #8
 8002ddc:	2100      	movs	r1, #0
 8002dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002de2:	6866      	ldr	r6, [r4, #4]
 8002de4:	60a6      	str	r6, [r4, #8]
 8002de6:	2e00      	cmp	r6, #0
 8002de8:	bfa2      	ittt	ge
 8002dea:	6821      	ldrge	r1, [r4, #0]
 8002dec:	f021 0104 	bicge.w	r1, r1, #4
 8002df0:	6021      	strge	r1, [r4, #0]
 8002df2:	b90d      	cbnz	r5, 8002df8 <_printf_i+0x110>
 8002df4:	2e00      	cmp	r6, #0
 8002df6:	d04b      	beq.n	8002e90 <_printf_i+0x1a8>
 8002df8:	4616      	mov	r6, r2
 8002dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8002dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8002e02:	5dc7      	ldrb	r7, [r0, r7]
 8002e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e08:	462f      	mov	r7, r5
 8002e0a:	42bb      	cmp	r3, r7
 8002e0c:	460d      	mov	r5, r1
 8002e0e:	d9f4      	bls.n	8002dfa <_printf_i+0x112>
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d10b      	bne.n	8002e2c <_printf_i+0x144>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	07df      	lsls	r7, r3, #31
 8002e18:	d508      	bpl.n	8002e2c <_printf_i+0x144>
 8002e1a:	6923      	ldr	r3, [r4, #16]
 8002e1c:	6861      	ldr	r1, [r4, #4]
 8002e1e:	4299      	cmp	r1, r3
 8002e20:	bfde      	ittt	le
 8002e22:	2330      	movle	r3, #48	@ 0x30
 8002e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e2c:	1b92      	subs	r2, r2, r6
 8002e2e:	6122      	str	r2, [r4, #16]
 8002e30:	f8cd a000 	str.w	sl, [sp]
 8002e34:	464b      	mov	r3, r9
 8002e36:	aa03      	add	r2, sp, #12
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	f7ff fee6 	bl	8002c0c <_printf_common>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d14a      	bne.n	8002eda <_printf_i+0x1f2>
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	b004      	add	sp, #16
 8002e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	4833      	ldr	r0, [pc, #204]	@ (8002f24 <_printf_i+0x23c>)
 8002e58:	2778      	movs	r7, #120	@ 0x78
 8002e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	6831      	ldr	r1, [r6, #0]
 8002e62:	061f      	lsls	r7, r3, #24
 8002e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e68:	d402      	bmi.n	8002e70 <_printf_i+0x188>
 8002e6a:	065f      	lsls	r7, r3, #25
 8002e6c:	bf48      	it	mi
 8002e6e:	b2ad      	uxthmi	r5, r5
 8002e70:	6031      	str	r1, [r6, #0]
 8002e72:	07d9      	lsls	r1, r3, #31
 8002e74:	bf44      	itt	mi
 8002e76:	f043 0320 	orrmi.w	r3, r3, #32
 8002e7a:	6023      	strmi	r3, [r4, #0]
 8002e7c:	b11d      	cbz	r5, 8002e86 <_printf_i+0x19e>
 8002e7e:	2310      	movs	r3, #16
 8002e80:	e7ac      	b.n	8002ddc <_printf_i+0xf4>
 8002e82:	4827      	ldr	r0, [pc, #156]	@ (8002f20 <_printf_i+0x238>)
 8002e84:	e7e9      	b.n	8002e5a <_printf_i+0x172>
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	f023 0320 	bic.w	r3, r3, #32
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	e7f6      	b.n	8002e7e <_printf_i+0x196>
 8002e90:	4616      	mov	r6, r2
 8002e92:	e7bd      	b.n	8002e10 <_printf_i+0x128>
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	6825      	ldr	r5, [r4, #0]
 8002e98:	6961      	ldr	r1, [r4, #20]
 8002e9a:	1d18      	adds	r0, r3, #4
 8002e9c:	6030      	str	r0, [r6, #0]
 8002e9e:	062e      	lsls	r6, r5, #24
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	d501      	bpl.n	8002ea8 <_printf_i+0x1c0>
 8002ea4:	6019      	str	r1, [r3, #0]
 8002ea6:	e002      	b.n	8002eae <_printf_i+0x1c6>
 8002ea8:	0668      	lsls	r0, r5, #25
 8002eaa:	d5fb      	bpl.n	8002ea4 <_printf_i+0x1bc>
 8002eac:	8019      	strh	r1, [r3, #0]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	6123      	str	r3, [r4, #16]
 8002eb2:	4616      	mov	r6, r2
 8002eb4:	e7bc      	b.n	8002e30 <_printf_i+0x148>
 8002eb6:	6833      	ldr	r3, [r6, #0]
 8002eb8:	1d1a      	adds	r2, r3, #4
 8002eba:	6032      	str	r2, [r6, #0]
 8002ebc:	681e      	ldr	r6, [r3, #0]
 8002ebe:	6862      	ldr	r2, [r4, #4]
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f7fd f98c 	bl	80001e0 <memchr>
 8002ec8:	b108      	cbz	r0, 8002ece <_printf_i+0x1e6>
 8002eca:	1b80      	subs	r0, r0, r6
 8002ecc:	6060      	str	r0, [r4, #4]
 8002ece:	6863      	ldr	r3, [r4, #4]
 8002ed0:	6123      	str	r3, [r4, #16]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ed8:	e7aa      	b.n	8002e30 <_printf_i+0x148>
 8002eda:	6923      	ldr	r3, [r4, #16]
 8002edc:	4632      	mov	r2, r6
 8002ede:	4649      	mov	r1, r9
 8002ee0:	4640      	mov	r0, r8
 8002ee2:	47d0      	blx	sl
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d0ad      	beq.n	8002e44 <_printf_i+0x15c>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	079b      	lsls	r3, r3, #30
 8002eec:	d413      	bmi.n	8002f16 <_printf_i+0x22e>
 8002eee:	68e0      	ldr	r0, [r4, #12]
 8002ef0:	9b03      	ldr	r3, [sp, #12]
 8002ef2:	4298      	cmp	r0, r3
 8002ef4:	bfb8      	it	lt
 8002ef6:	4618      	movlt	r0, r3
 8002ef8:	e7a6      	b.n	8002e48 <_printf_i+0x160>
 8002efa:	2301      	movs	r3, #1
 8002efc:	4632      	mov	r2, r6
 8002efe:	4649      	mov	r1, r9
 8002f00:	4640      	mov	r0, r8
 8002f02:	47d0      	blx	sl
 8002f04:	3001      	adds	r0, #1
 8002f06:	d09d      	beq.n	8002e44 <_printf_i+0x15c>
 8002f08:	3501      	adds	r5, #1
 8002f0a:	68e3      	ldr	r3, [r4, #12]
 8002f0c:	9903      	ldr	r1, [sp, #12]
 8002f0e:	1a5b      	subs	r3, r3, r1
 8002f10:	42ab      	cmp	r3, r5
 8002f12:	dcf2      	bgt.n	8002efa <_printf_i+0x212>
 8002f14:	e7eb      	b.n	8002eee <_printf_i+0x206>
 8002f16:	2500      	movs	r5, #0
 8002f18:	f104 0619 	add.w	r6, r4, #25
 8002f1c:	e7f5      	b.n	8002f0a <_printf_i+0x222>
 8002f1e:	bf00      	nop
 8002f20:	0800311d 	.word	0x0800311d
 8002f24:	0800312e 	.word	0x0800312e

08002f28 <memmove>:
 8002f28:	4288      	cmp	r0, r1
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	eb01 0402 	add.w	r4, r1, r2
 8002f30:	d902      	bls.n	8002f38 <memmove+0x10>
 8002f32:	4284      	cmp	r4, r0
 8002f34:	4623      	mov	r3, r4
 8002f36:	d807      	bhi.n	8002f48 <memmove+0x20>
 8002f38:	1e43      	subs	r3, r0, #1
 8002f3a:	42a1      	cmp	r1, r4
 8002f3c:	d008      	beq.n	8002f50 <memmove+0x28>
 8002f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f46:	e7f8      	b.n	8002f3a <memmove+0x12>
 8002f48:	4402      	add	r2, r0
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	428a      	cmp	r2, r1
 8002f4e:	d100      	bne.n	8002f52 <memmove+0x2a>
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f5a:	e7f7      	b.n	8002f4c <memmove+0x24>

08002f5c <_sbrk_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4d06      	ldr	r5, [pc, #24]	@ (8002f78 <_sbrk_r+0x1c>)
 8002f60:	2300      	movs	r3, #0
 8002f62:	4604      	mov	r4, r0
 8002f64:	4608      	mov	r0, r1
 8002f66:	602b      	str	r3, [r5, #0]
 8002f68:	f7fe fd54 	bl	8001a14 <_sbrk>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d102      	bne.n	8002f76 <_sbrk_r+0x1a>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	b103      	cbz	r3, 8002f76 <_sbrk_r+0x1a>
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	bd38      	pop	{r3, r4, r5, pc}
 8002f78:	2000033c 	.word	0x2000033c

08002f7c <memcpy>:
 8002f7c:	440a      	add	r2, r1
 8002f7e:	4291      	cmp	r1, r2
 8002f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f84:	d100      	bne.n	8002f88 <memcpy+0xc>
 8002f86:	4770      	bx	lr
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f92:	4291      	cmp	r1, r2
 8002f94:	d1f9      	bne.n	8002f8a <memcpy+0xe>
 8002f96:	bd10      	pop	{r4, pc}

08002f98 <_realloc_r>:
 8002f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9c:	4680      	mov	r8, r0
 8002f9e:	4615      	mov	r5, r2
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	b921      	cbnz	r1, 8002fae <_realloc_r+0x16>
 8002fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa8:	4611      	mov	r1, r2
 8002faa:	f7ff bc4b 	b.w	8002844 <_malloc_r>
 8002fae:	b92a      	cbnz	r2, 8002fbc <_realloc_r+0x24>
 8002fb0:	f7ff fbdc 	bl	800276c <_free_r>
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fbc:	f000 f81a 	bl	8002ff4 <_malloc_usable_size_r>
 8002fc0:	4285      	cmp	r5, r0
 8002fc2:	4606      	mov	r6, r0
 8002fc4:	d802      	bhi.n	8002fcc <_realloc_r+0x34>
 8002fc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002fca:	d8f4      	bhi.n	8002fb6 <_realloc_r+0x1e>
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4640      	mov	r0, r8
 8002fd0:	f7ff fc38 	bl	8002844 <_malloc_r>
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d0ec      	beq.n	8002fb4 <_realloc_r+0x1c>
 8002fda:	42b5      	cmp	r5, r6
 8002fdc:	462a      	mov	r2, r5
 8002fde:	4621      	mov	r1, r4
 8002fe0:	bf28      	it	cs
 8002fe2:	4632      	movcs	r2, r6
 8002fe4:	f7ff ffca 	bl	8002f7c <memcpy>
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4640      	mov	r0, r8
 8002fec:	f7ff fbbe 	bl	800276c <_free_r>
 8002ff0:	463c      	mov	r4, r7
 8002ff2:	e7e0      	b.n	8002fb6 <_realloc_r+0x1e>

08002ff4 <_malloc_usable_size_r>:
 8002ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff8:	1f18      	subs	r0, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfbc      	itt	lt
 8002ffe:	580b      	ldrlt	r3, [r1, r0]
 8003000:	18c0      	addlt	r0, r0, r3
 8003002:	4770      	bx	lr

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
